#!/usr/bin/env bun

// @ts-check

const { readFileSync } = require('fs');
const { buildSchema } = require('..');

/**
 * @param {NodeJS.WritableStream} out
 */
function usage(out) {
  out.write(`Usage: cdf-schema-builder <schema.xml> <schema.json>\n`);
}

/** @type {string | undefined} */
let xsdSchemaFilePath;

/** @type {string | undefined} */
let jsonSchemaFilePath;

for (let i = 2; i < process.argv.length; i++) {
  const arg = process.argv[i];
  switch (arg) {
    case '-h':
    case '--help':
      usage(process.stdout);
      process.exit(0);

    default: {
      if (arg.startsWith('-')) {
        process.stderr.write(`error: unknown option: ${arg}\n`);
        usage(process.stderr);
      } else if (arg.endsWith('.xsd') || arg.endsWith('.xml')) {
        xsdSchemaFilePath = arg;
      } else if (arg.endsWith('.json')) {
        jsonSchemaFilePath = arg;
      } else {
        process.stderr.write(`error: unknown file extension: ${arg}\n`);
        usage(process.stderr);
      }
    }
  }
}

if (!xsdSchemaFilePath || !jsonSchemaFilePath) {
  process.stderr.write('error: missing XSD or JSON schema file path\n');
  usage(process.stderr);
  process.exit(1);
}

const xsdSchemaFileContents = readFileSync(xsdSchemaFilePath, 'utf-8');
const jsonSchemaFileContents = readFileSync(jsonSchemaFilePath, 'utf-8');
buildSchema(xsdSchemaFileContents, jsonSchemaFileContents, process.stdout);
