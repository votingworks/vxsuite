import { assert, assertDefined, find, range } from '@votingworks/basics';
import {
  electionGeneral,
  electionFamousNames2021Fixtures,
  electionPrimaryPrecinctSplitsFixtures,
} from '@votingworks/fixtures';
import {
  layOutAllBallotStyles,
  DEFAULT_LAYOUT_OPTIONS,
  BUBBLE_POSITIONS,
  LAYOUT_DENSITIES,
  markBallot,
  voteIsCandidate,
} from '@votingworks/hmpb-layout';
import {
  BallotPaperSize,
  BallotStyle,
  BallotType,
  Election,
  getBallotStyle,
  getContests,
  VotesDict,
} from '@votingworks/types';
import { join } from 'path';

export const fixturesDir = join(__dirname, '../fixtures');
export const famousNamesDir = join(fixturesDir, 'famous-names');
export const generalElectionDir = join(fixturesDir, 'general-election');
export const primaryElectionDir = join(fixturesDir, 'primary-election');

export const famousNamesFixtures = (() => {
  const { electionDefinition, ballots } = layOutAllBallotStyles({
    election: electionFamousNames2021Fixtures.election,
    ballotType: BallotType.Precinct,
    ballotMode: 'test',
    layoutOptions: DEFAULT_LAYOUT_OPTIONS,
  }).unsafeUnwrap();

  const { precinctId, document: ballot, gridLayout } = ballots[0];

  const votes: VotesDict = Object.fromEntries(
    electionDefinition.election.contests.map((contest, i) => {
      assert(contest.type === 'candidate');
      const candidates = range(0, contest.seats).map(
        (j) => contest.candidates[(i + j) % contest.candidates.length]
      );
      return [contest.id, candidates];
    })
  );

  const markedBallot = markBallot({ ballot, votes });

  // Saved PDFs generated by generate_fixtures.ts
  const blankBallotPath = join(famousNamesDir, 'blank-ballot.pdf');
  const markedBallotPath = join(famousNamesDir, 'marked-ballot.pdf');

  return {
    electionDefinition,
    precinctId,
    gridLayout,
    blankBallot: ballot,
    markedBallot,
    votes,
    blankBallotPath,
    markedBallotPath,
  };
})();

export const generalElectionFixtures = (() => {
  const fixtures = [];

  for (const bubblePosition of BUBBLE_POSITIONS) {
    for (const paperSize of Object.values(BallotPaperSize)) {
      for (const layoutDensity of LAYOUT_DENSITIES) {
        const election: Election = {
          ...electionGeneral,
          ballotLayout: {
            ...electionGeneral.ballotLayout,
            paperSize,
          },
        };

        const { ballots, electionDefinition } = layOutAllBallotStyles({
          election,
          ballotType: BallotType.Absentee,
          ballotMode: 'official',
          layoutOptions: {
            bubblePosition,
            layoutDensity,
          },
        }).unsafeUnwrap();

        // Has ballot measures
        const ballotStyle = assertDefined(
          getBallotStyle({ election, ballotStyleId: '12' })
        );
        const precinctId = assertDefined(ballotStyle.precincts[0]);
        const { document: ballot, gridLayout } = find(
          ballots,
          (b) =>
            b.precinctId === precinctId &&
            b.gridLayout.ballotStyleId === ballotStyle.id
        );

        const contests = getContests({ election, ballotStyle });
        const votes: VotesDict = Object.fromEntries(
          contests.map((contest, i) => {
            if (contest.type === 'candidate') {
              const candidates = range(0, contest.seats - (i % 2)).map(
                (j) => contest.candidates[(i + j) % contest.candidates.length]
              );
              if (contest.allowWriteIns && i % 2 === 0) {
                const writeInIndex = i % contest.seats;
                candidates.push({
                  id: `write-in-${writeInIndex}`,
                  name: `Write-In #${writeInIndex + 1}`,
                  isWriteIn: true,
                  writeInIndex,
                });
              }
              return [contest.id, candidates];
            }
            return [
              contest.id,
              i % 2 === 0 ? [contest.yesOption.id] : [contest.noOption.id],
            ];
          })
        );

        const unmarkedWriteIns = contests.flatMap((contest, i) => {
          if (!(contest.type === 'candidate' && contest.allowWriteIns)) {
            return [];
          }
          // Skip contests where we already voted for a write-in above
          if (
            assertDefined(votes[contest.id]).some(
              (vote) => voteIsCandidate(vote) && vote.isWriteIn
            )
          ) {
            return [];
          }

          const writeInIndex = i % contest.seats;
          return [
            {
              contestId: contest.id,
              writeInIndex,
              name: `Unmarked Write-In #${writeInIndex + 1}`,
            },
          ];
        });

        const markedBallot = markBallot({ ballot, votes, unmarkedWriteIns });

        const electionDir = join(
          generalElectionDir,
          `${bubblePosition}-${paperSize}-${layoutDensity}`
        );

        // Saved PDFs generated by generate_fixtures.ts
        const blankBallotPath = join(electionDir, 'blank-ballot.pdf');
        const markedBallotPath = join(electionDir, 'marked-ballot.pdf');

        fixtures.push({
          bubblePosition,
          paperSize,
          density: layoutDensity,
          electionDefinition,
          precinctId,
          ballotStyleId: ballotStyle.id,
          gridLayout,
          blankBallot: ballot,
          markedBallot,
          votes,
          unmarkedWriteIns,
          electionDir,
          blankBallotPath,
          markedBallotPath,
        });
      }
    }
  }

  return fixtures;
})();

export const primaryElectionFixtures = (() => {
  const { election } = electionPrimaryPrecinctSplitsFixtures;
  const { electionDefinition, ballots } = layOutAllBallotStyles({
    election,
    ballotType: BallotType.Precinct,
    ballotMode: 'test',
    layoutOptions: DEFAULT_LAYOUT_OPTIONS,
  }).unsafeUnwrap();

  function makePartyFixtures(partyLabel: string, ballotStyle: BallotStyle) {
    const precinctId = assertDefined(ballotStyle.precincts[0]);
    const otherPrecinctId = assertDefined(ballotStyle.precincts[1]);
    assert(precinctId !== otherPrecinctId);
    const { document: ballot, gridLayout } = find(
      ballots,
      (b) =>
        b.precinctId === precinctId &&
        b.gridLayout.ballotStyleId === ballotStyle.id
    );
    const { document: otherPrecinctBlankBallot } = find(
      ballots,
      (b) =>
        b.precinctId === otherPrecinctId &&
        b.gridLayout.ballotStyleId === ballotStyle.id
    );

    const contests = getContests({ election, ballotStyle });
    const votes: VotesDict = Object.fromEntries(
      contests.map((contest, i) => {
        if (contest.type === 'candidate') {
          const candidates = range(0, contest.seats).map(
            (j) => contest.candidates[(i + j) % contest.candidates.length]
          );
          return [contest.id, candidates];
        }
        return [
          contest.id,
          i % 2 === 0 ? [contest.yesOption.id] : [contest.noOption.id],
        ];
      })
    );

    const markedBallot = markBallot({ ballot, votes });

    // Saved PDFs generated by generate_fixtures.ts
    const blankBallotPath = join(
      primaryElectionDir,
      `${partyLabel}-blank-ballot.pdf`
    );
    const markedBallotPath = join(
      primaryElectionDir,
      `${partyLabel}-marked-ballot.pdf`
    );
    const otherPrecinctBlankBallotPath = join(
      primaryElectionDir,
      `${partyLabel}-other-precinct-blank-ballot.pdf`
    );

    return {
      partyLabel,
      precinctId,
      gridLayout,
      blankBallot: ballot,
      markedBallot,
      votes,
      blankBallotPath,
      markedBallotPath,
      otherPrecinctBlankBallot,
      otherPrecinctBlankBallotPath,
    };
  }

  return {
    electionDefinition,
    mammalParty: makePartyFixtures(
      'mammal',
      assertDefined(getBallotStyle({ election, ballotStyleId: 'm-c1-w1' }))
    ),
    fishParty: makePartyFixtures(
      'fish',
      assertDefined(getBallotStyle({ election, ballotStyleId: 'f-c1-w1' }))
    ),
  };
})();
