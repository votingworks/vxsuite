import { ZodSchema } from 'zod';
import { throwIllegalValue } from '@votingworks/basics';
import { asBoolean } from './as_boolean';

export enum BooleanEnvironmentVariableName {
  /**
   * Enables the write in adjudication tab in VxAdmin, and enables exporting
   * images with write ins in the scan service
   */
  WRITE_IN_ADJUDICATION = 'REACT_APP_VX_ENABLE_WRITE_IN_ADJUDICATION',
  /**
   * When enabled VxAdmin will generate 000000 as the PIN for any created smartcard.
   */
  ALL_ZERO_SMARTCARD_PIN = 'REACT_APP_VX_ENABLE_ALL_ZERO_SMARTCARD_PIN_GENERATION',
  /** Enables the React Query Devtools in development. */
  ENABLE_REACT_QUERY_DEVTOOLS = 'REACT_APP_VX_ENABLE_REACT_QUERY_DEVTOOLS',
  /** Enables the VxSuite Dev Dock in development. See libs/dev-dock. */
  ENABLE_DEV_DOCK = 'REACT_APP_VX_ENABLE_DEV_DOCK',
  /** Skips PIN entry during authentication */
  SKIP_PIN_ENTRY = 'REACT_APP_VX_SKIP_PIN_ENTRY',
  /**
   * Use mock cards instead of a real card reader. Meant for development and integration tests.
   * Real smart cards will not work when this flag is enabled.
   */
  USE_MOCK_CARDS = 'REACT_APP_VX_USE_MOCK_CARDS',
  /**
   * Use a mock USB drive instead of real USB drives. Meant for development and integration tests.
   * Real USBs will not work when this flag is enabled.
   */
  USE_MOCK_USB_DRIVE = 'REACT_APP_VX_USE_MOCK_USB_DRIVE',
  /**
   * Use a mock printer instead of a real printer. Meant for development and integration tests.
   * Real printers will not connect when this flag is enabled.
   */
  USE_MOCK_PRINTER = 'REACT_APP_VX_USE_MOCK_PRINTER',
  /**
   * Use a mock PDI scanner instead of a real scanner. Meant for development and integration tests.
   * Real scanners will not work when this flag is enabled.
   */
  USE_MOCK_PDI_SCANNER = 'REACT_APP_VX_USE_MOCK_PDI_SCANNER',
  /**
   * Skips ballot hash checks when importing CVRs to allow using old fixtures
   * in development even as their respective election definitions change.
   */
  SKIP_CVR_BALLOT_HASH_CHECK = 'REACT_APP_VX_SKIP_CVR_BALLOT_HASH_CHECK',
  /**
   * Skips authentication (i.e. signature verification) of election packages on import
   */
  SKIP_ELECTION_PACKAGE_AUTHENTICATION = 'REACT_APP_VX_SKIP_ELECTION_PACKAGE_AUTHENTICATION',
  /**
   * Skips authentication (i.e. signature verification) of cast vote records on import
   */
  SKIP_CAST_VOTE_RECORDS_AUTHENTICATION = 'REACT_APP_VX_SKIP_CAST_VOTE_RECORDS_AUTHENTICATION',
  /**
   * Allows VxMarkScan to run without a connection to the Custom paper handler
   */
  USE_MOCK_PAPER_HANDLER = 'REACT_APP_VX_USE_MOCK_PAPER_HANDLER',
  /**
   * Run VxMarkScan expecting BMD-150 hardware
   */
  MARK_SCAN_USE_BMD_150 = 'REACT_APP_VX_MARK_SCAN_USE_BMD_150',
  /**
   * Enables cloud translation and speech synthesis when exporting election packages from VxDesign
   */
  ENABLE_CLOUD_TRANSLATION_AND_SPEECH_SYNTHESIS = 'REACT_APP_VX_ENABLE_CLOUD_TRANSLATION_AND_SPEECH_SYNTHESIS',
  /** Use the Brother printer in VxScan (as opposed to the Fujitsu thermal printer) */
  USE_BROTHER_PRINTER = 'REACT_APP_VX_USE_BROTHER_PRINTER',
  /** Use the Custom scanner in VxScan (as opposed to the PDI scanner) */
  USE_CUSTOM_SCANNER = 'REACT_APP_VX_USE_CUSTOM_SCANNER',
  /**
   * Enables screen reader audio only when headphones are plugged in.
   *
   * NOTE: This will only work on real machines with a headphone port, not VMs.
   */
  ONLY_ENABLE_SCREEN_READER_FOR_HEADPHONES = 'REACT_APP_VX_ONLY_ENABLE_SCREEN_READER_FOR_HEADPHONES',
  /**
   * Hides the on-screen cursor within the bounds of the app window - intended
   * for prod touchscreen machines.
   */
  HIDE_CURSOR = 'REACT_APP_VX_HIDE_CURSOR',
}

export interface BooleanEnvironmentConfig {
  name: BooleanEnvironmentVariableName;
  /**
   * When false this flag will never be enabled when NODE_ENV is production.
   */
  allowInProduction: boolean;
  /**
   * When true the script that generates .env files will turn this flag on by default.
   */
  autoEnableInDevelopment: boolean;
  /**
   * If specified, overrides {@link autoEnableInDevelopment} when generating
   * .env files for VxDev.
   */
  autoEnableInVxDev?: boolean;
}

export interface StringEnvironmentConfig {
  defaultValue: string; // Default value for autogenerated .env files
  zodSchema?: ZodSchema;
}

/**
 * @private Don't use this function directly, instead use isFeatureFlagEnabled,
 * which will check the env var's config and convert it to a boolean.
 */
export function getEnvironmentVariable(
  name: BooleanEnvironmentVariableName
): string | undefined {
  switch (name) {
    case BooleanEnvironmentVariableName.WRITE_IN_ADJUDICATION:
      return process.env.REACT_APP_VX_ENABLE_WRITE_IN_ADJUDICATION;
    case BooleanEnvironmentVariableName.ALL_ZERO_SMARTCARD_PIN:
      return process.env.REACT_APP_VX_ENABLE_ALL_ZERO_SMARTCARD_PIN_GENERATION;
    case BooleanEnvironmentVariableName.ENABLE_REACT_QUERY_DEVTOOLS:
      return process.env.REACT_APP_VX_ENABLE_REACT_QUERY_DEVTOOLS;
    case BooleanEnvironmentVariableName.ENABLE_DEV_DOCK:
      return process.env.REACT_APP_VX_ENABLE_DEV_DOCK;
    case BooleanEnvironmentVariableName.SKIP_PIN_ENTRY:
      return process.env.REACT_APP_VX_SKIP_PIN_ENTRY;
    case BooleanEnvironmentVariableName.USE_MOCK_CARDS:
      return process.env.REACT_APP_VX_USE_MOCK_CARDS;
    case BooleanEnvironmentVariableName.USE_MOCK_USB_DRIVE:
      return process.env.REACT_APP_VX_USE_MOCK_USB_DRIVE;
    case BooleanEnvironmentVariableName.USE_MOCK_PRINTER:
      return process.env.REACT_APP_VX_USE_MOCK_PRINTER;
    case BooleanEnvironmentVariableName.USE_MOCK_PDI_SCANNER:
      return process.env.REACT_APP_VX_USE_MOCK_PDI_SCANNER;
    case BooleanEnvironmentVariableName.SKIP_CVR_BALLOT_HASH_CHECK:
      return process.env.REACT_APP_VX_SKIP_CVR_BALLOT_HASH_CHECK;
    case BooleanEnvironmentVariableName.SKIP_ELECTION_PACKAGE_AUTHENTICATION:
      return process.env.REACT_APP_VX_SKIP_ELECTION_PACKAGE_AUTHENTICATION;
    case BooleanEnvironmentVariableName.SKIP_CAST_VOTE_RECORDS_AUTHENTICATION:
      return process.env.REACT_APP_VX_SKIP_CAST_VOTE_RECORDS_AUTHENTICATION;
    case BooleanEnvironmentVariableName.USE_MOCK_PAPER_HANDLER:
      return process.env.REACT_APP_VX_USE_MOCK_PAPER_HANDLER;
    case BooleanEnvironmentVariableName.MARK_SCAN_USE_BMD_150:
      return process.env.REACT_APP_VX_MARK_SCAN_USE_BMD_150;
    case BooleanEnvironmentVariableName.ENABLE_CLOUD_TRANSLATION_AND_SPEECH_SYNTHESIS:
      return process.env
        .REACT_APP_VX_ENABLE_CLOUD_TRANSLATION_AND_SPEECH_SYNTHESIS;
    case BooleanEnvironmentVariableName.USE_BROTHER_PRINTER:
      return process.env.REACT_APP_VX_USE_BROTHER_PRINTER;
    case BooleanEnvironmentVariableName.USE_CUSTOM_SCANNER:
      return process.env.REACT_APP_VX_USE_CUSTOM_SCANNER;
    case BooleanEnvironmentVariableName.ONLY_ENABLE_SCREEN_READER_FOR_HEADPHONES:
      return process.env.REACT_APP_VX_ONLY_ENABLE_SCREEN_READER_FOR_HEADPHONES;
    case BooleanEnvironmentVariableName.HIDE_CURSOR:
      return process.env.REACT_APP_VX_HIDE_CURSOR;
    /* istanbul ignore next */
    default:
      throwIllegalValue(name);
  }
}

export function getBooleanEnvVarConfig(
  name: BooleanEnvironmentVariableName
): BooleanEnvironmentConfig {
  switch (name) {
    case BooleanEnvironmentVariableName.WRITE_IN_ADJUDICATION:
      return {
        name,
        allowInProduction: true,
        autoEnableInDevelopment: true,
      };
    case BooleanEnvironmentVariableName.ALL_ZERO_SMARTCARD_PIN:
      return {
        name,
        allowInProduction: false,
        autoEnableInDevelopment: true,
      };
    case BooleanEnvironmentVariableName.ENABLE_REACT_QUERY_DEVTOOLS:
      return {
        name,
        allowInProduction: false,
        autoEnableInDevelopment: false,
      };
    case BooleanEnvironmentVariableName.ENABLE_DEV_DOCK:
      return {
        name,
        allowInProduction: false,
        autoEnableInDevelopment: true,
      };
    case BooleanEnvironmentVariableName.SKIP_PIN_ENTRY:
      return {
        name,
        allowInProduction: false,
        autoEnableInDevelopment: false,
      };
    case BooleanEnvironmentVariableName.USE_MOCK_CARDS:
      return {
        name,
        allowInProduction: false,
        autoEnableInDevelopment: false,
      };
    case BooleanEnvironmentVariableName.USE_MOCK_USB_DRIVE:
      return {
        name,
        allowInProduction: false,
        autoEnableInDevelopment: false,
      };
    case BooleanEnvironmentVariableName.USE_MOCK_PRINTER:
      return {
        name,
        allowInProduction: false,
        autoEnableInDevelopment: false,
      };
    case BooleanEnvironmentVariableName.USE_MOCK_PDI_SCANNER:
      return {
        name,
        allowInProduction: false,
        autoEnableInDevelopment: false,
      };
    case BooleanEnvironmentVariableName.SKIP_CVR_BALLOT_HASH_CHECK:
      return {
        name,
        allowInProduction: false,
        autoEnableInDevelopment: false,
      };
    case BooleanEnvironmentVariableName.SKIP_ELECTION_PACKAGE_AUTHENTICATION:
      return {
        name,
        allowInProduction: false,
        autoEnableInDevelopment: false,
      };
    case BooleanEnvironmentVariableName.SKIP_CAST_VOTE_RECORDS_AUTHENTICATION:
      return {
        name,
        allowInProduction: false,
        autoEnableInDevelopment: false,
      };
    case BooleanEnvironmentVariableName.USE_MOCK_PAPER_HANDLER:
      return {
        name,
        allowInProduction: false,
        autoEnableInDevelopment: false,
      };
    case BooleanEnvironmentVariableName.MARK_SCAN_USE_BMD_150:
      return {
        name,
        allowInProduction: true,
        autoEnableInDevelopment: false,
      };
    case BooleanEnvironmentVariableName.ENABLE_CLOUD_TRANSLATION_AND_SPEECH_SYNTHESIS:
      return {
        name,
        allowInProduction: true,
        autoEnableInDevelopment: false,
      };
    case BooleanEnvironmentVariableName.USE_BROTHER_PRINTER:
      return {
        name,
        allowInProduction: true,
        autoEnableInDevelopment: false,
      };
    case BooleanEnvironmentVariableName.USE_CUSTOM_SCANNER:
      return {
        name,
        allowInProduction: true,
        autoEnableInDevelopment: false,
      };
    case BooleanEnvironmentVariableName.ONLY_ENABLE_SCREEN_READER_FOR_HEADPHONES:
      return {
        name,
        allowInProduction: true,
        autoEnableInDevelopment: false,
        autoEnableInVxDev: true,
      };
    case BooleanEnvironmentVariableName.HIDE_CURSOR:
      return {
        name,
        allowInProduction: true,
        autoEnableInDevelopment: false,
      };
    /* istanbul ignore next */
    default:
      throwIllegalValue(name);
  }
}

/**
 * We use a custom environment variable for this instead of overloading NODE_ENV, e.g.
 * NODE_ENV=test or NODE_ENV=integration-test, because we want integration tests to use
 * NODE_ENV=production to ensure that they're mimicking production as closely as possible.
 */
export function isIntegrationTest(): boolean {
  return asBoolean(process.env.IS_INTEGRATION_TEST);
}
