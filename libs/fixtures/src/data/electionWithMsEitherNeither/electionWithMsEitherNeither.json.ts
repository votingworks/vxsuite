/* Generated by res-to-ts. DO NOT EDIT */
/* eslint-disable */
/* istanbul ignore file */

import { Buffer } from 'buffer';
import { mkdtempSync, writeFileSync } from 'fs';
import { tmpdir } from 'os';
import { join, sep } from 'path';
import { BallotPackage, safeParseElectionDefinition, DEFAULT_SYSTEM_SETTINGS } from '@votingworks/types';

/**
 * Data of data/electionWithMsEitherNeither/electionWithMsEitherNeither.json encoded as base64.
 *
 * SHA-256 hash of file data: 1ff8c2350f1c242ae3ca5b29d4c4d3f9c48c94b8a0cf8cb1ad716e14107783a6
 */
const resourceDataBase64 = 'ewogICJ0aXRsZSI6ICJNb2NrIEdlbmVyYWwgRWxlY3Rpb24gQ2hvY3RhdyAyMDIwIiwKICAic3RhdGUiOiAiU3RhdGUgb2YgTWlzc2lzc2lwcGkiLAogICJjb3VudHkiOiB7CiAgICAiaWQiOiAiMTAiLAogICAgIm5hbWUiOiAiQ2hvY3RhdyBDb3VudHkiCiAgfSwKICAiZGF0ZSI6ICIyMDIwLTA4LTI2VDAwOjAwOjAwLTEwOjAwIiwKICAiYmFsbG90TGF5b3V0IjogewogICAgInBhcGVyU2l6ZSI6ICJsZXR0ZXIiLAogICAgIm1ldGFkYXRhRW5jb2RpbmciOiAicXItY29kZSIKICB9LAogICJwYXJ0aWVzIjogWwogICAgewogICAgICAiaWQiOiAiMiIsCiAgICAgICJuYW1lIjogIkRlbW9jcmF0IiwKICAgICAgImZ1bGxOYW1lIjogIkRlbW9jcmF0aWMgUGFydHkiLAogICAgICAiYWJicmV2IjogIkQiCiAgICB9LAogICAgewogICAgICAiaWQiOiAiMyIsCiAgICAgICJuYW1lIjogIlJlcHVibGljYW4iLAogICAgICAiZnVsbE5hbWUiOiAiUmVwdWJsaWNhbiBQYXJ0eSIsCiAgICAgICJhYmJyZXYiOiAiUiIKICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICI0IiwKICAgICAgIm5hbWUiOiAiTGliZXJ0YXJpYW4iLAogICAgICAiZnVsbE5hbWUiOiAiTGliZXJ0YXJpYW4gUGFydHkiLAogICAgICAiYWJicmV2IjogIkwiCiAgICB9LAogICAgewogICAgICAiaWQiOiAiNSIsCiAgICAgICJuYW1lIjogIlJlZm9ybSIsCiAgICAgICJmdWxsTmFtZSI6ICJSZWZvcm0gUGFydHkiLAogICAgICAiYWJicmV2IjogIlJFRiIKICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICI2IiwKICAgICAgIm5hbWUiOiAiTmF0dXJhbCBMYXciLAogICAgICAiZnVsbE5hbWUiOiAiTmF0dXJhbCBMYXcgUGFydHkiLAogICAgICAiYWJicmV2IjogIk4iCiAgICB9LAogICAgewogICAgICAiaWQiOiAiOCIsCiAgICAgICJuYW1lIjogIkNvbnN0aXR1dGlvbiIsCiAgICAgICJmdWxsTmFtZSI6ICJDb25zdGl0dXRpb24gUGFydHkiLAogICAgICAiYWJicmV2IjogIkMiCiAgICB9LAogICAgewogICAgICAiaWQiOiAiOSIsCiAgICAgICJuYW1lIjogIkdyZWVuIiwKICAgICAgImZ1bGxOYW1lIjogIkdyZWVuIFBhcnR5IiwKICAgICAgImFiYnJldiI6ICJHIgogICAgfSwKICAgIHsKICAgICAgImlkIjogIjEwIiwKICAgICAgIm5hbWUiOiAiQW1lcmljYSBGaXJzdCIsCiAgICAgICJmdWxsTmFtZSI6ICJBbWVyaWNhIEZpcnN0IFBhcnR5IiwKICAgICAgImFiYnJldiI6ICJBIgogICAgfSwKICAgIHsKICAgICAgImlkIjogIjExIiwKICAgICAgIm5hbWUiOiAiSW5kZXBlbmRlbnQiLAogICAgICAiZnVsbE5hbWUiOiAiSW5kZXBlbmRlbnQgUGFydHkiLAogICAgICAiYWJicmV2IjogIkkiCiAgICB9LAogICAgewogICAgICAiaWQiOiAiMTIiLAogICAgICAibmFtZSI6ICJOb25wYXJ0aXNhbiIsCiAgICAgICJmdWxsTmFtZSI6ICJOb25wYXJ0aXNhbiIsCiAgICAgICJhYmJyZXYiOiAiTlAiCiAgICB9LAogICAgewogICAgICAiaWQiOiAiNTc1MDAwMDAxIiwKICAgICAgIm5hbWUiOiAiSnVzdGljZSIsCiAgICAgICJmdWxsTmFtZSI6ICJKdXN0aWNlIFBhcnR5IiwKICAgICAgImFiYnJldiI6ICJKVVMiCiAgICB9LAogICAgewogICAgICAiaWQiOiAiNTc1MDAwMDAyIiwKICAgICAgIm5hbWUiOiAiUHJvaGliaXRpb24iLAogICAgICAiZnVsbE5hbWUiOiAiUHJvaGliaXRpb24gUGFydHkiLAogICAgICAiYWJicmV2IjogIlBSTyIKICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICI1NzUwMDAwMDMiLAogICAgICAibmFtZSI6ICJBbWVyaWNhbiBEZWx0YSIsCiAgICAgICJmdWxsTmFtZSI6ICJBbWVyaWNhbiBEZWx0YSBQYXJ0eSIsCiAgICAgICJhYmJyZXYiOiAiQURQIgogICAgfSwKICAgIHsKICAgICAgImlkIjogIjU3NTAwMDAwNCIsCiAgICAgICJuYW1lIjogIlZldGVyYW5zIiwKICAgICAgImZ1bGxOYW1lIjogIlZldGVyYW5zIFBhcnR5IiwKICAgICAgImFiYnJldiI6ICJWRVQiCiAgICB9CiAgXSwKICAiY29udGVzdHMiOiBbCiAgICB7CiAgICAgICJpZCI6ICI3NzUwMjA4NzYiLAogICAgICAiZGlzdHJpY3RJZCI6ICIxIiwKICAgICAgInR5cGUiOiAiY2FuZGlkYXRlIiwKICAgICAgInRpdGxlIjogIlByZXNpZGVudCIsCiAgICAgICJzZWF0cyI6IDEsCiAgICAgICJhbGxvd1dyaXRlSW5zIjogdHJ1ZSwKICAgICAgImNhbmRpZGF0ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImlkIjogIjc3NTAzMTk4OCIsCiAgICAgICAgICAibmFtZSI6ICJQcmVzaWRlbnRpYWwgRWxlY3RvcnMgZm9yIEpvZSBCaWRlbiBmb3IgUHJlc2lkZW50IGFuZCBLYW1hbGEgSGFycmlzIGZvciBWaWNlIFByZXNpZGVudCIsCiAgICAgICAgICAicGFydHlJZHMiOiBbIjIiXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImlkIjogIjc3NTAzMTk4NyIsCiAgICAgICAgICAibmFtZSI6ICJQcmVzaWRlbnRpYWwgRWxlY3RvcnMgZm9yIERvbmFsZCBKLiBUcnVtcCBmb3IgUHJlc2lkZW50IGFuZCBNaWNoYWVsIFIuIFBlbmNlIGZvciBWaWNlIFByZXNpZGVudCIsCiAgICAgICAgICAicGFydHlJZHMiOiBbIjMiXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImlkIjogIjc3NTAzMTk4OSIsCiAgICAgICAgICAibmFtZSI6ICJQcmVzaWRlbnRpYWwgRWxlY3RvcnMgZm9yIFBoaWwgQ29sbGlucyBmb3IgUHJlc2lkZW50IGFuZCBCaWxsIFBhcmtlciBmb3IgVmljZSBQcmVzaWRlbnQiLAogICAgICAgICAgInBhcnR5SWRzIjogWyIxMSJdCiAgICAgICAgfQogICAgICBdCiAgICB9LAogICAgewogICAgICAiaWQiOiAiNzc1MDIwODc3IiwKICAgICAgImRpc3RyaWN0SWQiOiAiMSIsCiAgICAgICJ0eXBlIjogImNhbmRpZGF0ZSIsCiAgICAgICJ0aXRsZSI6ICJTZW5hdGUgIiwKICAgICAgInNlYXRzIjogMSwKICAgICAgImFsbG93V3JpdGVJbnMiOiB0cnVlLAogICAgICAiY2FuZGlkYXRlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiNzc1MDMxOTg1IiwKICAgICAgICAgICJuYW1lIjogIk1pa2UgRXNweSIsCiAgICAgICAgICAicGFydHlJZHMiOiBbIjIiXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImlkIjogIjc3NTAzMTk4NiIsCiAgICAgICAgICAibmFtZSI6ICJDaW5keSBIeWRlLVNtaXRoIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsiMyJdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiNzc1MDMxOTkwIiwKICAgICAgICAgICJuYW1lIjogIkppbW15IEVkd2FyZHMiLAogICAgICAgICAgInBhcnR5SWRzIjogWyI0Il0KICAgICAgICB9CiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICI3NzUwMjA4NzIiLAogICAgICAiZGlzdHJpY3RJZCI6ICIxMDAwMDAwNDciLAogICAgICAidHlwZSI6ICJjYW5kaWRhdGUiLAogICAgICAidGl0bGUiOiAiMXN0IENvbmdyZXNzaW9uYWwgRGlzdHJpY3QiLAogICAgICAic2VhdHMiOiAxLAogICAgICAiYWxsb3dXcml0ZUlucyI6IHRydWUsCiAgICAgICJjYW5kaWRhdGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJpZCI6ICI3NzUwMzE5NzgiLAogICAgICAgICAgIm5hbWUiOiAiQW50b25pYSBFbGlhc29uIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsiMiJdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiNzc1MDMxOTc5IiwKICAgICAgICAgICJuYW1lIjogIlRyZW50IEtlbGx5IiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsiMyJdCiAgICAgICAgfQogICAgICBdCiAgICB9LAogICAgewogICAgICAiaWQiOiAiNzc1MDIwODcwIiwKICAgICAgImRpc3RyaWN0SWQiOiAiMTAwMDAwMTc0IiwKICAgICAgInR5cGUiOiAiY2FuZGlkYXRlIiwKICAgICAgInRpdGxlIjogIlN1cHJlbWUgQ291cnQgRGlzdHJpY3QgMyhOb3J0aGVybikgUG9zaXRpb24gMyIsCiAgICAgICJzZWF0cyI6IDEsCiAgICAgICJhbGxvd1dyaXRlSW5zIjogdHJ1ZSwKICAgICAgImNhbmRpZGF0ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImlkIjogIjc3NTAzMTk3NiIsCiAgICAgICAgICAibmFtZSI6ICJKb3NpYWggRGVubmlzIENvbGVtYW4iLAogICAgICAgICAgInBhcnR5SWRzIjogWyIxMiJdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiNzc1MDMxOTkzIiwKICAgICAgICAgICJuYW1lIjogIlBlcmN5IEwuIEx5bmNoYXJkIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsiMTIiXQogICAgICAgIH0KICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImlkIjogIjc3NTAyMDg5OSIsCiAgICAgICJkaXN0cmljdElkIjogIjU3NTAwMDUwMSIsCiAgICAgICJ0eXBlIjogImNhbmRpZGF0ZSIsCiAgICAgICJ0aXRsZSI6ICJFbGVjdGlvbiBDb21taXNzaW9uZXIgIDAxIiwKICAgICAgInNlYXRzIjogMSwKICAgICAgImFsbG93V3JpdGVJbnMiOiB0cnVlLAogICAgICAiY2FuZGlkYXRlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiNzc1MDMyMDE1IiwKICAgICAgICAgICJuYW1lIjogIkdseW5kYSBDaGFuZXkgRnVsY2UiCiAgICAgICAgfQogICAgICBdCiAgICB9LAogICAgewogICAgICAiaWQiOiAiNzc1MDIwOTAwIiwKICAgICAgImRpc3RyaWN0SWQiOiAiNTc1MDAwNTAyIiwKICAgICAgInR5cGUiOiAiY2FuZGlkYXRlIiwKICAgICAgInRpdGxlIjogIkVsZWN0aW9uIENvbW1pc3Npb25lciAwMiIsCiAgICAgICJzZWF0cyI6IDEsCiAgICAgICJhbGxvd1dyaXRlSW5zIjogdHJ1ZSwKICAgICAgImNhbmRpZGF0ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImlkIjogIjc3NTAzMjAxNiIsCiAgICAgICAgICAibmFtZSI6ICJDaGFybGVzIEJlY2siCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiNzc1MDMyMDE3IiwKICAgICAgICAgICJuYW1lIjogIlNoYXJvbiBCcm9va3MiCiAgICAgICAgfQogICAgICBdCiAgICB9LAogICAgewogICAgICAiaWQiOiAiNzc1MDIwOTAxIiwKICAgICAgImRpc3RyaWN0SWQiOiAiNTc1MDAwNTAzIiwKICAgICAgInR5cGUiOiAiY2FuZGlkYXRlIiwKICAgICAgInRpdGxlIjogIkVsZWN0aW9uIENvbW1pc3Npb25lciAwMyIsCiAgICAgICJzZWF0cyI6IDEsCiAgICAgICJhbGxvd1dyaXRlSW5zIjogdHJ1ZSwKICAgICAgImNhbmRpZGF0ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImlkIjogIjc3NTAzMjAxOCIsCiAgICAgICAgICAibmFtZSI6ICJEb3JvdGh5IEFuZGVyc29uIgogICAgICAgIH0KICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImlkIjogIjc3NTAyMDkwMiIsCiAgICAgICJkaXN0cmljdElkIjogIjU3NTAwMDUwNCIsCiAgICAgICJ0eXBlIjogImNhbmRpZGF0ZSIsCiAgICAgICJ0aXRsZSI6ICJFbGVjdGlvbiBDb21taXNzaW9uZXIgMDQiLAogICAgICAic2VhdHMiOiAxLAogICAgICAiYWxsb3dXcml0ZUlucyI6IHRydWUsCiAgICAgICJjYW5kaWRhdGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJpZCI6ICI3NzUwMzIwMTkiLAogICAgICAgICAgIm5hbWUiOiAiV2lsbGllIE1hZSBHdWlsbG9yeSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICI3NzUwMzIwMjAiLAogICAgICAgICAgIm5hbWUiOiAiTGV3aXMgV3JpZ2h0IgogICAgICAgIH0KICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImlkIjogIjc3NTAyMDkwMyIsCiAgICAgICJkaXN0cmljdElkIjogIjU3NTAwMDUwNSIsCiAgICAgICJ0eXBlIjogImNhbmRpZGF0ZSIsCiAgICAgICJ0aXRsZSI6ICJFbGVjdGlvbiBDb21taXNzaW9uZXIgMDUiLAogICAgICAic2VhdHMiOiAxLAogICAgICAiYWxsb3dXcml0ZUlucyI6IHRydWUsCiAgICAgICJjYW5kaWRhdGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJpZCI6ICI3NzUwMzIwMjEiLAogICAgICAgICAgIm5hbWUiOiAiT3VpZGEgQSBMb3BlciIsCiAgICAgICAgICAicGFydHlJZHMiOiBbIjExIl0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICI3NzUwMzIwMjIiLAogICAgICAgICAgIm5hbWUiOiAiV2F5bmUgTWNMZW9kIgogICAgICAgIH0KICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImlkIjogIjc3NTAyMDkwNCIsCiAgICAgICJkaXN0cmljdElkIjogIjU3NTAwMDA4NCIsCiAgICAgICJ0eXBlIjogImNhbmRpZGF0ZSIsCiAgICAgICJ0aXRsZSI6ICJTY2hvb2wgQm9hcmQgMDUiLAogICAgICAic2VhdHMiOiAxLAogICAgICAiYWxsb3dXcml0ZUlucyI6IHRydWUsCiAgICAgICJjYW5kaWRhdGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJpZCI6ICI3NzUwMzIwMjMiLAogICAgICAgICAgIm5hbWUiOiAiTWljaGFlbCBEIFRob21hcyIKICAgICAgICB9CiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICI3NTAwMDAwMTciLAogICAgICAiZGlzdHJpY3RJZCI6ICIxMDAwMDAyNzUiLAogICAgICAidHlwZSI6ICJ5ZXNubyIsCiAgICAgICJ0aXRsZSI6ICJCYWxsb3QgTWVhc3VyZSAyXG5Ib3VzZSBDb25jdXJyZW50IFJlc29sdXRpb24gTm8uIDQ3IiwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoaXMgYW1lbmRtZW50IHByb3ZpZGVzIHRoYXQgdG8gYmUgZWxlY3RlZCBHb3Zlcm5vciwgb3IgdG8gYW55IG90aGVyIHN0YXRld2lkZSBvZmZpY2UsIGEgY2FuZGlkYXRlIG11c3QgcmVjZWl2ZSBhIG1ham9yaXR5IG9mIHRoZSB2b3RlcyBpbiB0aGUgZ2VuZXJhbCBlbGVjdGlvbi4gSWYgbm8gY2FuZGlkYXRlIHJlY2VpdmVzIGEgbWFqb3JpdHkgb2YgdGhlIHZvdGVzLCB0aGVuIGEgcnVub2ZmIGVsZWN0aW9uIHNoYWxsIGJlIGhlbGQgYXMgcHJvdmlkZWQgYnkgZ2VuZXJhbCBsYXcuIFRoZSByZXF1aXJlbWVudCBvZiByZWNlaXZpbmcgdGhlIG1vc3Qgdm90ZXMgaW4gYSBtYWpvcml0eSBvZiBNaXNzaXNzaXBwaSBIb3VzZSBvZiBSZXByZXNlbnRhdGl2ZVx1MjAxOXMgZGlzdHJpY3RzIGlzIHJlbW92ZWQuIiwKICAgICAgInllc09wdGlvbiI6IHsKICAgICAgICAiaWQiOiAiNzUwMDAwMDk0IiwKICAgICAgICAibGFiZWwiOiAiWUVTIgogICAgICB9LAogICAgICAibm9PcHRpb24iOiB7CiAgICAgICAgImlkIjogIjc1MDAwMDA5NSIsCiAgICAgICAgImxhYmVsIjogIk5PIgogICAgICB9CiAgICB9LAogICAgewogICAgICAiaWQiOiAiNzUwMDAwMDE4IiwKICAgICAgImRpc3RyaWN0SWQiOiAiMTAwMDAwMjc1IiwKICAgICAgInR5cGUiOiAieWVzbm8iLAogICAgICAidGl0bGUiOiAiQmFsbG90IE1lYXN1cmUgM1xuSG91c2UgQmlsbCAxNzk2IC0gRmxhZyBSZWZlcmVuZHVtIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlBsZWFzZSB2b3RlIFx1MjAxOFllc1x1MjAxOSBvciBcdTIwMThOb1x1MjAxOSBvbiB3aGV0aGVyIHRoZSBmb2xsb3dpbmcgZGVzaWduIHNoYWxsIGJlIHRoZSBvZmZpY2lhbCBNaXNzaXNzaXBwaSBTdGF0ZSBGbGFnIiwKICAgICAgInllc09wdGlvbiI6IHsKICAgICAgICAiaWQiOiAiNzUwMDAwMDkyIiwKICAgICAgICAibGFiZWwiOiAiWUVTIgogICAgICB9LAogICAgICAibm9PcHRpb24iOiB7CiAgICAgICAgImlkIjogIjc1MDAwMDA5MyIsCiAgICAgICAgImxhYmVsIjogIk5PIgogICAgICB9CiAgICB9LAogICAgewogICAgICAiaWQiOiAiNzUwMDAwMDE1IiwKICAgICAgImRpc3RyaWN0SWQiOiAiMTAwMDAwMjc1IiwKICAgICAgInR5cGUiOiAieWVzbm8iLAogICAgICAidGl0bGUiOiAiQmFsbG90IE1lYXN1cmUgMSIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICI8Yj5Jbml0aWF0ZWQgYnkgUGV0aXRpb24gYW5kIEFsdGVybmF0aXZlIGJ5IExlZ2lzbGF0dXJlPC9iPlxuXG5Jbml0aWF0aXZlIE1lYXN1cmUgTm8uIDY1LCBTaG91bGQgTWlzc2lzc2lwcGkgYWxsb3cgcXVhbGlmaWVkIHBhdGllbnRzIHdpdGggZGViaWxpdGF0aW5nIG1lZGljYWwgY29uZGl0aW9ucywgYXMgY2VydGlmaWVkIGJ5IE1pc3Npc3NpcHBpIGxpY2Vuc2VkIHBoeXNpY2lhbnMsIHRvIHVzZSBtZWRpY2FsIG1hcmlqdWFuYT9cblxuTGVnaXNsYXRpdmUgQnVkZ2V0IE9mZmljZSBGaXNjYWwgQW5hbHlzaXM6IFRoZSBhbnRpY2lwYXRlZCBleHBlbnNlcyBmb3IgeWVhciBvbmUgKDEpIHRvIGltcGxlbWVudCBhIG1lZGljYWwgbWFyaWp1YW5hIHByb2dyYW0gaXMgJDI0LDA2OCwxNTAgKFBsYW50cyBcdTIwMTMgc2VlZHMgdG8gU2FsZTogJDUsMDAwLDAwMDsgTGljZW5zaW5nLCBNb25pdG9yaW5nLCBJbnNwZWN0aW9uOiAkMTYsMjIwLDE1MDsgYW5kIENvc3QgdG8gQ29sbGVjdCBSZXZlbnVlOiAkMiw4NDgsMDAwKS4gVGhlIGFudGljaXBhdGVkIHJldmVudWUgaXMgJDEzLDAwMCwwMDAgKFVzZXIgSUQgQ2FyZHM6ICQyLDUwMCwwMDA7IENvbW1lcmNpYWwgTGljZW5zZXM6ICQ1MDAsMDAwIGFuZCBUYXggUmV2ZW51ZSBhdCA3IHBlcmNlbnQ6ICQxMCwwMDAsMDAwKS4gVGhlIG92ZXJhbGwgY29zdCBmb3IgeWVhciBvbmUgKDEpIGlzIGFudGljaXBhdGVkIHRvIGJlICQxMSwwNjgsMTUwLlxuXG5MZWdpc2xhdGl2ZSBCdWRnZXQgT2ZmaWNlIEZpc2NhbCBBbmFseXNpczogVGhlIGFudGljaXBhdGVkIGV4cGVuc2VzIGZvciB5ZWFyIGFmdGVyIHRoZSBmaXJzdCBmb3IgYSBtZWRpY2FsIG1hcmlqdWFuYSBwcm9ncmFtIGlzICQxNSwzMzgsMDAwIChQbGFudHMgXHUyMDEzIHNlZWRzIHRvIFNhbGU6ICQ1LDAwMCwwMDA7IExpY2Vuc2luZywgTW9uaXRvcmluZywgSW5zcGVjdGlvbjogJDgsNzU2LDAwMDsgYW5kIENvc3QgdG8gQ29sbGVjdCBSZXZlbnVlOiAkMSw1ODIsMDAwKS4gVGhlIGFudGljaXBhdGVkIHJldmVudWUgaXMgJDI2LDAwMCwwMDAgKFVzZXIgSUQgQ2FyZHM6ICQ1LDAwMCwwMDA7IENvbW1lcmNpYWwgTGljZW5zZXM6ICQxLDAwMCwwMDAgYW5kIFRheCBSZXZlbnVlIGF0IDcgcGVyY2VudDogJDIwLDAwMCwwMDApLiBUaGUgb3ZlcmFsbCBhbm51YWwgcmV2ZW51ZSBpcyBhbnRpY2lwYXRlZCB0byBiZSAkMTAsNjYyLjAwMC5cblxuQWx0ZXJuYXRpdmUgTWVhc3VyZSBOby4gNjUgQSwgU2hhbGwgTWlzc2lzc2lwcGkgZXN0YWJsaXNoIGEgcHJvZ3JhbSB0byBhbGxvdyB0aGUgbWVkaWNhbCB1c2Ugb2YgbWFyaWp1YW5hIHByb2R1Y3RzIGJ5IHF1YWxpZmllZCBwZXJzb25zIHdpdGggZGViaWxpdGF0aW5nIG1lZGljYWwgY29uZGl0aW9ucz9cblxuTGVnaXNsYXRpdmUgQnVkZ2V0IE9mZmljZSBGaXNjYWwgQW5hbHlzaXM6IFRoZXJlIGlzIG5vIGRldGVybWluYWJsZSBjb3N0IG9yIHJldmVudWUgaW1wYWN0IGFzc29jaWF0ZWQgd2l0aCB0aGlzIGluaXRpYXRpdmUuIiwKICAgICAgInllc09wdGlvbiI6IHsKICAgICAgICAiaWQiOiAiNzUwMDAwMDg4IiwKICAgICAgICAibGFiZWwiOiAiRk9SIEFQUFJPVkFMIE9GIEVJVEhFUiBJbml0aWF0aXZlIE5vLiA2NSBPUiBBbHRlcm5hdGl2ZSBNZWFzdXJlIE5vLiA2NSBBIgogICAgICB9LAogICAgICAibm9PcHRpb24iOiB7CiAgICAgICAgImlkIjogIjc1MDAwMDA4OSIsCiAgICAgICAgImxhYmVsIjogIkFHQUlOU1QgQk9USCBJbml0aWF0aXZlIE1lYXN1cmUgTm8uIDY1IEFORCBBbHRlcm5hdGl2ZSBNZWFzdXJlIE5vLiA2NSBBIgogICAgICB9CiAgICB9LAogICAgewogICAgICAiaWQiOiAiNzUwMDAwMDE2IiwKICAgICAgImRpc3RyaWN0SWQiOiAiMTAwMDAwMjc1IiwKICAgICAgInR5cGUiOiAieWVzbm8iLAogICAgICAidGl0bGUiOiAiQmFsbG90IE1lYXN1cmUgMSIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICI8Yj5Jbml0aWF0ZWQgYnkgUGV0aXRpb24gYW5kIEFsdGVybmF0aXZlIGJ5IExlZ2lzbGF0dXJlPC9iPlxuXG5Jbml0aWF0aXZlIE1lYXN1cmUgTm8uIDY1LCBTaG91bGQgTWlzc2lzc2lwcGkgYWxsb3cgcXVhbGlmaWVkIHBhdGllbnRzIHdpdGggZGViaWxpdGF0aW5nIG1lZGljYWwgY29uZGl0aW9ucywgYXMgY2VydGlmaWVkIGJ5IE1pc3Npc3NpcHBpIGxpY2Vuc2VkIHBoeXNpY2lhbnMsIHRvIHVzZSBtZWRpY2FsIG1hcmlqdWFuYT9cblxuTGVnaXNsYXRpdmUgQnVkZ2V0IE9mZmljZSBGaXNjYWwgQW5hbHlzaXM6IFRoZSBhbnRpY2lwYXRlZCBleHBlbnNlcyBmb3IgeWVhciBvbmUgKDEpIHRvIGltcGxlbWVudCBhIG1lZGljYWwgbWFyaWp1YW5hIHByb2dyYW0gaXMgJDI0LDA2OCwxNTAgKFBsYW50cyBcdTIwMTMgc2VlZHMgdG8gU2FsZTogJDUsMDAwLDAwMDsgTGljZW5zaW5nLCBNb25pdG9yaW5nLCBJbnNwZWN0aW9uOiAkMTYsMjIwLDE1MDsgYW5kIENvc3QgdG8gQ29sbGVjdCBSZXZlbnVlOiAkMiw4NDgsMDAwKS4gVGhlIGFudGljaXBhdGVkIHJldmVudWUgaXMgJDEzLDAwMCwwMDAgKFVzZXIgSUQgQ2FyZHM6ICQyLDUwMCwwMDA7IENvbW1lcmNpYWwgTGljZW5zZXM6ICQ1MDAsMDAwIGFuZCBUYXggUmV2ZW51ZSBhdCA3IHBlcmNlbnQ6ICQxMCwwMDAsMDAwKS4gVGhlIG92ZXJhbGwgY29zdCBmb3IgeWVhciBvbmUgKDEpIGlzIGFudGljaXBhdGVkIHRvIGJlICQxMSwwNjgsMTUwLlxuXG5MZWdpc2xhdGl2ZSBCdWRnZXQgT2ZmaWNlIEZpc2NhbCBBbmFseXNpczogVGhlIGFudGljaXBhdGVkIGV4cGVuc2VzIGZvciB5ZWFyIGFmdGVyIHRoZSBmaXJzdCBmb3IgYSBtZWRpY2FsIG1hcmlqdWFuYSBwcm9ncmFtIGlzICQxNSwzMzgsMDAwIChQbGFudHMgXHUyMDEzIHNlZWRzIHRvIFNhbGU6ICQ1LDAwMCwwMDA7IExpY2Vuc2luZywgTW9uaXRvcmluZywgSW5zcGVjdGlvbjogJDgsNzU2LDAwMDsgYW5kIENvc3QgdG8gQ29sbGVjdCBSZXZlbnVlOiAkMSw1ODIsMDAwKS4gVGhlIGFudGljaXBhdGVkIHJldmVudWUgaXMgJDI2LDAwMCwwMDAgKFVzZXIgSUQgQ2FyZHM6ICQ1LDAwMCwwMDA7IENvbW1lcmNpYWwgTGljZW5zZXM6ICQxLDAwMCwwMDAgYW5kIFRheCBSZXZlbnVlIGF0IDcgcGVyY2VudDogJDIwLDAwMCwwMDApLiBUaGUgb3ZlcmFsbCBhbm51YWwgcmV2ZW51ZSBpcyBhbnRpY2lwYXRlZCB0byBiZSAkMTAsNjYyLjAwMC5cblxuQWx0ZXJuYXRpdmUgTWVhc3VyZSBOby4gNjUgQSwgU2hhbGwgTWlzc2lzc2lwcGkgZXN0YWJsaXNoIGEgcHJvZ3JhbSB0byBhbGxvdyB0aGUgbWVkaWNhbCB1c2Ugb2YgbWFyaWp1YW5hIHByb2R1Y3RzIGJ5IHF1YWxpZmllZCBwZXJzb25zIHdpdGggZGViaWxpdGF0aW5nIG1lZGljYWwgY29uZGl0aW9ucz9cblxuTGVnaXNsYXRpdmUgQnVkZ2V0IE9mZmljZSBGaXNjYWwgQW5hbHlzaXM6IFRoZXJlIGlzIG5vIGRldGVybWluYWJsZSBjb3N0IG9yIHJldmVudWUgaW1wYWN0IGFzc29jaWF0ZWQgd2l0aCB0aGlzIGluaXRpYXRpdmUuIiwKICAgICAgInllc09wdGlvbiI6IHsKICAgICAgICAiaWQiOiAiNzUwMDAwMDkwIiwKICAgICAgICAibGFiZWwiOiAiRk9SIEluaXRpYXRpdmUgTWVhc3VyZSBOby4gNjUiCiAgICAgIH0sCiAgICAgICJub09wdGlvbiI6IHsKICAgICAgICAiaWQiOiAiNzUwMDAwMDkxIiwKICAgICAgICAibGFiZWwiOiAiRk9SIEFsdGVybmF0aXZlIE1lYXN1cmUgNjUgQSIKICAgICAgfQogICAgfQogIF0sCiAgImRpc3RyaWN0cyI6IFsKICAgIHsKICAgICAgImlkIjogIjEiLAogICAgICAibmFtZSI6ICJVbml0ZWQgU3RhdGVzIgogICAgfSwKICAgIHsKICAgICAgImlkIjogIjEwMDAwMDI3NSIsCiAgICAgICJuYW1lIjogIlN0YXRlIE9mIE1pc3Npc3NpcHBpIgogICAgfSwKICAgIHsKICAgICAgImlkIjogIjEwMDAwMDA0NyIsCiAgICAgICJuYW1lIjogIlVTIEhvdXNlIE9mIFJlcHJlc2VudGF0aXZlcyIKICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICIxMDAwMDAxNzQiLAogICAgICAibmFtZSI6ICJOb3J0aGVybiBEaXN0cmljdCIKICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICI1NzUwMDA1MDEiLAogICAgICAibmFtZSI6ICJFbGVjdGlvbiBDb21taXNzaW9uZXIgMDEiCiAgICB9LAogICAgewogICAgICAiaWQiOiAiNTc1MDAwNTAyIiwKICAgICAgIm5hbWUiOiAiRWxlY3Rpb24gQ29tbWlzc2lvbmVyIDAyIgogICAgfSwKICAgIHsKICAgICAgImlkIjogIjU3NTAwMDUwMyIsCiAgICAgICJuYW1lIjogIkVsZWN0aW9uIENvbW1pc3Npb25lciAwMyIKICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICI1NzUwMDA1MDQiLAogICAgICAibmFtZSI6ICJFbGVjdGlvbiBDb21taXNzaW9uZXIgMDQiCiAgICB9LAogICAgewogICAgICAiaWQiOiAiNTc1MDAwNTA1IiwKICAgICAgIm5hbWUiOiAiRWxlY3Rpb24gQ29tbWlzc2lvbmVyIDA1IgogICAgfSwKICAgIHsKICAgICAgImlkIjogIjU3NTAwMDA4NCIsCiAgICAgICJuYW1lIjogIlNjaG9vbCBCb2FyZCBEaXN0cmljdCA1IgogICAgfQogIF0sCiAgInByZWNpbmN0cyI6IFsKICAgIHsKICAgICAgImlkIjogIjY1MjIiLAogICAgICAibmFtZSI6ICJEaXN0cmljdCA1IgogICAgfSwKICAgIHsKICAgICAgImlkIjogIjY1MjQiLAogICAgICAibmFtZSI6ICJDaGVzdGVyIgogICAgfSwKICAgIHsKICAgICAgImlkIjogIjY1MjUiLAogICAgICAibmFtZSI6ICJFYXN0IFdlaXIiCiAgICB9LAogICAgewogICAgICAiaWQiOiAiNjUyNiIsCiAgICAgICJuYW1lIjogIkZyZW5jaCBDYW1wIgogICAgfSwKICAgIHsKICAgICAgImlkIjogIjY1MjciLAogICAgICAibmFtZSI6ICJGZW50cmVzcyIKICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICI2NTI4IiwKICAgICAgIm5hbWUiOiAiSGVicm9uIgogICAgfSwKICAgIHsKICAgICAgImlkIjogIjY1MjkiLAogICAgICAibmFtZSI6ICJLZW5lZ28iCiAgICB9LAogICAgewogICAgICAiaWQiOiAiNjUzMiIsCiAgICAgICJuYW1lIjogIlBhbmhhbmRsZSIKICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICI2NTM0IiwKICAgICAgIm5hbWUiOiAiUmVmb3JtIgogICAgfSwKICAgIHsKICAgICAgImlkIjogIjY1MzYiLAogICAgICAibmFtZSI6ICJTaGVyd29vZCIKICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICI2NTM3IiwKICAgICAgIm5hbWUiOiAiU291dGh3ZXN0IEFja2VybWFuIgogICAgfSwKICAgIHsKICAgICAgImlkIjogIjY1MzgiLAogICAgICAibmFtZSI6ICJCeXd5IgogICAgfSwKICAgIHsKICAgICAgImlkIjogIjY1MzkiLAogICAgICAibmFtZSI6ICJXZXN0IFdlaXIiCiAgICB9CiAgXSwKICAiYmFsbG90U3R5bGVzIjogWwogICAgewogICAgICAiaWQiOiAiNCIsCiAgICAgICJwcmVjaW5jdHMiOiBbIjY1MzgiLCAiNjUyNCIsICI2NTI3Il0sCiAgICAgICJkaXN0cmljdHMiOiBbIjEiLCAiMTAwMDAwMDQ3IiwgIjEwMDAwMDE3NCIsICIxMDAwMDAyNzUiLCAiNTc1MDAwNTAxIl0KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICI1IiwKICAgICAgInByZWNpbmN0cyI6IFsiNjUyMiJdLAogICAgICAiZGlzdHJpY3RzIjogWwogICAgICAgICIxIiwKICAgICAgICAiMTAwMDAwMDQ3IiwKICAgICAgICAiMTAwMDAwMTc0IiwKICAgICAgICAiMTAwMDAwMjc1IiwKICAgICAgICAiNTc1MDAwMDg0IiwKICAgICAgICAiNTc1MDAwNTA1IgogICAgICBdCiAgICB9LAogICAgewogICAgICAiaWQiOiAiMSIsCiAgICAgICJwcmVjaW5jdHMiOiBbIjY1MjUiLCAiNjUzMiIsICI2NTM3Il0sCiAgICAgICJkaXN0cmljdHMiOiBbIjEiLCAiMTAwMDAwMDQ3IiwgIjEwMDAwMDE3NCIsICIxMDAwMDAyNzUiLCAiNTc1MDAwNTA0Il0KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICIyIiwKICAgICAgInByZWNpbmN0cyI6IFsiNjUyNiIsICI2NTI5IiwgIjY1MzkiXSwKICAgICAgImRpc3RyaWN0cyI6IFsiMSIsICIxMDAwMDAwNDciLCAiMTAwMDAwMTc0IiwgIjEwMDAwMDI3NSIsICI1NzUwMDA1MDMiXQogICAgfSwKICAgIHsKICAgICAgImlkIjogIjMiLAogICAgICAicHJlY2luY3RzIjogWyI2NTI4IiwgIjY1MzQiLCAiNjUzNiJdLAogICAgICAiZGlzdHJpY3RzIjogWyIxIiwgIjEwMDAwMDA0NyIsICIxMDAwMDAxNzQiLCAiMTAwMDAwMjc1IiwgIjU3NTAwMDUwMiJdCiAgICB9CiAgXSwKICAic2VhbFVybCI6ICIvc2VhbHMvU2VhbF9vZl9NaXNzaXNzaXBwaV9CVy5zdmciCn0K';

/**
 * MIME type of data/electionWithMsEitherNeither/electionWithMsEitherNeither.json.
 */
export const mimeType = 'application/json';

/**
 * Path to a file containing this file's contents.
 *
 * SHA-256 hash of file data: 1ff8c2350f1c242ae3ca5b29d4c4d3f9c48c94b8a0cf8cb1ad716e14107783a6
 */
export function asFilePath(): string {
  const directoryPath = mkdtempSync(tmpdir() + sep);
  const filePath = join(directoryPath, 'electionWithMsEitherNeither.json');
  writeFileSync(filePath, asBuffer());
  return filePath;
}

/**
 * Convert to a `data:` URL of data/electionWithMsEitherNeither/electionWithMsEitherNeither.json, suitable for embedding in HTML.
 *
 * SHA-256 hash of file data: 1ff8c2350f1c242ae3ca5b29d4c4d3f9c48c94b8a0cf8cb1ad716e14107783a6
 */
export function asDataUrl(): string {
  return `data:${mimeType};base64,${resourceDataBase64}`;
}

/**
 * Raw data of data/electionWithMsEitherNeither/electionWithMsEitherNeither.json.
 *
 * SHA-256 hash of file data: 1ff8c2350f1c242ae3ca5b29d4c4d3f9c48c94b8a0cf8cb1ad716e14107783a6
 */
export function asBuffer(): Buffer {
  return Buffer.from(resourceDataBase64, 'base64');
}

/**
 * Text content of data/electionWithMsEitherNeither/electionWithMsEitherNeither.json.
 *
 * SHA-256 hash of file data: 1ff8c2350f1c242ae3ca5b29d4c4d3f9c48c94b8a0cf8cb1ad716e14107783a6
 */
export function asText(): string {
  return asBuffer().toString('utf-8');
}

/**
 * Full election definition for data/electionWithMsEitherNeither/electionWithMsEitherNeither.json.
 *
 * SHA-256 hash of file data: 1ff8c2350f1c242ae3ca5b29d4c4d3f9c48c94b8a0cf8cb1ad716e14107783a6
 */
export const electionDefinition = safeParseElectionDefinition(
  asText()
).unsafeUnwrap();

/**
 * Election definition for data/electionWithMsEitherNeither/electionWithMsEitherNeither.json.
 *
 * SHA-256 hash of file data: 1ff8c2350f1c242ae3ca5b29d4c4d3f9c48c94b8a0cf8cb1ad716e14107783a6
 */
export const election = electionDefinition.election;

/**
 * Ballot package for data/electionWithMsEitherNeither/electionWithMsEitherNeither.json.
 *
 * SHA-256 hash of file data: 1ff8c2350f1c242ae3ca5b29d4c4d3f9c48c94b8a0cf8cb1ad716e14107783a6
 */
export function toBallotPackage(systemSettings = DEFAULT_SYSTEM_SETTINGS): BallotPackage {
  return {
    electionDefinition,
    systemSettings,
  };
}