/* Generated by res-to-ts. DO NOT EDIT */
/* eslint-disable */
/* istanbul ignore file */

import { Buffer } from 'buffer';
import { mkdtempSync, writeFileSync } from 'fs';
import { tmpdir } from 'os';
import { join, sep } from 'path';
import { safeParseElectionDefinition } from '@votingworks/types';

/**
 * Data of data/electionWithMsEitherNeither/electionWithMsEitherNeither.json encoded as base64.
 *
 * SHA-256 hash of file data: 432da0f9fca112ebb158e32f531356c800d3bf914c09c187964334917483d059
 */
const resourceDataBase64 = '';

/**
 * MIME type of data/electionWithMsEitherNeither/electionWithMsEitherNeither.json.
 */
export const mimeType = 'application/json';

/**
 * Path to a file containing this file's contents.
 *
 * SHA-256 hash of file data: 432da0f9fca112ebb158e32f531356c800d3bf914c09c187964334917483d059
 */
export function asFilePath(): string {
  const directoryPath = mkdtempSync(tmpdir() + sep);
  const filePath = join(directoryPath, 'electionWithMsEitherNeither.json');
  writeFileSync(filePath, asBuffer());
  return filePath;
}

/**
 * Convert to a `data:` URL of data/electionWithMsEitherNeither/electionWithMsEitherNeither.json, suitable for embedding in HTML.
 *
 * SHA-256 hash of file data: 432da0f9fca112ebb158e32f531356c800d3bf914c09c187964334917483d059
 */
export function asDataUrl(): string {
  return `data:${mimeType};base64,${resourceDataBase64}`;
}

/**
 * Raw data of data/electionWithMsEitherNeither/electionWithMsEitherNeither.json.
 *
 * SHA-256 hash of file data: 432da0f9fca112ebb158e32f531356c800d3bf914c09c187964334917483d059
 */
export function asBuffer(): Buffer {
  return Buffer.from(resourceDataBase64, 'base64');
}

/**
 * Text content of data/electionWithMsEitherNeither/electionWithMsEitherNeither.json.
 *
 * SHA-256 hash of file data: 432da0f9fca112ebb158e32f531356c800d3bf914c09c187964334917483d059
 */
export function asText(): string {
  return asBuffer().toString('utf-8');
}

/**
 * Full election definition for data/electionWithMsEitherNeither/electionWithMsEitherNeither.json.
 *
 * SHA-256 hash of file data: 432da0f9fca112ebb158e32f531356c800d3bf914c09c187964334917483d059
 */
export const electionDefinition = safeParseElectionDefinition(
  asText()
).unsafeUnwrap();

/**
 * Election definition for data/electionWithMsEitherNeither/electionWithMsEitherNeither.json.
 *
 * SHA-256 hash of file data: 432da0f9fca112ebb158e32f531356c800d3bf914c09c187964334917483d059
 */
export const election = electionDefinition.election;