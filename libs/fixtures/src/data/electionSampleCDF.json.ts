/* Generated by res-to-ts. DO NOT EDIT */
/* eslint-disable */
/* istanbul ignore file */

import { Buffer } from 'buffer';
import { mkdtempSync, writeFileSync } from 'fs';
import { tmpdir } from 'os';
import { join, sep } from 'path';
import { safeParseElectionDefinition } from '@votingworks/types';

/**
 * Data of data/electionSampleCDF.json encoded as base64.
 *
 * SHA-256 hash of file data: f3eef11f146a529a8e1b2a536323f5119feb95bec937f38fc54e63e5cf5789ea
 */
const resourceDataBase64 = 'ewogICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkJhbGxvdERlZmluaXRpb24iLAogICJFbGVjdGlvbiI6IFsKICAgIHsKICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uRWxlY3Rpb24iLAogICAgICAiRWxlY3Rpb25TY29wZUlkIjogInN0YXRlLW9mLWhhbWlsdG9uIiwKICAgICAgIlN0YXJ0RGF0ZSI6ICIyMDIwLTExLTAzIiwKICAgICAgIkVuZERhdGUiOiAiMjAyMC0xMS0wMyIsCiAgICAgICJUeXBlIjogInByaW1hcnkiLAogICAgICAiTmFtZSI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIkdlbmVyYWwgRWxlY3Rpb24iCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAiQ2FuZGlkYXRlIjogWwogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogImJhcmNoaS1oYWxsYXJlbiIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkpvc2VwaCBCYXJjaGkgYW5kIEpvc2VwaCBIYWxsYXJlbiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogImNyYW1lci12dW9jb2xvIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiQWRhbSBDcmFtZXIgYW5kIEdyZWcgVnVvY29sbyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogImNvdXJ0LWJsdW1oYXJkdCIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkRhbmllbCBDb3VydCBhbmQgQW15IEJsdW1oYXJkdCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogImJvb25lLWxpYW4iLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJBbHZpbiBCb29uZSBhbmQgSmFtZXMgTGlhbiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogImhpbGRlYnJhbmQtZ2Fycml0dHkiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJBc2hsZXkgSGlsZGVicmFuZC1NY0RvdWdhbGwgYW5kIEphbWVzIEdhcnJpdHR5IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAicGF0dGVyc29uLWxhcml2aWVyZSIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIk1hcnRpbiBQYXR0ZXJzb24gYW5kIENsYXkgTGFyaXZpZXJlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAid2VpZm9yZCIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkRlbm5pcyBXZWlmb3JkIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAiZ2FycmlzcyIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkxsb3lkIEdhcnJpc3MiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJ3ZW50d29ydGhmYXJ0aGluZ3RvbiIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIlN5bHZpYSBXZW50d29ydGgtRmFydGhpbmd0b24iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJoZXdldHNvbiIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkhlYXRoZXIgSGV3ZXRzb24iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJtYXJ0aW5leiIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIlZpY3RvciBNYXJ0aW5leiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogImJyb3duIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiRGF2aWQgQnJvd24iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJwb3VuZCIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkRhdmlkIFBvdW5kIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAicGx1bmthcmQiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJCcmFkIFBsdW5rYXJkIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAicmVlZGVyIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiQnJ1Y2UgUmVlZGVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAic2Nob3R0IiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiQnJhZCBTY2hvdHQiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJ0YXduZXkiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJHbGVuIFRhd25leSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogImZvcnJlc3QiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJDYXJyb2xsIEZvcnJlc3QiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJmcmFueiIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkNoYXJsZW5lIEZyYW56IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAiaGFycmlzIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiR2VyYWxkIEhhcnJpcyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogImJhcmdtYW5uIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiTGluZGEgQmFyZ21hbm4iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJhYmNvY2siLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJCYXJiYXJhIEFkY29jayIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogInN0ZWVsbG95IiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiQ2FycmllIFN0ZWVsLUxveSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogInNoYXJwIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiRnJlZGVyaWNrIFNoYXJwIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAid2FsbGFjZSIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkFsZXggV2FsbGFjZSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogIndpbGxpYW1zIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiQmFyYmFyYSBXaWxsaWFtcyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogInNoYXJwLWFsdGhlYSIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkFsdGhlYSBTaGFycCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogImFscGVybiIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkRvdWdsYXMgQWxwZXJuIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAid2luZGJlY2siLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJBbm4gV2luZGJlY2siCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJncmVoZXIiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJNaWtlIEdyZWhlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogImFsZXhhbmRlciIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIlBhdHJpY2lhIEFsZXhhbmRlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogIm1pdGNoZWxsIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiS2VubmV0aCBNaXRjaGVsbCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogImxlZSIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIlN0YW4gTGVlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAiYXNoIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiSGVucnkgQXNoIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAibm9yYmVyZyIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkNocmlzIE5vcmJlcmciCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJwYXJrcyIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkFudGhvbnkgUGFya3MiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJnYXJjaWEiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJMdWlzIEpvcmdlcyBHYXJjaWEiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJxdWFsZXkiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJDaGFybGVzIFF1YWxleSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogImhvdmlzIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiR2VvcmdlIEhvdmlzIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAiemlya2xlIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiQnVydCBaaXJrbGUiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJkYXZpcyIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkJyZW5kYSBEYXZpcyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogImZyZWVtYW4iLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJFZHdhcmQgRnJlZW1hbiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogInN3YW4iLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJQYXVsIFN3YW4iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJzaGFtc2kiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJMYWlsYSBTaGFtc2kiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJ0YWxhcmljbyIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIk1hcnR5IFRhbGFyaWNvIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAic2hpcGxldHQiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJFZHdhcmQgU2hpcGxldHQiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJzb2xpcyIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkFuZHJlYSBTb2xpcyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogImtlbGxlciIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkFtb3MgS2VsbGVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAiYXJnZW50IiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiQ2FtaWxsZSBBcmdlbnQiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJ3aXRoZXJzcG9vbnNtaXRoc29uIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiQ2hsb2UgV2l0aGVyc3Bvb24tU21pdGhzb24iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJiYWluYnJpZGdlIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiQ2xheXRvbiBCYWluYnJpZGdlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAiaGVubmVzc2V5IiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiQ2hhcmxlbmUgSGVubmVzc2V5IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAic2F2b3kiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJFcmljIFNhdm95IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAidGF3YSIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIlN1c2FuIFRhd2EiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJ0YXdhLW1hcnkiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJNYXJ5IFRhd2EiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJyYW5nZWwiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJEYW1pYW4gUmFuZ2VsIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAiYWx0bWFuIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiVmFsYXJpZSBBbHRtYW4iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJtb29yZSIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkhlbGVuIE1vb3JlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAic2NocmVpbmVyIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiTWFydGluIFNjaHJlaW5lciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogInJhbWFjaGFuZHJhbmkiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJSaGFka2EgUmFtYWNoYW5kcmFuaSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogImFsaWNlIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiQWxpY2UgSm9uZXMiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJib2IiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJCb2IgU21pdGgiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJ3aGl0ZSIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIk9ydmlsbGUgV2hpdGUiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJzZWxkb24iLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJHcmVnb3J5IFNlbGRvbiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogImVhZ2xlIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiSGFydmV5IEVhZ2xlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAicnVwcCIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIlJhbmRhbGwgUnVwcCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogInNocnkiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJDYXJyb2xsIFNocnkiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJiYXJrZXIiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJCZXZlcmx5IEJhcmtlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogInNtaXRoIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiSHVnbyBTbWl0aCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIF0sCiAgICAgICJDb250ZXN0IjogWwogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZUNvbnRlc3QiLAogICAgICAgICAgIkBpZCI6ICJwcmVzaWRlbnQiLAogICAgICAgICAgIkVsZWN0aW9uRGlzdHJpY3RJZCI6ICJkaXN0cmljdC0xIiwKICAgICAgICAgICJOYW1lIjogIlByZXNpZGVudCBhbmQgVmljZS1QcmVzaWRlbnQiLAogICAgICAgICAgIkJhbGxvdFRpdGxlIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiUHJlc2lkZW50IGFuZCBWaWNlLVByZXNpZGVudCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAiVm90ZXNBbGxvd2VkIjogMSwKICAgICAgICAgICJDb250ZXN0T3B0aW9uIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogInByZXNpZGVudC1vcHRpb24tYmFyY2hpLWhhbGxhcmVuIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJiYXJjaGktaGFsbGFyZW4iXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMCJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAicHJlc2lkZW50LW9wdGlvbi1jcmFtZXItdnVvY29sbyIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsiY3JhbWVyLXZ1b2NvbG8iXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMSJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAicHJlc2lkZW50LW9wdGlvbi1jb3VydC1ibHVtaGFyZHQiLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbImNvdXJ0LWJsdW1oYXJkdCJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyIyIl0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJwcmVzaWRlbnQtb3B0aW9uLWJvb25lLWxpYW4iLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbImJvb25lLWxpYW4iXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMyJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAicHJlc2lkZW50LW9wdGlvbi1oaWxkZWJyYW5kLWdhcnJpdHR5IiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJoaWxkZWJyYW5kLWdhcnJpdHR5Il0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjQiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogInByZXNpZGVudC1vcHRpb24tcGF0dGVyc29uLWxhcml2aWVyZSIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsicGF0dGVyc29uLWxhcml2aWVyZSJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyI1Il0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlQ29udGVzdCIsCiAgICAgICAgICAiQGlkIjogInNlbmF0b3IiLAogICAgICAgICAgIkVsZWN0aW9uRGlzdHJpY3RJZCI6ICJkaXN0cmljdC0yIiwKICAgICAgICAgICJOYW1lIjogIlNlbmF0b3IiLAogICAgICAgICAgIkJhbGxvdFRpdGxlIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiU2VuYXRvciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAiVm90ZXNBbGxvd2VkIjogMSwKICAgICAgICAgICJDb250ZXN0T3B0aW9uIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogInNlbmF0b3Itb3B0aW9uLXdlaWZvcmQiLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbIndlaWZvcmQiXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMCJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAic2VuYXRvci1vcHRpb24tZ2FycmlzcyIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsiZ2FycmlzcyJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyIxIl0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJzZW5hdG9yLW9wdGlvbi13ZW50d29ydGhmYXJ0aGluZ3RvbiIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsid2VudHdvcnRoZmFydGhpbmd0b24iXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMiJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAic2VuYXRvci1vcHRpb24taGV3ZXRzb24iLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbImhld2V0c29uIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjMiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogInNlbmF0b3Itb3B0aW9uLW1hcnRpbmV6IiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJtYXJ0aW5leiJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyI0Il0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJzZW5hdG9yLW9wdGlvbi1icm93biIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsiYnJvd24iXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiNiJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAic2VuYXRvci1vcHRpb24tcG91bmQiLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbInBvdW5kIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjYiXQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVDb250ZXN0IiwKICAgICAgICAgICJAaWQiOiAicmVwcmVzZW50YXRpdmUtZGlzdHJpY3QtNiIsCiAgICAgICAgICAiRWxlY3Rpb25EaXN0cmljdElkIjogImRpc3RyaWN0LTEiLAogICAgICAgICAgIk5hbWUiOiAiUmVwcmVzZW50YXRpdmUsIERpc3RyaWN0IDYiLAogICAgICAgICAgIkJhbGxvdFRpdGxlIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiUmVwcmVzZW50YXRpdmUsIERpc3RyaWN0IDYiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgIlZvdGVzQWxsb3dlZCI6IDEsCiAgICAgICAgICAiQ29udGVzdE9wdGlvbiI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJyZXByZXNlbnRhdGl2ZS1kaXN0cmljdC02LW9wdGlvbi1wbHVua2FyZCIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsicGx1bmthcmQiXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMCJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAicmVwcmVzZW50YXRpdmUtZGlzdHJpY3QtNi1vcHRpb24tcmVlZGVyIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJyZWVkZXIiXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMSJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAicmVwcmVzZW50YXRpdmUtZGlzdHJpY3QtNi1vcHRpb24tc2Nob3R0IiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJzY2hvdHQiXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMiJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAicmVwcmVzZW50YXRpdmUtZGlzdHJpY3QtNi1vcHRpb24tdGF3bmV5IiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJ0YXduZXkiXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMyJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAicmVwcmVzZW50YXRpdmUtZGlzdHJpY3QtNi1vcHRpb24tZm9ycmVzdCIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsiZm9ycmVzdCJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyI0Il0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlQ29udGVzdCIsCiAgICAgICAgICAiQGlkIjogImdvdmVybm9yIiwKICAgICAgICAgICJFbGVjdGlvbkRpc3RyaWN0SWQiOiAiZGlzdHJpY3QtMiIsCiAgICAgICAgICAiTmFtZSI6ICJHb3Zlcm5vciIsCiAgICAgICAgICAiQmFsbG90VGl0bGUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJHb3Zlcm5vciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAiVm90ZXNBbGxvd2VkIjogMSwKICAgICAgICAgICJDb250ZXN0T3B0aW9uIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImdvdmVybm9yLW9wdGlvbi1mcmFueiIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsiZnJhbnoiXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMCJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAiZ292ZXJub3Itb3B0aW9uLWhhcnJpcyIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsiaGFycmlzIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjEiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImdvdmVybm9yLW9wdGlvbi1iYXJnbWFubiIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsiYmFyZ21hbm4iXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMiJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAiZ292ZXJub3Itb3B0aW9uLWFiY29jayIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsiYWJjb2NrIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjMiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImdvdmVybm9yLW9wdGlvbi1zdGVlbGxveSIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsic3RlZWxsb3kiXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiNCJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAiZ292ZXJub3Itb3B0aW9uLXNoYXJwIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJzaGFycCJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyI1Il0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJnb3Zlcm5vci1vcHRpb24td2FsbGFjZSIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsid2FsbGFjZSJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyI2Il0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJnb3Zlcm5vci1vcHRpb24td2lsbGlhbXMiLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbIndpbGxpYW1zIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjYiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImdvdmVybm9yLW9wdGlvbi1zaGFycC1hbHRoZWEiLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbInNoYXJwLWFsdGhlYSJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyI2Il0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJnb3Zlcm5vci1vcHRpb24tYWxwZXJuIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJhbHBlcm4iXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiNiJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAiZ292ZXJub3Itb3B0aW9uLXdpbmRiZWNrIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJ3aW5kYmVjayJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyI2Il0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJnb3Zlcm5vci1vcHRpb24tZ3JlaGVyIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJncmVoZXIiXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiNiJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAiZ292ZXJub3Itb3B0aW9uLWFsZXhhbmRlciIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsiYWxleGFuZGVyIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjYiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImdvdmVybm9yLW9wdGlvbi1taXRjaGVsbCIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsibWl0Y2hlbGwiXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiNiJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAiZ292ZXJub3Itb3B0aW9uLWxlZSIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsibGVlIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjYiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImdvdmVybm9yLW9wdGlvbi1hc2giLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbImFzaCJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyI2Il0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlQ29udGVzdCIsCiAgICAgICAgICAiQGlkIjogImxpZXV0ZW5hbnQtZ292ZXJub3IiLAogICAgICAgICAgIkVsZWN0aW9uRGlzdHJpY3RJZCI6ICJkaXN0cmljdC0xIiwKICAgICAgICAgICJOYW1lIjogIkxpZXV0ZW5hbnQgR292ZXJub3IiLAogICAgICAgICAgIkJhbGxvdFRpdGxlIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiTGlldXRlbmFudCBHb3Zlcm5vciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAiVm90ZXNBbGxvd2VkIjogMSwKICAgICAgICAgICJDb250ZXN0T3B0aW9uIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImxpZXV0ZW5hbnQtZ292ZXJub3Itb3B0aW9uLW5vcmJlcmciLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbIm5vcmJlcmciXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMCJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAibGlldXRlbmFudC1nb3Zlcm5vci1vcHRpb24tcGFya3MiLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbInBhcmtzIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjEiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImxpZXV0ZW5hbnQtZ292ZXJub3Itb3B0aW9uLWdhcmNpYSIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsiZ2FyY2lhIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjIiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImxpZXV0ZW5hbnQtZ292ZXJub3Itb3B0aW9uLXF1YWxleSIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsicXVhbGV5Il0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjMiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImxpZXV0ZW5hbnQtZ292ZXJub3Itb3B0aW9uLWhvdmlzIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJob3ZpcyJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyI0Il0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJsaWV1dGVuYW50LWdvdmVybm9yLW9wdGlvbi16aXJrbGUiLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbInppcmtsZSJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyI1Il0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJsaWV1dGVuYW50LWdvdmVybm9yLW9wdGlvbi1kYXZpcyIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsiZGF2aXMiXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiNiJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAibGlldXRlbmFudC1nb3Zlcm5vci1vcHRpb24tZnJlZW1hbiIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsiZnJlZW1hbiJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyI2Il0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJsaWV1dGVuYW50LWdvdmVybm9yLW9wdGlvbi1zd2FuIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJzd2FuIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjYiXQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVDb250ZXN0IiwKICAgICAgICAgICJAaWQiOiAic2VjcmV0YXJ5LW9mLXN0YXRlIiwKICAgICAgICAgICJFbGVjdGlvbkRpc3RyaWN0SWQiOiAiZGlzdHJpY3QtMiIsCiAgICAgICAgICAiTmFtZSI6ICJTZWNyZXRhcnkgb2YgU3RhdGUiLAogICAgICAgICAgIkJhbGxvdFRpdGxlIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiU2VjcmV0YXJ5IG9mIFN0YXRlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgICJWb3Rlc0FsbG93ZWQiOiAxLAogICAgICAgICAgIkNvbnRlc3RPcHRpb24iOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAic2VjcmV0YXJ5LW9mLXN0YXRlLW9wdGlvbi1zaGFtc2kiLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbInNoYW1zaSJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyIwIl0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJzZWNyZXRhcnktb2Ytc3RhdGUtb3B0aW9uLXRhbGFyaWNvIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJ0YWxhcmljbyJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyIxIl0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlQ29udGVzdCIsCiAgICAgICAgICAiQGlkIjogInN0YXRlLXNlbmF0b3ItZGlzdHJpY3QtMzEiLAogICAgICAgICAgIkVsZWN0aW9uRGlzdHJpY3RJZCI6ICJkaXN0cmljdC0xIiwKICAgICAgICAgICJOYW1lIjogIlNlbmF0b3IsIERpc3RyaWN0IDMxIiwKICAgICAgICAgICJCYWxsb3RUaXRsZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIlNlbmF0b3IsIERpc3RyaWN0IDMxIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgICJWb3Rlc0FsbG93ZWQiOiAxLAogICAgICAgICAgIkNvbnRlc3RPcHRpb24iOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAic3RhdGUtc2VuYXRvci1kaXN0cmljdC0zMS1vcHRpb24tc2hpcGxldHQiLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbInNoaXBsZXR0Il0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjMiXQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVDb250ZXN0IiwKICAgICAgICAgICJAaWQiOiAic3RhdGUtYXNzZW1ibHktZGlzdHJpY3QtNTQiLAogICAgICAgICAgIkVsZWN0aW9uRGlzdHJpY3RJZCI6ICJkaXN0cmljdC0xIiwKICAgICAgICAgICJOYW1lIjogIkFzc2VtYmx5IE1lbWJlciwgRGlzdHJpY3QgNTQiLAogICAgICAgICAgIkJhbGxvdFRpdGxlIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiQXNzZW1ibHkgTWVtYmVyLCBEaXN0cmljdCA1NCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAiVm90ZXNBbGxvd2VkIjogMSwKICAgICAgICAgICJDb250ZXN0T3B0aW9uIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogInN0YXRlLWFzc2VtYmx5LWRpc3RyaWN0LTU0LW9wdGlvbi1zb2xpcyIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsic29saXMiXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMCJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAic3RhdGUtYXNzZW1ibHktZGlzdHJpY3QtNTQtb3B0aW9uLWtlbGxlciIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsia2VsbGVyIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjEiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogInN0YXRlLWFzc2VtYmx5LWRpc3RyaWN0LTU0LW9wdGlvbi1yYW5nZWwiLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbInJhbmdlbCJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyIyIl0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlQ29udGVzdCIsCiAgICAgICAgICAiQGlkIjogImNvdW50eS1jb21taXNzaW9uZXJzIiwKICAgICAgICAgICJFbGVjdGlvbkRpc3RyaWN0SWQiOiAiZGlzdHJpY3QtMiIsCiAgICAgICAgICAiTmFtZSI6ICJDb3VudHkgQ29tbWlzc2lvbmVycyIsCiAgICAgICAgICAiQmFsbG90VGl0bGUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJDb3VudHkgQ29tbWlzc2lvbmVycyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAiVm90ZXNBbGxvd2VkIjogNCwKICAgICAgICAgICJDb250ZXN0T3B0aW9uIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImNvdW50eS1jb21taXNzaW9uZXJzLW9wdGlvbi1hcmdlbnQiLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbImFyZ2VudCJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyIwIl0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJjb3VudHktY29tbWlzc2lvbmVycy1vcHRpb24td2l0aGVyc3Bvb25zbWl0aHNvbiIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsid2l0aGVyc3Bvb25zbWl0aHNvbiJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyIwIl0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJjb3VudHktY29tbWlzc2lvbmVycy1vcHRpb24tYmFpbmJyaWRnZSIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsiYmFpbmJyaWRnZSJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyIwIl0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJjb3VudHktY29tbWlzc2lvbmVycy1vcHRpb24taGVubmVzc2V5IiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJoZW5uZXNzZXkiXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMSJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAiY291bnR5LWNvbW1pc3Npb25lcnMtb3B0aW9uLXNhdm95IiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJzYXZveSJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyIxIl0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJjb3VudHktY29tbWlzc2lvbmVycy1vcHRpb24tdGF3YSIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsidGF3YSJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyIxIl0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJjb3VudHktY29tbWlzc2lvbmVycy1vcHRpb24tdGF3YS1tYXJ5IiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJ0YXdhLW1hcnkiXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMSJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAiY291bnR5LWNvbW1pc3Npb25lcnMtb3B0aW9uLXJhbmdlbCIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsicmFuZ2VsIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjIiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImNvdW50eS1jb21taXNzaW9uZXJzLW9wdGlvbi1hbHRtYW4iLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbImFsdG1hbiJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyIzIl0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJjb3VudHktY29tbWlzc2lvbmVycy1vcHRpb24tbW9vcmUiLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbIm1vb3JlIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjMiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImNvdW50eS1jb21taXNzaW9uZXJzLW9wdGlvbi1zY2hyZWluZXIiLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbInNjaHJlaW5lciJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyI2Il0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJjb3VudHktY29tbWlzc2lvbmVycy1vcHRpb24td3JpdGUtaW4tMSIsCiAgICAgICAgICAgICAgIklzV3JpdGVJbiI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJjb3VudHktY29tbWlzc2lvbmVycy1vcHRpb24td3JpdGUtaW4tMiIsCiAgICAgICAgICAgICAgIklzV3JpdGVJbiI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJjb3VudHktY29tbWlzc2lvbmVycy1vcHRpb24td3JpdGUtaW4tMyIsCiAgICAgICAgICAgICAgIklzV3JpdGVJbiI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJjb3VudHktY29tbWlzc2lvbmVycy1vcHRpb24td3JpdGUtaW4tNCIsCiAgICAgICAgICAgICAgIklzV3JpdGVJbiI6IHRydWUKICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlQ29udGVzdCIsCiAgICAgICAgICAiQGlkIjogImNvdW50eS1yZWdpc3RyYXItb2Ytd2lsbHMiLAogICAgICAgICAgIkVsZWN0aW9uRGlzdHJpY3RJZCI6ICJkaXN0cmljdC0xIiwKICAgICAgICAgICJOYW1lIjogIlJlZ2lzdHJhciBvZiBXaWxscyIsCiAgICAgICAgICAiQmFsbG90VGl0bGUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJSZWdpc3RyYXIgb2YgV2lsbHMiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgIlZvdGVzQWxsb3dlZCI6IDEsCiAgICAgICAgICAiQ29udGVzdE9wdGlvbiI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJjb3VudHktcmVnaXN0cmFyLW9mLXdpbGxzLW9wdGlvbi1yYW1hY2hhbmRyYW5pIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJyYW1hY2hhbmRyYW5pIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjYiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImNvdW50eS1yZWdpc3RyYXItb2Ytd2lsbHMtb3B0aW9uLXdyaXRlLWluLTEiLAogICAgICAgICAgICAgICJJc1dyaXRlSW4iOiB0cnVlCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZUNvbnRlc3QiLAogICAgICAgICAgIkBpZCI6ICJwcmltYXJ5LWNvbnN0aXR1dGlvbi1oZWFkLW9mLXBhcnR5IiwKICAgICAgICAgICJFbGVjdGlvbkRpc3RyaWN0SWQiOiAiZGlzdHJpY3QtNyIsCiAgICAgICAgICAiTmFtZSI6ICJIZWFkIG9mIENvbnN0aXR1dGlvbiBQYXJ0eSIsCiAgICAgICAgICAiQmFsbG90VGl0bGUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJIZWFkIG9mIENvbnN0aXR1dGlvbiBQYXJ0eSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAiVm90ZXNBbGxvd2VkIjogMSwKICAgICAgICAgICJDb250ZXN0T3B0aW9uIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogInByaW1hcnktY29uc3RpdHV0aW9uLWhlYWQtb2YtcGFydHktb3B0aW9uLWFsaWNlIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJhbGljZSJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyIzIl0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJwcmltYXJ5LWNvbnN0aXR1dGlvbi1oZWFkLW9mLXBhcnR5LW9wdGlvbi1ib2IiLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbImJvYiJdCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiUHJpbWFyeVBhcnR5SWRzIjogWyIzIl0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZUNvbnRlc3QiLAogICAgICAgICAgIkBpZCI6ICJjaXR5LW1heW9yIiwKICAgICAgICAgICJFbGVjdGlvbkRpc3RyaWN0SWQiOiAiZGlzdHJpY3QtMiIsCiAgICAgICAgICAiTmFtZSI6ICJNYXlvciIsCiAgICAgICAgICAiQmFsbG90VGl0bGUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJNYXlvciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAiVm90ZXNBbGxvd2VkIjogMSwKICAgICAgICAgICJDb250ZXN0T3B0aW9uIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImNpdHktbWF5b3Itb3B0aW9uLXdoaXRlIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJ3aGl0ZSJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyIxIl0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJjaXR5LW1heW9yLW9wdGlvbi1zZWxkb24iLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbInNlbGRvbiJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyIyIl0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJjaXR5LW1heW9yLW9wdGlvbi13cml0ZS1pbi0xIiwKICAgICAgICAgICAgICAiSXNXcml0ZUluIjogdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVDb250ZXN0IiwKICAgICAgICAgICJAaWQiOiAiY2l0eS1jb3VuY2lsIiwKICAgICAgICAgICJFbGVjdGlvbkRpc3RyaWN0SWQiOiAiZGlzdHJpY3QtMiIsCiAgICAgICAgICAiTmFtZSI6ICJDaXR5IENvdW5jaWwiLAogICAgICAgICAgIkJhbGxvdFRpdGxlIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiQ2l0eSBDb3VuY2lsIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgICJWb3Rlc0FsbG93ZWQiOiAzLAogICAgICAgICAgIkNvbnRlc3RPcHRpb24iOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAiY2l0eS1jb3VuY2lsLW9wdGlvbi1lYWdsZSIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsiZWFnbGUiXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMCJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAiY2l0eS1jb3VuY2lsLW9wdGlvbi1ydXBwIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJydXBwIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjAiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImNpdHktY291bmNpbC1vcHRpb24tc2hyeSIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsic2hyeSJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyIwIl0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJjaXR5LWNvdW5jaWwtb3B0aW9uLWJhcmtlciIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsiYmFya2VyIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjEiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImNpdHktY291bmNpbC1vcHRpb24tZGF2aXMiLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbImRhdmlzIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjEiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImNpdHktY291bmNpbC1vcHRpb24tc21pdGgiLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbInNtaXRoIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjEiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImNpdHktY291bmNpbC1vcHRpb24td3JpdGUtaW4tMSIsCiAgICAgICAgICAgICAgIklzV3JpdGVJbiI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJjaXR5LWNvdW5jaWwtb3B0aW9uLXdyaXRlLWluLTIiLAogICAgICAgICAgICAgICJJc1dyaXRlSW4iOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAiY2l0eS1jb3VuY2lsLW9wdGlvbi13cml0ZS1pbi0zIiwKICAgICAgICAgICAgICAiSXNXcml0ZUluIjogdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5CYWxsb3RNZWFzdXJlQ29udGVzdCIsCiAgICAgICAgICAiQGlkIjogImp1ZGljaWFsLXJvYmVydC1kZW1lcmd1ZSIsCiAgICAgICAgICAiRWxlY3Rpb25EaXN0cmljdElkIjogImRpc3RyaWN0LTEiLAogICAgICAgICAgIk5hbWUiOiAiUmV0YWluIFJvYmVydCBEZW1lcmd1ZSBhcyBDaGllZiBKdXN0aWNlPyIsCiAgICAgICAgICAiQmFsbG90VGl0bGUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJSZXRhaW4gUm9iZXJ0IERlbWVyZ3VlIGFzIENoaWVmIEp1c3RpY2U/IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgICJGdWxsVGV4dCI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIlNoYWxsIFJvYmVydCBEZW1lcmd1ZSBiZSByZXRhaW5lZCBhcyBDaGllZiBKdXN0aWNlIG9mIHRoZSBIYW1pbHRvbiBDb3VydCBvZiBBcHBlYWxzPyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAiQ29udGVzdE9wdGlvbiI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkJhbGxvdE1lYXN1cmVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAianVkaWNpYWwtcm9iZXJ0LWRlbWVyZ3VlLW9wdGlvbi15ZXMiLAogICAgICAgICAgICAgICJTZWxlY3Rpb24iOiB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJZZXMiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5CYWxsb3RNZWFzdXJlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImp1ZGljaWFsLXJvYmVydC1kZW1lcmd1ZS1vcHRpb24tbm8iLAogICAgICAgICAgICAgICJTZWxlY3Rpb24iOiB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJObyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQmFsbG90TWVhc3VyZUNvbnRlc3QiLAogICAgICAgICAgIkBpZCI6ICJqdWRpY2lhbC1lbG1lci1odWxsIiwKICAgICAgICAgICJFbGVjdGlvbkRpc3RyaWN0SWQiOiAiZGlzdHJpY3QtMiIsCiAgICAgICAgICAiTmFtZSI6ICJSZXRhaW4gRWxtZXIgSHVsbCBhcyBBc3NvY2lhdGUgSnVzdGljZT8iLAogICAgICAgICAgIkJhbGxvdFRpdGxlIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiUmV0YWluIEVsbWVyIEh1bGwgYXMgQXNzb2NpYXRlIEp1c3RpY2U/IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgICJGdWxsVGV4dCI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIlNoYWxsIEVsbWVyIEh1bGwgYmUgcmV0YWluZWQgYXMgQXNzb2NpYXRlIEp1c3RpY2Ugb2YgdGhlIEhhbWlsdG9uIENvdXJ0IG9mIEFwcGVhbHM/IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgICJDb250ZXN0T3B0aW9uIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQmFsbG90TWVhc3VyZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJqdWRpY2lhbC1lbG1lci1odWxsLW9wdGlvbi15ZXMiLAogICAgICAgICAgICAgICJTZWxlY3Rpb24iOiB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJZZXMiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5CYWxsb3RNZWFzdXJlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImp1ZGljaWFsLWVsbWVyLWh1bGwtb3B0aW9uLW5vIiwKICAgICAgICAgICAgICAiU2VsZWN0aW9uIjogewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiTm8iCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkJhbGxvdE1lYXN1cmVDb250ZXN0IiwKICAgICAgICAgICJAaWQiOiAicXVlc3Rpb24tYSIsCiAgICAgICAgICAiRWxlY3Rpb25EaXN0cmljdElkIjogImRpc3RyaWN0LTEiLAogICAgICAgICAgIk5hbWUiOiAiUXVlc3Rpb24gQTogUmVjb3Zlcnkgb2YgUHJvcGVydHkgRGFtYWdlcyIsCiAgICAgICAgICAiQmFsbG90VGl0bGUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJRdWVzdGlvbiBBOiBSZWNvdmVyeSBvZiBQcm9wZXJ0eSBEYW1hZ2VzIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgICJGdWxsVGV4dCI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIlNoYWxsIHRoZXJlIGJlIGFuIGFtZW5kbWVudCB0byB0aGUgU3RhdGUgY29uc3RpdHV0aW9uIGNvbmNlcm5pbmcgcmVjb3Zlcnkgb2YgZGFtYWdlcyByZWxhdGluZyB0byBjb25zdHJ1Y3Rpb24gb2YgcmVhbCBwcm9wZXJ0eSBpbXByb3ZlbWVudHMsIGFuZCwgaW4gY29ubmVjdGlvbiB0aGVyZXdpdGgsIHByb2hpYml0aW5nIGxhd3MgdGhhdCBsaW1pdCBvciBpbXBhaXIgYSBwcm9wZXJ0eSBvd25lcidzIHJpZ2h0IHRvIHJlY292ZXIgZGFtYWdlcyBjYXVzZWQgYnkgYSBmYWlsdXJlIHRvIGNvbnN0cnVjdCBhbiBpbXByb3ZlbWVudCBpbiBhIGdvb2QgYW5kIHdvcmttYW5saWtlIG1hbm5lcj8iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgIkNvbnRlc3RPcHRpb24iOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5CYWxsb3RNZWFzdXJlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogInF1ZXN0aW9uLWEtb3B0aW9uLXllcyIsCiAgICAgICAgICAgICAgIlNlbGVjdGlvbiI6IHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgICAgICJDb250ZW50IjogIlllcyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkJhbGxvdE1lYXN1cmVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAicXVlc3Rpb24tYS1vcHRpb24tbm8iLAogICAgICAgICAgICAgICJTZWxlY3Rpb24iOiB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJObyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQmFsbG90TWVhc3VyZUNvbnRlc3QiLAogICAgICAgICAgIkBpZCI6ICJxdWVzdGlvbi1iIiwKICAgICAgICAgICJFbGVjdGlvbkRpc3RyaWN0SWQiOiAiZGlzdHJpY3QtMSIsCiAgICAgICAgICAiTmFtZSI6ICJRdWVzdGlvbiBCOiBTZXBhcmF0aW9uIG9mIFBvd2VycyIsCiAgICAgICAgICAiQmFsbG90VGl0bGUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJRdWVzdGlvbiBCOiBTZXBhcmF0aW9uIG9mIFBvd2VycyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAiRnVsbFRleHQiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJTaGFsbCB0aGVyZSBiZSBhbWVuZG1lbnRzIHRvIHRoZSBTdGF0ZSBjb25zdGl0dXRpb24gaW50ZW5kZWQgdG8gaGF2ZSB0aGUgY29sbGVjdGl2ZSBlZmZlY3Qgb2YgZW5zdXJpbmcgdGhlIHNlcGFyYXRpb24gb2YgZ292ZXJubWVudGFsIHBvd2VyIGFtb25nIHRoZSB0aHJlZSBicmFuY2hlcyBvZiBzdGF0ZSBnb3Zlcm5tZW50OiB0aGUgbGVnaXNsYXRpdmUgYnJhbmNoLCB0aGUgZXhlY3V0aXZlIGJyYW5jaCBhbmQgdGhlIGp1ZGljaWFsIGJyYW5jaD8gXG5cbmEuIEFydGljbGUgSUlJLCBTZWN0aW9uIDYgb2YgdGhlIENvbnN0aXR1dGlvbiBzaGFsbCBiZSBhbWVuZGVkIHRvIHJlYWQgYXMgZm9sbG93czogXG5cblNlY3Rpb24gNi4gSG9sZGluZyBvZiBvZmZpY2VzIHVuZGVyIG90aGVyIGdvdmVybm1lbnRzIFxuXG5TZW5hdG9ycyBhbmQgcmVwcmVzZW50YXRpdmVzIG5vdCB0byBob2xkIG90aGVyIGFwcG9pbnRlZCBvZmZpY2VzIHVuZGVyIHN0YXRlIGdvdmVybm1lbnQuIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgICJDb250ZXN0T3B0aW9uIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQmFsbG90TWVhc3VyZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJxdWVzdGlvbi1iLW9wdGlvbi15ZXMiLAogICAgICAgICAgICAgICJTZWxlY3Rpb24iOiB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJZZXMiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5CYWxsb3RNZWFzdXJlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogInF1ZXN0aW9uLWItb3B0aW9uLW5vIiwKICAgICAgICAgICAgICAiU2VsZWN0aW9uIjogewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiTm8iCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkJhbGxvdE1lYXN1cmVDb250ZXN0IiwKICAgICAgICAgICJAaWQiOiAicXVlc3Rpb24tYyIsCiAgICAgICAgICAiRWxlY3Rpb25EaXN0cmljdElkIjogImRpc3RyaWN0LTIiLAogICAgICAgICAgIk5hbWUiOiAiUXVlc3Rpb24gQzogTGltaXRzIHRvIERhbWFnZXMgZm9yIE5vbi1FY29ub21pYyBMb3NzIiwKICAgICAgICAgICJCYWxsb3RUaXRsZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIlF1ZXN0aW9uIEM6IExpbWl0cyB0byBEYW1hZ2VzIGZvciBOb24tRWNvbm9taWMgTG9zcyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAiRnVsbFRleHQiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJTaGFsbCB0aGVyZSBiZSBhbiBhbWVuZG1lbnQgdG8gdGhlIFN0YXRlIGNvbnN0aXR1dGlvbiBhbGxvd2luZyB0aGUgU3RhdGUgbGVnaXNsYXR1cmUgdG8gZW5hY3QgbGF3cyBsaW1pdGluZyB0aGUgYW1vdW50IG9mIGRhbWFnZXMgZm9yIG5vbi1lY29ub21pYyBsb3NzIHRoYXQgY291bGQgYmUgYXdhcmRlZCBmb3IgaW5qdXJ5IG9yIGRlYXRoIGNhdXNlZCBieSBhIGhlYWx0aCBjYXJlIHByb3ZpZGVyPyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAiQ29udGVzdE9wdGlvbiI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkJhbGxvdE1lYXN1cmVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAicXVlc3Rpb24tYy1vcHRpb24teWVzIiwKICAgICAgICAgICAgICAiU2VsZWN0aW9uIjogewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiWWVzIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQmFsbG90TWVhc3VyZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJxdWVzdGlvbi1jLW9wdGlvbi1ubyIsCiAgICAgICAgICAgICAgIlNlbGVjdGlvbiI6IHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgICAgICJDb250ZW50IjogIk5vIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5CYWxsb3RNZWFzdXJlQ29udGVzdCIsCiAgICAgICAgICAiQGlkIjogInByb3Bvc2l0aW9uLTEiLAogICAgICAgICAgIkVsZWN0aW9uRGlzdHJpY3RJZCI6ICJkaXN0cmljdC0xIiwKICAgICAgICAgICJOYW1lIjogIlByb3Bvc2l0aW9uIDE6IEdhbWJsaW5nIGluIEZyYW5rbGluIGFuZCBGcm9td2l0IENvdW50aWVzIiwKICAgICAgICAgICJCYWxsb3RUaXRsZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIlByb3Bvc2l0aW9uIDE6IEdhbWJsaW5nIGluIEZyYW5rbGluIGFuZCBGcm9td2l0IENvdW50aWVzIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgICJGdWxsVGV4dCI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIlNoYWxsIHRoZXJlIGJlIGFuIGFtZW5kbWVudCB0byB0aGUgU3RhdGUgY29uc3RpdHV0aW9uIGF1dGhvcml6aW5nIEZyYW5rbGluIGFuZCBGcm9td2l0IENvdW50aWVzIHRvIGhvbGQgcmVmZXJlbmRhIG9uIHdoZXRoZXIgdG8gYXV0aG9yaXplIHNsb3QgbWFjaGluZXMgaW4gZXhpc3RpbmcsIGxpY2Vuc2VkIHBhcmktbXV0dWVsIGZhY2lsaXRpZXMgKHRob3JvdWdoYnJlZCBhbmQgaGFybmVzcyByYWNpbmcsIGdyZXlob3VuZCByYWNpbmcsIGFuZCBqYWkgYWxhaSkgdGhhdCBoYXZlIGNvbmR1Y3RlZCBsaXZlIHJhY2luZyBvciBnYW1lcyBpbiB0aGF0IGNvdW50eSBkdXJpbmcgZWFjaCBvZiB0aGUgbGFzdCB0d28gY2FsZW5kYXIgeWVhcnMgYmVmb3JlIGVmZmVjdGl2ZSBkYXRlIG9mIHRoaXMgYW1lbmRtZW50PyBSZXF1aXJlcyBpbXBsZW1lbnRpbmcgbGVnaXNsYXRpb24uIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgICJDb250ZXN0T3B0aW9uIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQmFsbG90TWVhc3VyZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJwcm9wb3NpdGlvbi0xLW9wdGlvbi15ZXMiLAogICAgICAgICAgICAgICJTZWxlY3Rpb24iOiB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJZZXMiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5CYWxsb3RNZWFzdXJlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogInByb3Bvc2l0aW9uLTEtb3B0aW9uLW5vIiwKICAgICAgICAgICAgICAiU2VsZWN0aW9uIjogewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiTm8iCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkJhbGxvdE1lYXN1cmVDb250ZXN0IiwKICAgICAgICAgICJAaWQiOiAibWVhc3VyZS0xMDEiLAogICAgICAgICAgIkVsZWN0aW9uRGlzdHJpY3RJZCI6ICJkaXN0cmljdC0yIiwKICAgICAgICAgICJOYW1lIjogIk1lYXN1cmUgMTAxOiBDb2xsZWdlIERpc3RyaWN0IiwKICAgICAgICAgICJCYWxsb3RUaXRsZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIk1lYXN1cmUgMTAxOiBDb2xsZWdlIERpc3RyaWN0IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgICJGdWxsVGV4dCI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIlRvIHVwZ3JhZGUgZWR1Y2F0aW9uYWwgZmFjaWxpdGllcyBhdCBEaWFibG8gVmFsbGV5LCBhbmQgRnJhbmtsaW4sIENvbGxlZ2VzLCBhbmQgdGhlIFNhbiBCcmVudHdvb2QgY2VudGVyLCBhbmQgaGVscCBwcmVwYXJlIHN0dWRlbnRzIGZvciBqb2JzIGFuZCBjb2xsZWdlIHRyYW5zZmVyIGJ5IG1vZGVybml6aW5nIGNsYXNzcm9vbXMgYW5kIGxhYnMsIGJ1aWxkaW5nIGZhY2lsaXRpZXMgZm9yIGhlYWx0aCwgbWVkaWNhbCwgc2NpZW5jZSwgYW5kIHRlY2hub2xvZ3kgdHJhaW5pbmcsIGFuZCBpbXBsZW1lbnRpbmcgaW5mcmFzdHJ1Y3R1cmUgaW1wcm92ZW1lbnRzLCBzaGFsbCB0aGUgRnJhbmtsaW4gQ29tbXVuaXR5IENvbGxlZ2UgRGlzdHJpY3QgaXNzdWUgJDQ1MCBtaWxsaW9uIG9mIGJvbmRzIGF0IGxlZ2FsIGludGVyZXN0IHJhdGVzIHdpdGggaW5kZXBlbmRlbnQgb3ZlcnNpZ2h0LCBhdWRpdHMsIGFuZCBhbGwgZnVuZHMgc3BlbnQgb24gbG9jYWwgc2l0ZXM/IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgICJDb250ZXN0T3B0aW9uIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQmFsbG90TWVhc3VyZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJtZWFzdXJlLTEwMS1vcHRpb24teWVzIiwKICAgICAgICAgICAgICAiU2VsZWN0aW9uIjogewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiWWVzIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQmFsbG90TWVhc3VyZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJtZWFzdXJlLTEwMS1vcHRpb24tbm8iLAogICAgICAgICAgICAgICJTZWxlY3Rpb24iOiB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJObyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQmFsbG90TWVhc3VyZUNvbnRlc3QiLAogICAgICAgICAgIkBpZCI6ICIxMDIiLAogICAgICAgICAgIkVsZWN0aW9uRGlzdHJpY3RJZCI6ICJkaXN0cmljdC0xIiwKICAgICAgICAgICJOYW1lIjogIk1lYXN1cmUgMTAyOiBWZWhpY2xlIEFiYXRlbWVudCBQcm9ncmFtIiwKICAgICAgICAgICJCYWxsb3RUaXRsZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIk1lYXN1cmUgMTAyOiBWZWhpY2xlIEFiYXRlbWVudCBQcm9ncmFtIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgICJGdWxsVGV4dCI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIlNob3VsZCB0aGUgRnJhbmtsaW4gQ291bnR5IFZlaGljbGUgQWJhdGVtZW50IFByb2dyYW0gYW5kIHZlaGljbGUgcmVnaXN0cmF0aW9uIGZlZXMgKG9uZSBkb2xsYXIgcGVyIHZlaGljbGUgYW5kIGFuIGFkZGl0aW9uYWwgdHdvIGRvbGxhcnMgZm9yIGNlcnRhaW4gY29tbWVyY2lhbCB2ZWhpY2xlcyBwYXlhYmxlIHVwb24gcmVnaXN0cmF0aW9uIG9mIGEgdmVoaWNsZSkgYmUgcmVuZXdlZCBmb3IgYSB0ZW4teWVhciB0ZXJtIGJlZ2lubmluZyBKdWx5IDEsIDIwMjEsIGZvciB0aGUgYWJhdGVtZW50IGFuZCByZW1vdmFsIG9mIGFiYW5kb25lZCwgd3JlY2tlZCwgZGlzbWFudGxlZCwgb3IgaW5vcGVyYXRpdmUgdmVoaWNsZXM/IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgICJDb250ZXN0T3B0aW9uIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQmFsbG90TWVhc3VyZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICIxMDItb3B0aW9uLXllcyIsCiAgICAgICAgICAgICAgIlNlbGVjdGlvbiI6IHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgICAgICJDb250ZW50IjogIlllcyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkJhbGxvdE1lYXN1cmVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAiMTAyLW9wdGlvbi1ubyIsCiAgICAgICAgICAgICAgIlNlbGVjdGlvbiI6IHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgICAgICJDb250ZW50IjogIk5vIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVDb250ZXN0IiwKICAgICAgICAgICJAaWQiOiAibWVhc3VyZS02NjYiLAogICAgICAgICAgIkVsZWN0aW9uRGlzdHJpY3RJZCI6ICJkaXN0cmljdC0xIiwKICAgICAgICAgICJOYW1lIjogIk1lYXN1cmUgNjY2OiBQYXJ0eSBub3QgYXNzb2NpYXRlZCB3aXRoIGFueSBiYWxsb3Qgc3R5bGVzIiwKICAgICAgICAgICJCYWxsb3RUaXRsZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIk1lYXN1cmUgNjY2OiBQYXJ0eSBub3QgYXNzb2NpYXRlZCB3aXRoIGFueSBiYWxsb3Qgc3R5bGVzIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgICJWb3Rlc0FsbG93ZWQiOiAxLAogICAgICAgICAgIkNvbnRlc3RPcHRpb24iOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAibWVhc3VyZS02NjYtb3B0aW9uLXdyaXRlLWluLTEiLAogICAgICAgICAgICAgICJJc1dyaXRlSW4iOiB0cnVlCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiUHJpbWFyeVBhcnR5SWRzIjogWyIyIl0KICAgICAgICB9CiAgICAgIF0sCiAgICAgICJCYWxsb3RTdHlsZSI6IFsKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5CYWxsb3RTdHlsZSIsCiAgICAgICAgICAiR3BVbml0SWRzIjogWyIyMyIsICIyMSJdLAogICAgICAgICAgIkV4dGVybmFsSWRlbnRpZmllciI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkV4dGVybmFsSWRlbnRpZmllciIsCiAgICAgICAgICAgICAgIlR5cGUiOiAic3RhdGUtbGV2ZWwiLAogICAgICAgICAgICAgICJWYWx1ZSI6ICIxMiIKICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQmFsbG90U3R5bGUiLAogICAgICAgICAgIkdwVW5pdElkcyI6IFsiMjEiXSwKICAgICAgICAgICJFeHRlcm5hbElkZW50aWZpZXIiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5FeHRlcm5hbElkZW50aWZpZXIiLAogICAgICAgICAgICAgICJUeXBlIjogInN0YXRlLWxldmVsIiwKICAgICAgICAgICAgICAiVmFsdWUiOiAiNSIKICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQmFsbG90U3R5bGUiLAogICAgICAgICAgIkdwVW5pdElkcyI6IFsiMjAiXSwKICAgICAgICAgICJQYXJ0eUlkcyI6IFsiMyJdLAogICAgICAgICAgIkV4dGVybmFsSWRlbnRpZmllciI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkV4dGVybmFsSWRlbnRpZmllciIsCiAgICAgICAgICAgICAgIlR5cGUiOiAic3RhdGUtbGV2ZWwiLAogICAgICAgICAgICAgICJWYWx1ZSI6ICI3QyIKICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0KICAgICAgXQogICAgfQogIF0sCiAgIlBhcnR5IjogWwogICAgewogICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5QYXJ0eSIsCiAgICAgICJAaWQiOiAiMCIsCiAgICAgICJOYW1lIjogewogICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgIkNvbnRlbnQiOiAiRmVkZXJhbGlzdCBQYXJ0eSIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJBYmJyZXZpYXRpb24iOiB7CiAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAiQ29udGVudCI6ICJGIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgInZ4QmFsbG90TGFiZWwiOiB7CiAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAiQ29udGVudCI6ICJGZWRlcmFsaXN0IgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfQogICAgfSwKICAgIHsKICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uUGFydHkiLAogICAgICAiQGlkIjogIjEiLAogICAgICAiTmFtZSI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIlBlb3BsZeKAmXMgUGFydHkiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAiQWJicmV2aWF0aW9uIjogewogICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgIkNvbnRlbnQiOiAiUCIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJ2eEJhbGxvdExhYmVsIjogewogICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgIkNvbnRlbnQiOiAiUGVvcGxl4oCZcyIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLlBhcnR5IiwKICAgICAgIkBpZCI6ICIyIiwKICAgICAgIk5hbWUiOiB7CiAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAiQ29udGVudCI6ICJMaWJlcnR5IFBhcnR5IgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgIkFiYnJldmlhdGlvbiI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIkxpIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgInZ4QmFsbG90TGFiZWwiOiB7CiAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAiQ29udGVudCI6ICJMaWJlcnR5IgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfQogICAgfSwKICAgIHsKICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uUGFydHkiLAogICAgICAiQGlkIjogIjMiLAogICAgICAiTmFtZSI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIkNvbnN0aXR1dGlvbiBQYXJ0eSIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJBYmJyZXZpYXRpb24iOiB7CiAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAiQ29udGVudCI6ICJDIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgInZ4QmFsbG90TGFiZWwiOiB7CiAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAiQ29udGVudCI6ICJDb25zdGl0dXRpb24iCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9CiAgICB9LAogICAgewogICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5QYXJ0eSIsCiAgICAgICJAaWQiOiAiNCIsCiAgICAgICJOYW1lIjogewogICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgIkNvbnRlbnQiOiAiV2hpZyBQYXJ0eSIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJBYmJyZXZpYXRpb24iOiB7CiAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAiQ29udGVudCI6ICJXIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgInZ4QmFsbG90TGFiZWwiOiB7CiAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAiQ29udGVudCI6ICJXaGlnIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfQogICAgfSwKICAgIHsKICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uUGFydHkiLAogICAgICAiQGlkIjogIjUiLAogICAgICAiTmFtZSI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIkxhYm9yIFBhcnR5IgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgIkFiYnJldmlhdGlvbiI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIkxhIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgInZ4QmFsbG90TGFiZWwiOiB7CiAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAiQ29udGVudCI6ICJMYWJvciIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLlBhcnR5IiwKICAgICAgIkBpZCI6ICI2IiwKICAgICAgIk5hbWUiOiB7CiAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAiQ29udGVudCI6ICJJbmRlcGVuZGVudCBQYXJ0eSIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJBYmJyZXZpYXRpb24iOiB7CiAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAiQ29udGVudCI6ICJJIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgInZ4QmFsbG90TGFiZWwiOiB7CiAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAiQ29udGVudCI6ICJJbmRlcGVuZGVudCIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLlBhcnR5IiwKICAgICAgIkBpZCI6ICI3IiwKICAgICAgIk5hbWUiOiB7CiAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAiQ29udGVudCI6ICJEZW1vY3JhdGljIFBhcnR5IgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgIkFiYnJldmlhdGlvbiI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIkQiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAidnhCYWxsb3RMYWJlbCI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIkRlbW9jcmF0IgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfQogICAgfSwKICAgIHsKICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uUGFydHkiLAogICAgICAiQGlkIjogIjgiLAogICAgICAiTmFtZSI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIlJlcHVibGljYW4gUGFydHkiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAiQWJicmV2aWF0aW9uIjogewogICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgIkNvbnRlbnQiOiAiUiIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJ2eEJhbGxvdExhYmVsIjogewogICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgIkNvbnRlbnQiOiAiUmVwdWJsaWNhbiIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0KICAgIH0KICBdLAogICJHcFVuaXQiOiBbCiAgICB7CiAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLlJlcG9ydGluZ1VuaXQiLAogICAgICAiQGlkIjogInN0YXRlLW9mLWhhbWlsdG9uIiwKICAgICAgIk5hbWUiOiB7CiAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAiQ29udGVudCI6ICJTdGF0ZSBvZiBIYW1pbHRvbiIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJUeXBlIjogInN0YXRlIiwKICAgICAgIkNvbXBvc2luZ0dwVW5pdElkcyI6IFsiZnJhbmtsaW4iXQogICAgfSwKICAgIHsKICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uUmVwb3J0aW5nVW5pdCIsCiAgICAgICJAaWQiOiAiZnJhbmtsaW4iLAogICAgICAiTmFtZSI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIkZyYW5rbGluIENvdW50eSIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJUeXBlIjogImNvdW50eSIsCiAgICAgICJDb21wb3NpbmdHcFVuaXRJZHMiOiBbCiAgICAgICAgImRpc3RyaWN0LTEiLAogICAgICAgICJkaXN0cmljdC0yIiwKICAgICAgICAiZGlzdHJpY3QtMyIsCiAgICAgICAgImRpc3RyaWN0LTciCiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLlJlcG9ydGluZ1VuaXQiLAogICAgICAiQGlkIjogImRpc3RyaWN0LTEiLAogICAgICAiTmFtZSI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIkRpc3RyaWN0IDEiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAiVHlwZSI6ICJvdGhlciIsCiAgICAgICJDb21wb3NpbmdHcFVuaXRJZHMiOiBbIjIzIiwgIjIxIl0KICAgIH0sCiAgICB7CiAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLlJlcG9ydGluZ1VuaXQiLAogICAgICAiQGlkIjogImRpc3RyaWN0LTIiLAogICAgICAiTmFtZSI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIkRpc3RyaWN0IDIiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAiVHlwZSI6ICJvdGhlciIsCiAgICAgICJDb21wb3NpbmdHcFVuaXRJZHMiOiBbIjIzIiwgIjIxIl0KICAgIH0sCiAgICB7CiAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLlJlcG9ydGluZ1VuaXQiLAogICAgICAiQGlkIjogImRpc3RyaWN0LTMiLAogICAgICAiTmFtZSI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIkRpc3RyaWN0IDMiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAiVHlwZSI6ICJvdGhlciIsCiAgICAgICJDb21wb3NpbmdHcFVuaXRJZHMiOiBbXQogICAgfSwKICAgIHsKICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uUmVwb3J0aW5nVW5pdCIsCiAgICAgICJAaWQiOiAiZGlzdHJpY3QtNyIsCiAgICAgICJOYW1lIjogewogICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgIkNvbnRlbnQiOiAiRGlzdHJpY3QgNyIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJUeXBlIjogIm90aGVyIiwKICAgICAgIkNvbXBvc2luZ0dwVW5pdElkcyI6IFsiMjAiXQogICAgfSwKICAgIHsKICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uUmVwb3J0aW5nVW5pdCIsCiAgICAgICJAaWQiOiAiMjMiLAogICAgICAiTmFtZSI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIkNlbnRlciBTcHJpbmdmaWVsZCIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJUeXBlIjogInByZWNpbmN0IgogICAgfSwKICAgIHsKICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uUmVwb3J0aW5nVW5pdCIsCiAgICAgICJAaWQiOiAiMjEiLAogICAgICAiTmFtZSI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIk5vcnRoIFNwcmluZ2ZpZWxkIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgIlR5cGUiOiAicHJlY2luY3QiCiAgICB9LAogICAgewogICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5SZXBvcnRpbmdVbml0IiwKICAgICAgIkBpZCI6ICIyMCIsCiAgICAgICJOYW1lIjogewogICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgIkNvbnRlbnQiOiAiU291dGggU3ByaW5nZmllbGQiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAiVHlwZSI6ICJwcmVjaW5jdCIKICAgIH0KICBdLAogICJHZW5lcmF0ZWREYXRlIjogIjIwMjMtMDMtMDFUMjM6MDM6MTNaIiwKICAiSXNzdWVyIjogIlZvdGluZ1dvcmtzIiwKICAiSXNzdWVyQWJicmV2aWF0aW9uIjogIlZYIiwKICAiVmVuZG9yQXBwbGljYXRpb25JZCI6ICJWeFN1aXRlIiwKICAiVmVyc2lvbiI6ICIxLjAuMCIsCiAgIlNlcXVlbmNlU3RhcnQiOiAxLAogICJTZXF1ZW5jZUVuZCI6IDEKfQo=';

/**
 * MIME type of data/electionSampleCDF.json.
 */
export const mimeType = 'application/json';

/**
 * Path to a file containing this file's contents.
 *
 * SHA-256 hash of file data: f3eef11f146a529a8e1b2a536323f5119feb95bec937f38fc54e63e5cf5789ea
 */
export function asFilePath(): string {
  const directoryPath = mkdtempSync(tmpdir() + sep);
  const filePath = join(directoryPath, 'electionSampleCDF.json');
  writeFileSync(filePath, asBuffer());
  return filePath;
}

/**
 * Convert to a `data:` URL of data/electionSampleCDF.json, suitable for embedding in HTML.
 *
 * SHA-256 hash of file data: f3eef11f146a529a8e1b2a536323f5119feb95bec937f38fc54e63e5cf5789ea
 */
export function asDataUrl(): string {
  return `data:${mimeType};base64,${resourceDataBase64}`;
}

/**
 * Raw data of data/electionSampleCDF.json.
 *
 * SHA-256 hash of file data: f3eef11f146a529a8e1b2a536323f5119feb95bec937f38fc54e63e5cf5789ea
 */
export function asBuffer(): Buffer {
  return Buffer.from(resourceDataBase64, 'base64');
}

/**
 * Text content of data/electionSampleCDF.json.
 *
 * SHA-256 hash of file data: f3eef11f146a529a8e1b2a536323f5119feb95bec937f38fc54e63e5cf5789ea
 */
export function asText(): string {
  return asBuffer().toString('utf-8');
}

/**
 * Full election definition for data/electionSampleCDF.json.
 *
 * SHA-256 hash of file data: f3eef11f146a529a8e1b2a536323f5119feb95bec937f38fc54e63e5cf5789ea
 */
export const electionDefinition = safeParseElectionDefinition(
  asText()
).unsafeUnwrap();

/**
 * Election definition for data/electionSampleCDF.json.
 *
 * SHA-256 hash of file data: f3eef11f146a529a8e1b2a536323f5119feb95bec937f38fc54e63e5cf5789ea
 */
export const election = electionDefinition.election;