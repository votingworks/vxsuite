/* Generated by res-to-ts. DO NOT EDIT */
/* eslint-disable */
/* istanbul ignore file */

import { Buffer } from 'buffer';
import { mkdtempSync, writeFileSync } from 'fs';
import { tmpdir } from 'os';
import { join, sep } from 'path';
import { safeParseElectionDefinition } from '@votingworks/types';

/**
 * Data of data/electionSampleCDF.json encoded as base64.
 *
 * SHA-256 hash of file data: a72054e74cb19ccc19afbbd334fa162a569dc57058d5aa5e5e8f1c068b3c3f68
 */
const resourceDataBase64 = '';

/**
 * MIME type of data/electionSampleCDF.json.
 */
export const mimeType = 'application/json';

/**
 * Path to a file containing this file's contents.
 *
 * SHA-256 hash of file data: a72054e74cb19ccc19afbbd334fa162a569dc57058d5aa5e5e8f1c068b3c3f68
 */
export function asFilePath(): string {
  const directoryPath = mkdtempSync(tmpdir() + sep);
  const filePath = join(directoryPath, 'electionSampleCDF.json');
  writeFileSync(filePath, asBuffer());
  return filePath;
}

/**
 * Convert to a `data:` URL of data/electionSampleCDF.json, suitable for embedding in HTML.
 *
 * SHA-256 hash of file data: a72054e74cb19ccc19afbbd334fa162a569dc57058d5aa5e5e8f1c068b3c3f68
 */
export function asDataUrl(): string {
  return `data:${mimeType};base64,${resourceDataBase64}`;
}

/**
 * Raw data of data/electionSampleCDF.json.
 *
 * SHA-256 hash of file data: a72054e74cb19ccc19afbbd334fa162a569dc57058d5aa5e5e8f1c068b3c3f68
 */
export function asBuffer(): Buffer {
  return Buffer.from(resourceDataBase64, 'base64');
}

/**
 * Text content of data/electionSampleCDF.json.
 *
 * SHA-256 hash of file data: a72054e74cb19ccc19afbbd334fa162a569dc57058d5aa5e5e8f1c068b3c3f68
 */
export function asText(): string {
  return asBuffer().toString('utf-8');
}

/**
 * Full election definition for data/electionSampleCDF.json.
 *
 * SHA-256 hash of file data: a72054e74cb19ccc19afbbd334fa162a569dc57058d5aa5e5e8f1c068b3c3f68
 */
export const electionDefinition = safeParseElectionDefinition(
  asText()
).unsafeUnwrap();

/**
 * Election definition for data/electionSampleCDF.json.
 *
 * SHA-256 hash of file data: a72054e74cb19ccc19afbbd334fa162a569dc57058d5aa5e5e8f1c068b3c3f68
 */
export const election = electionDefinition.election;