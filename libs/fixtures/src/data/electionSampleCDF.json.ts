/* Generated by res-to-ts. DO NOT EDIT */
/* eslint-disable */
/* istanbul ignore file */

import { Buffer } from 'buffer';
import { mkdtempSync, writeFileSync } from 'fs';
import { tmpdir } from 'os';
import { join, sep } from 'path';
import { BallotPackage, safeParseElectionDefinition, DEFAULT_SYSTEM_SETTINGS } from '@votingworks/types';

/**
 * Data of data/electionSampleCDF.json encoded as base64.
 *
 * SHA-256 hash of file data: 5f9be00c4d77fdc8a8c573ecdc5959181e924d207f4eb7b8243a9abc2a1073ae
 */
const resourceDataBase64 = 'ewogICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkJhbGxvdERlZmluaXRpb24iLAogICJFbGVjdGlvbiI6IFsKICAgIHsKICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uRWxlY3Rpb24iLAogICAgICAiRWxlY3Rpb25TY29wZUlkIjogInN0YXRlLW9mLWhhbWlsdG9uIiwKICAgICAgIlN0YXJ0RGF0ZSI6ICIyMDIwLTExLTAzIiwKICAgICAgIkVuZERhdGUiOiAiMjAyMC0xMS0wMyIsCiAgICAgICJUeXBlIjogInByaW1hcnkiLAogICAgICAiTmFtZSI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIkdlbmVyYWwgRWxlY3Rpb24iCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAiQ2FuZGlkYXRlIjogWwogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogImJhcmNoaS1oYWxsYXJlbiIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkpvc2VwaCBCYXJjaGkgYW5kIEpvc2VwaCBIYWxsYXJlbiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogImNyYW1lci12dW9jb2xvIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiQWRhbSBDcmFtZXIgYW5kIEdyZWcgVnVvY29sbyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogImNvdXJ0LWJsdW1oYXJkdCIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkRhbmllbCBDb3VydCBhbmQgQW15IEJsdW1oYXJkdCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogImJvb25lLWxpYW4iLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJBbHZpbiBCb29uZSBhbmQgSmFtZXMgTGlhbiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogImhpbGRlYnJhbmQtZ2Fycml0dHkiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJBc2hsZXkgSGlsZGVicmFuZC1NY0RvdWdhbGwgYW5kIEphbWVzIEdhcnJpdHR5IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAicGF0dGVyc29uLWxhcml2aWVyZSIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIk1hcnRpbiBQYXR0ZXJzb24gYW5kIENsYXkgTGFyaXZpZXJlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAid2VpZm9yZCIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkRlbm5pcyBXZWlmb3JkIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAiZ2FycmlzcyIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkxsb3lkIEdhcnJpc3MiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJ3ZW50d29ydGhmYXJ0aGluZ3RvbiIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIlN5bHZpYSBXZW50d29ydGgtRmFydGhpbmd0b24iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJoZXdldHNvbiIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkhlYXRoZXIgSGV3ZXRzb24iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJtYXJ0aW5leiIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIlZpY3RvciBNYXJ0aW5leiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogImJyb3duIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiRGF2aWQgQnJvd24iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJwb3VuZCIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkRhdmlkIFBvdW5kIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAicGx1bmthcmQiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJCcmFkIFBsdW5rYXJkIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAicmVlZGVyIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiQnJ1Y2UgUmVlZGVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAic2Nob3R0IiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiQnJhZCBTY2hvdHQiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJ0YXduZXkiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJHbGVuIFRhd25leSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogImZvcnJlc3QiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJDYXJyb2xsIEZvcnJlc3QiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJmcmFueiIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkNoYXJsZW5lIEZyYW56IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAiaGFycmlzIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiR2VyYWxkIEhhcnJpcyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogImJhcmdtYW5uIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiTGluZGEgQmFyZ21hbm4iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJhYmNvY2siLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJCYXJiYXJhIEFkY29jayIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogInN0ZWVsbG95IiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiQ2FycmllIFN0ZWVsLUxveSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogInNoYXJwIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiRnJlZGVyaWNrIFNoYXJwIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAid2FsbGFjZSIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkFsZXggV2FsbGFjZSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogIndpbGxpYW1zIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiQmFyYmFyYSBXaWxsaWFtcyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogInNoYXJwLWFsdGhlYSIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkFsdGhlYSBTaGFycCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogImFscGVybiIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkRvdWdsYXMgQWxwZXJuIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAid2luZGJlY2siLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJBbm4gV2luZGJlY2siCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJncmVoZXIiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJNaWtlIEdyZWhlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogImFsZXhhbmRlciIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIlBhdHJpY2lhIEFsZXhhbmRlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogIm1pdGNoZWxsIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiS2VubmV0aCBNaXRjaGVsbCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogImxlZSIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIlN0YW4gTGVlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAiYXNoIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiSGVucnkgQXNoIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAibm9yYmVyZyIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkNocmlzIE5vcmJlcmciCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJwYXJrcyIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkFudGhvbnkgUGFya3MiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJnYXJjaWEiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJMdWlzIEpvcmdlcyBHYXJjaWEiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJxdWFsZXkiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJDaGFybGVzIFF1YWxleSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogImhvdmlzIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiR2VvcmdlIEhvdmlzIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAiemlya2xlIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiQnVydCBaaXJrbGUiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJkYXZpcy1icmVuZGEiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJCcmVuZGEgRGF2aXMiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJmcmVlbWFuIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiRWR3YXJkIEZyZWVtYW4iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJzd2FuIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiUGF1bCBTd2FuIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAic2hhbXNpIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiTGFpbGEgU2hhbXNpIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAidGFsYXJpY28iLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJNYXJ0eSBUYWxhcmljbyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogInNoaXBsZXR0IiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiRWR3YXJkIFNoaXBsZXR0IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAic29saXMiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJBbmRyZWEgU29saXMiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJrZWxsZXIiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJBbW9zIEtlbGxlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogInJhbmdlbCIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkRhdml0cmEgUmFuZ2VsIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAiYXJnZW50IiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiQ2FtaWxsZSBBcmdlbnQiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJ3aXRoZXJzcG9vbnNtaXRoc29uIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiQ2hsb2UgV2l0aGVyc3Bvb24tU21pdGhzb24iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJiYWluYnJpZGdlIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiQ2xheXRvbiBCYWluYnJpZGdlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAiaGVubmVzc2V5IiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiQ2hhcmxlbmUgSGVubmVzc2V5IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAic2F2b3kiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJFcmljIFNhdm95IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAidGF3YSIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIlN1c2FuIFRhd2EiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJ0YXdhLW1hcnkiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJNYXJ5IFRhd2EiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJyYW5nZWwtZGFtaWFuIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiRGFtaWFuIFJhbmdlbCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogImFsdG1hbiIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIlZhbGFyaWUgQWx0bWFuIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAibW9vcmUiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJIZWxlbiBNb29yZSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogInNjaHJlaW5lciIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIk1hcnRpbiBTY2hyZWluZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJyYW1hY2hhbmRyYW5pIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiUmhhZGthIFJhbWFjaGFuZHJhbmkiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJhbGljZSIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkFsaWNlIEpvbmVzIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAiYm9iIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiQm9iIFNtaXRoIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAid2hpdGUiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJPcnZpbGxlIFdoaXRlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAic2VsZG9uIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiR3JlZ29yeSBTZWxkb24iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJlYWdsZSIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkhhcnZleSBFYWdsZSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogInJ1cHAiLAogICAgICAgICAgIkJhbGxvdE5hbWUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJSYW5kYWxsIFJ1cHAiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJzaHJ5IiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiQ2Fycm9sbCBTaHJ5IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlIiwKICAgICAgICAgICJAaWQiOiAiYmFya2VyIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiQmV2ZXJseSBCYXJrZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGUiLAogICAgICAgICAgIkBpZCI6ICJkYXZpcyIsCiAgICAgICAgICAiQmFsbG90TmFtZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkRvbmFsZCBEYXZpcyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZSIsCiAgICAgICAgICAiQGlkIjogInNtaXRoIiwKICAgICAgICAgICJCYWxsb3ROYW1lIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiSHVnbyBTbWl0aCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIF0sCiAgICAgICJDb250ZXN0IjogWwogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZUNvbnRlc3QiLAogICAgICAgICAgIkBpZCI6ICJwcmVzaWRlbnQiLAogICAgICAgICAgIkVsZWN0aW9uRGlzdHJpY3RJZCI6ICJkaXN0cmljdC0xIiwKICAgICAgICAgICJOYW1lIjogIlByZXNpZGVudCBhbmQgVmljZS1QcmVzaWRlbnQiLAogICAgICAgICAgIkJhbGxvdFRpdGxlIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiUHJlc2lkZW50IGFuZCBWaWNlLVByZXNpZGVudCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAiVm90ZXNBbGxvd2VkIjogMSwKICAgICAgICAgICJDb250ZXN0T3B0aW9uIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogInByZXNpZGVudC1vcHRpb24tYmFyY2hpLWhhbGxhcmVuIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJiYXJjaGktaGFsbGFyZW4iXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMCJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAicHJlc2lkZW50LW9wdGlvbi1jcmFtZXItdnVvY29sbyIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsiY3JhbWVyLXZ1b2NvbG8iXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMSJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAicHJlc2lkZW50LW9wdGlvbi1jb3VydC1ibHVtaGFyZHQiLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbImNvdXJ0LWJsdW1oYXJkdCJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyIyIl0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJwcmVzaWRlbnQtb3B0aW9uLWJvb25lLWxpYW4iLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbImJvb25lLWxpYW4iXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMyJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAicHJlc2lkZW50LW9wdGlvbi1oaWxkZWJyYW5kLWdhcnJpdHR5IiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJoaWxkZWJyYW5kLWdhcnJpdHR5Il0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjQiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogInByZXNpZGVudC1vcHRpb24tcGF0dGVyc29uLWxhcml2aWVyZSIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsicGF0dGVyc29uLWxhcml2aWVyZSJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyI1Il0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlQ29udGVzdCIsCiAgICAgICAgICAiQGlkIjogInNlbmF0b3IiLAogICAgICAgICAgIkVsZWN0aW9uRGlzdHJpY3RJZCI6ICJkaXN0cmljdC0yIiwKICAgICAgICAgICJOYW1lIjogIlNlbmF0b3IiLAogICAgICAgICAgIkJhbGxvdFRpdGxlIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiU2VuYXRvciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAiVm90ZXNBbGxvd2VkIjogMSwKICAgICAgICAgICJDb250ZXN0T3B0aW9uIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogInNlbmF0b3Itb3B0aW9uLXdlaWZvcmQiLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbIndlaWZvcmQiXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMCJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAic2VuYXRvci1vcHRpb24tZ2FycmlzcyIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsiZ2FycmlzcyJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyIxIl0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJzZW5hdG9yLW9wdGlvbi13ZW50d29ydGhmYXJ0aGluZ3RvbiIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsid2VudHdvcnRoZmFydGhpbmd0b24iXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMiJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAic2VuYXRvci1vcHRpb24taGV3ZXRzb24iLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbImhld2V0c29uIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjMiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogInNlbmF0b3Itb3B0aW9uLW1hcnRpbmV6IiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJtYXJ0aW5leiJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyI0Il0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJzZW5hdG9yLW9wdGlvbi1icm93biIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsiYnJvd24iXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiNiJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAic2VuYXRvci1vcHRpb24tcG91bmQiLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbInBvdW5kIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjYiXQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVDb250ZXN0IiwKICAgICAgICAgICJAaWQiOiAicmVwcmVzZW50YXRpdmUtZGlzdHJpY3QtNiIsCiAgICAgICAgICAiRWxlY3Rpb25EaXN0cmljdElkIjogImRpc3RyaWN0LTEiLAogICAgICAgICAgIk5hbWUiOiAiUmVwcmVzZW50YXRpdmUsIERpc3RyaWN0IDYiLAogICAgICAgICAgIkJhbGxvdFRpdGxlIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiUmVwcmVzZW50YXRpdmUsIERpc3RyaWN0IDYiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgIlZvdGVzQWxsb3dlZCI6IDEsCiAgICAgICAgICAiQ29udGVzdE9wdGlvbiI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJyZXByZXNlbnRhdGl2ZS1kaXN0cmljdC02LW9wdGlvbi1wbHVua2FyZCIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsicGx1bmthcmQiXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMCJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAicmVwcmVzZW50YXRpdmUtZGlzdHJpY3QtNi1vcHRpb24tcmVlZGVyIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJyZWVkZXIiXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMSJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAicmVwcmVzZW50YXRpdmUtZGlzdHJpY3QtNi1vcHRpb24tc2Nob3R0IiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJzY2hvdHQiXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMiJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAicmVwcmVzZW50YXRpdmUtZGlzdHJpY3QtNi1vcHRpb24tdGF3bmV5IiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJ0YXduZXkiXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMyJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAicmVwcmVzZW50YXRpdmUtZGlzdHJpY3QtNi1vcHRpb24tZm9ycmVzdCIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsiZm9ycmVzdCJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyI0Il0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlQ29udGVzdCIsCiAgICAgICAgICAiQGlkIjogImdvdmVybm9yIiwKICAgICAgICAgICJFbGVjdGlvbkRpc3RyaWN0SWQiOiAiZGlzdHJpY3QtMiIsCiAgICAgICAgICAiTmFtZSI6ICJHb3Zlcm5vciIsCiAgICAgICAgICAiQmFsbG90VGl0bGUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJHb3Zlcm5vciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAiVm90ZXNBbGxvd2VkIjogMSwKICAgICAgICAgICJDb250ZXN0T3B0aW9uIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImdvdmVybm9yLW9wdGlvbi1mcmFueiIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsiZnJhbnoiXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMCJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAiZ292ZXJub3Itb3B0aW9uLWhhcnJpcyIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsiaGFycmlzIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjEiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImdvdmVybm9yLW9wdGlvbi1iYXJnbWFubiIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsiYmFyZ21hbm4iXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMiJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAiZ292ZXJub3Itb3B0aW9uLWFiY29jayIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsiYWJjb2NrIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjMiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImdvdmVybm9yLW9wdGlvbi1zdGVlbGxveSIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsic3RlZWxsb3kiXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiNCJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAiZ292ZXJub3Itb3B0aW9uLXNoYXJwIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJzaGFycCJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyI1Il0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJnb3Zlcm5vci1vcHRpb24td2FsbGFjZSIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsid2FsbGFjZSJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyI2Il0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJnb3Zlcm5vci1vcHRpb24td2lsbGlhbXMiLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbIndpbGxpYW1zIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjYiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImdvdmVybm9yLW9wdGlvbi1zaGFycC1hbHRoZWEiLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbInNoYXJwLWFsdGhlYSJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyI2Il0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJnb3Zlcm5vci1vcHRpb24tYWxwZXJuIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJhbHBlcm4iXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiNiJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAiZ292ZXJub3Itb3B0aW9uLXdpbmRiZWNrIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJ3aW5kYmVjayJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyI2Il0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJnb3Zlcm5vci1vcHRpb24tZ3JlaGVyIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJncmVoZXIiXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiNiJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAiZ292ZXJub3Itb3B0aW9uLWFsZXhhbmRlciIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsiYWxleGFuZGVyIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjYiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImdvdmVybm9yLW9wdGlvbi1taXRjaGVsbCIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsibWl0Y2hlbGwiXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiNiJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAiZ292ZXJub3Itb3B0aW9uLWxlZSIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsibGVlIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjYiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImdvdmVybm9yLW9wdGlvbi1hc2giLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbImFzaCJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyI2Il0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlQ29udGVzdCIsCiAgICAgICAgICAiQGlkIjogImxpZXV0ZW5hbnQtZ292ZXJub3IiLAogICAgICAgICAgIkVsZWN0aW9uRGlzdHJpY3RJZCI6ICJkaXN0cmljdC0xIiwKICAgICAgICAgICJOYW1lIjogIkxpZXV0ZW5hbnQgR292ZXJub3IiLAogICAgICAgICAgIkJhbGxvdFRpdGxlIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiTGlldXRlbmFudCBHb3Zlcm5vciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAiVm90ZXNBbGxvd2VkIjogMSwKICAgICAgICAgICJDb250ZXN0T3B0aW9uIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImxpZXV0ZW5hbnQtZ292ZXJub3Itb3B0aW9uLW5vcmJlcmciLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbIm5vcmJlcmciXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMCJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAibGlldXRlbmFudC1nb3Zlcm5vci1vcHRpb24tcGFya3MiLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbInBhcmtzIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjEiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImxpZXV0ZW5hbnQtZ292ZXJub3Itb3B0aW9uLWdhcmNpYSIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsiZ2FyY2lhIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjIiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImxpZXV0ZW5hbnQtZ292ZXJub3Itb3B0aW9uLXF1YWxleSIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsicXVhbGV5Il0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjMiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImxpZXV0ZW5hbnQtZ292ZXJub3Itb3B0aW9uLWhvdmlzIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJob3ZpcyJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyI0Il0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJsaWV1dGVuYW50LWdvdmVybm9yLW9wdGlvbi16aXJrbGUiLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbInppcmtsZSJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyI1Il0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJsaWV1dGVuYW50LWdvdmVybm9yLW9wdGlvbi1kYXZpcy1icmVuZGEiLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbImRhdmlzLWJyZW5kYSJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyI2Il0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJsaWV1dGVuYW50LWdvdmVybm9yLW9wdGlvbi1mcmVlbWFuIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJmcmVlbWFuIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjYiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImxpZXV0ZW5hbnQtZ292ZXJub3Itb3B0aW9uLXN3YW4iLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbInN3YW4iXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiNiJdCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZUNvbnRlc3QiLAogICAgICAgICAgIkBpZCI6ICJzZWNyZXRhcnktb2Ytc3RhdGUiLAogICAgICAgICAgIkVsZWN0aW9uRGlzdHJpY3RJZCI6ICJkaXN0cmljdC0yIiwKICAgICAgICAgICJOYW1lIjogIlNlY3JldGFyeSBvZiBTdGF0ZSIsCiAgICAgICAgICAiQmFsbG90VGl0bGUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJTZWNyZXRhcnkgb2YgU3RhdGUiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgIlZvdGVzQWxsb3dlZCI6IDEsCiAgICAgICAgICAiQ29udGVzdE9wdGlvbiI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJzZWNyZXRhcnktb2Ytc3RhdGUtb3B0aW9uLXNoYW1zaSIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsic2hhbXNpIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjAiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogInNlY3JldGFyeS1vZi1zdGF0ZS1vcHRpb24tdGFsYXJpY28iLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbInRhbGFyaWNvIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjEiXQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVDb250ZXN0IiwKICAgICAgICAgICJAaWQiOiAic3RhdGUtc2VuYXRvci1kaXN0cmljdC0zMSIsCiAgICAgICAgICAiRWxlY3Rpb25EaXN0cmljdElkIjogImRpc3RyaWN0LTEiLAogICAgICAgICAgIk5hbWUiOiAiU2VuYXRvciwgRGlzdHJpY3QgMzEiLAogICAgICAgICAgIkJhbGxvdFRpdGxlIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiU2VuYXRvciwgRGlzdHJpY3QgMzEiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgIlZvdGVzQWxsb3dlZCI6IDEsCiAgICAgICAgICAiQ29udGVzdE9wdGlvbiI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJzdGF0ZS1zZW5hdG9yLWRpc3RyaWN0LTMxLW9wdGlvbi1zaGlwbGV0dCIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsic2hpcGxldHQiXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMyJdCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZUNvbnRlc3QiLAogICAgICAgICAgIkBpZCI6ICJzdGF0ZS1hc3NlbWJseS1kaXN0cmljdC01NCIsCiAgICAgICAgICAiRWxlY3Rpb25EaXN0cmljdElkIjogImRpc3RyaWN0LTEiLAogICAgICAgICAgIk5hbWUiOiAiQXNzZW1ibHkgTWVtYmVyLCBEaXN0cmljdCA1NCIsCiAgICAgICAgICAiQmFsbG90VGl0bGUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJBc3NlbWJseSBNZW1iZXIsIERpc3RyaWN0IDU0IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgICJWb3Rlc0FsbG93ZWQiOiAxLAogICAgICAgICAgIkNvbnRlc3RPcHRpb24iOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAic3RhdGUtYXNzZW1ibHktZGlzdHJpY3QtNTQtb3B0aW9uLXNvbGlzIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJzb2xpcyJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyIwIl0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJzdGF0ZS1hc3NlbWJseS1kaXN0cmljdC01NC1vcHRpb24ta2VsbGVyIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJrZWxsZXIiXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMSJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAic3RhdGUtYXNzZW1ibHktZGlzdHJpY3QtNTQtb3B0aW9uLXJhbmdlbCIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsicmFuZ2VsIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjIiXQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVDb250ZXN0IiwKICAgICAgICAgICJAaWQiOiAiY291bnR5LWNvbW1pc3Npb25lcnMiLAogICAgICAgICAgIkVsZWN0aW9uRGlzdHJpY3RJZCI6ICJkaXN0cmljdC0yIiwKICAgICAgICAgICJOYW1lIjogIkNvdW50eSBDb21taXNzaW9uZXJzIiwKICAgICAgICAgICJCYWxsb3RUaXRsZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkNvdW50eSBDb21taXNzaW9uZXJzIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgICJWb3Rlc0FsbG93ZWQiOiA0LAogICAgICAgICAgIkNvbnRlc3RPcHRpb24iOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAiY291bnR5LWNvbW1pc3Npb25lcnMtb3B0aW9uLWFyZ2VudCIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsiYXJnZW50Il0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjAiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImNvdW50eS1jb21taXNzaW9uZXJzLW9wdGlvbi13aXRoZXJzcG9vbnNtaXRoc29uIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJ3aXRoZXJzcG9vbnNtaXRoc29uIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjAiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImNvdW50eS1jb21taXNzaW9uZXJzLW9wdGlvbi1iYWluYnJpZGdlIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJiYWluYnJpZGdlIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjAiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImNvdW50eS1jb21taXNzaW9uZXJzLW9wdGlvbi1oZW5uZXNzZXkiLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbImhlbm5lc3NleSJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyIxIl0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJjb3VudHktY29tbWlzc2lvbmVycy1vcHRpb24tc2F2b3kiLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbInNhdm95Il0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjEiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImNvdW50eS1jb21taXNzaW9uZXJzLW9wdGlvbi10YXdhIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJ0YXdhIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjEiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImNvdW50eS1jb21taXNzaW9uZXJzLW9wdGlvbi10YXdhLW1hcnkiLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbInRhd2EtbWFyeSJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyIxIl0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJjb3VudHktY29tbWlzc2lvbmVycy1vcHRpb24tcmFuZ2VsLWRhbWlhbiIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsicmFuZ2VsLWRhbWlhbiJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyIyIl0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJjb3VudHktY29tbWlzc2lvbmVycy1vcHRpb24tYWx0bWFuIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJhbHRtYW4iXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMyJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAiY291bnR5LWNvbW1pc3Npb25lcnMtb3B0aW9uLW1vb3JlIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJtb29yZSJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyIzIl0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJjb3VudHktY29tbWlzc2lvbmVycy1vcHRpb24tc2NocmVpbmVyIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJzY2hyZWluZXIiXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiNiJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAiY291bnR5LWNvbW1pc3Npb25lcnMtb3B0aW9uLXdyaXRlLWluLTEiLAogICAgICAgICAgICAgICJJc1dyaXRlSW4iOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAiY291bnR5LWNvbW1pc3Npb25lcnMtb3B0aW9uLXdyaXRlLWluLTIiLAogICAgICAgICAgICAgICJJc1dyaXRlSW4iOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAiY291bnR5LWNvbW1pc3Npb25lcnMtb3B0aW9uLXdyaXRlLWluLTMiLAogICAgICAgICAgICAgICJJc1dyaXRlSW4iOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAiY291bnR5LWNvbW1pc3Npb25lcnMtb3B0aW9uLXdyaXRlLWluLTQiLAogICAgICAgICAgICAgICJJc1dyaXRlSW4iOiB0cnVlCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZUNvbnRlc3QiLAogICAgICAgICAgIkBpZCI6ICJjb3VudHktcmVnaXN0cmFyLW9mLXdpbGxzIiwKICAgICAgICAgICJFbGVjdGlvbkRpc3RyaWN0SWQiOiAiZGlzdHJpY3QtMSIsCiAgICAgICAgICAiTmFtZSI6ICJSZWdpc3RyYXIgb2YgV2lsbHMiLAogICAgICAgICAgIkJhbGxvdFRpdGxlIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiUmVnaXN0cmFyIG9mIFdpbGxzIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgICJWb3Rlc0FsbG93ZWQiOiAxLAogICAgICAgICAgIkNvbnRlc3RPcHRpb24iOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAiY291bnR5LXJlZ2lzdHJhci1vZi13aWxscy1vcHRpb24tcmFtYWNoYW5kcmFuaSIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsicmFtYWNoYW5kcmFuaSJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyI2Il0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJjb3VudHktcmVnaXN0cmFyLW9mLXdpbGxzLW9wdGlvbi13cml0ZS1pbi0xIiwKICAgICAgICAgICAgICAiSXNXcml0ZUluIjogdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVDb250ZXN0IiwKICAgICAgICAgICJAaWQiOiAicHJpbWFyeS1jb25zdGl0dXRpb24taGVhZC1vZi1wYXJ0eSIsCiAgICAgICAgICAiRWxlY3Rpb25EaXN0cmljdElkIjogImRpc3RyaWN0LTciLAogICAgICAgICAgIk5hbWUiOiAiSGVhZCBvZiBDb25zdGl0dXRpb24gUGFydHkiLAogICAgICAgICAgIkJhbGxvdFRpdGxlIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiSGVhZCBvZiBDb25zdGl0dXRpb24gUGFydHkiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgIlZvdGVzQWxsb3dlZCI6IDEsCiAgICAgICAgICAiQ29udGVzdE9wdGlvbiI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJwcmltYXJ5LWNvbnN0aXR1dGlvbi1oZWFkLW9mLXBhcnR5LW9wdGlvbi1hbGljZSIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsiYWxpY2UiXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMyJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAicHJpbWFyeS1jb25zdGl0dXRpb24taGVhZC1vZi1wYXJ0eS1vcHRpb24tYm9iIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJib2IiXQogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgIlByaW1hcnlQYXJ0eUlkcyI6IFsiMyJdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVDb250ZXN0IiwKICAgICAgICAgICJAaWQiOiAiY2l0eS1tYXlvciIsCiAgICAgICAgICAiRWxlY3Rpb25EaXN0cmljdElkIjogImRpc3RyaWN0LTIiLAogICAgICAgICAgIk5hbWUiOiAiTWF5b3IiLAogICAgICAgICAgIkJhbGxvdFRpdGxlIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiTWF5b3IiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgIlZvdGVzQWxsb3dlZCI6IDEsCiAgICAgICAgICAiQ29udGVzdE9wdGlvbiI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJjaXR5LW1heW9yLW9wdGlvbi13aGl0ZSIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsid2hpdGUiXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMSJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAiY2l0eS1tYXlvci1vcHRpb24tc2VsZG9uIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJzZWxkb24iXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMiJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAiY2l0eS1tYXlvci1vcHRpb24td3JpdGUtaW4tMSIsCiAgICAgICAgICAgICAgIklzV3JpdGVJbiI6IHRydWUKICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlQ29udGVzdCIsCiAgICAgICAgICAiQGlkIjogImNpdHktY291bmNpbCIsCiAgICAgICAgICAiRWxlY3Rpb25EaXN0cmljdElkIjogImRpc3RyaWN0LTIiLAogICAgICAgICAgIk5hbWUiOiAiQ2l0eSBDb3VuY2lsIiwKICAgICAgICAgICJCYWxsb3RUaXRsZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIkNpdHkgQ291bmNpbCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAiVm90ZXNBbGxvd2VkIjogMywKICAgICAgICAgICJDb250ZXN0T3B0aW9uIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImNpdHktY291bmNpbC1vcHRpb24tZWFnbGUiLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbImVhZ2xlIl0sCiAgICAgICAgICAgICAgIkVuZG9yc2VtZW50UGFydHlJZHMiOiBbIjAiXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImNpdHktY291bmNpbC1vcHRpb24tcnVwcCIsCiAgICAgICAgICAgICAgIkNhbmRpZGF0ZUlkcyI6IFsicnVwcCJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyIwIl0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJjaXR5LWNvdW5jaWwtb3B0aW9uLXNocnkiLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbInNocnkiXSwKICAgICAgICAgICAgICAiRW5kb3JzZW1lbnRQYXJ0eUlkcyI6IFsiMCJdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAiY2l0eS1jb3VuY2lsLW9wdGlvbi1iYXJrZXIiLAogICAgICAgICAgICAgICJDYW5kaWRhdGVJZHMiOiBbImJhcmtlciJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyIxIl0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJjaXR5LWNvdW5jaWwtb3B0aW9uLWRhdmlzIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJkYXZpcyJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyIxIl0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJjaXR5LWNvdW5jaWwtb3B0aW9uLXNtaXRoIiwKICAgICAgICAgICAgICAiQ2FuZGlkYXRlSWRzIjogWyJzbWl0aCJdLAogICAgICAgICAgICAgICJFbmRvcnNlbWVudFBhcnR5SWRzIjogWyIxIl0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkNhbmRpZGF0ZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJjaXR5LWNvdW5jaWwtb3B0aW9uLXdyaXRlLWluLTEiLAogICAgICAgICAgICAgICJJc1dyaXRlSW4iOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5DYW5kaWRhdGVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAiY2l0eS1jb3VuY2lsLW9wdGlvbi13cml0ZS1pbi0yIiwKICAgICAgICAgICAgICAiSXNXcml0ZUluIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImNpdHktY291bmNpbC1vcHRpb24td3JpdGUtaW4tMyIsCiAgICAgICAgICAgICAgIklzV3JpdGVJbiI6IHRydWUKICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQmFsbG90TWVhc3VyZUNvbnRlc3QiLAogICAgICAgICAgIkBpZCI6ICJqdWRpY2lhbC1yb2JlcnQtZGVtZXJndWUiLAogICAgICAgICAgIkVsZWN0aW9uRGlzdHJpY3RJZCI6ICJkaXN0cmljdC0xIiwKICAgICAgICAgICJOYW1lIjogIlJldGFpbiBSb2JlcnQgRGVtZXJndWUgYXMgQ2hpZWYgSnVzdGljZT8iLAogICAgICAgICAgIkJhbGxvdFRpdGxlIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiUmV0YWluIFJvYmVydCBEZW1lcmd1ZSBhcyBDaGllZiBKdXN0aWNlPyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAiRnVsbFRleHQiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJTaGFsbCBSb2JlcnQgRGVtZXJndWUgYmUgcmV0YWluZWQgYXMgQ2hpZWYgSnVzdGljZSBvZiB0aGUgSGFtaWx0b24gQ291cnQgb2YgQXBwZWFscz8iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgIkNvbnRlc3RPcHRpb24iOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5CYWxsb3RNZWFzdXJlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogImp1ZGljaWFsLXJvYmVydC1kZW1lcmd1ZS1vcHRpb24teWVzIiwKICAgICAgICAgICAgICAiU2VsZWN0aW9uIjogewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiWWVzIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQmFsbG90TWVhc3VyZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJqdWRpY2lhbC1yb2JlcnQtZGVtZXJndWUtb3B0aW9uLW5vIiwKICAgICAgICAgICAgICAiU2VsZWN0aW9uIjogewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiTm8iCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkJhbGxvdE1lYXN1cmVDb250ZXN0IiwKICAgICAgICAgICJAaWQiOiAianVkaWNpYWwtZWxtZXItaHVsbCIsCiAgICAgICAgICAiRWxlY3Rpb25EaXN0cmljdElkIjogImRpc3RyaWN0LTIiLAogICAgICAgICAgIk5hbWUiOiAiUmV0YWluIEVsbWVyIEh1bGwgYXMgQXNzb2NpYXRlIEp1c3RpY2U/IiwKICAgICAgICAgICJCYWxsb3RUaXRsZSI6IHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICJDb250ZW50IjogIlJldGFpbiBFbG1lciBIdWxsIGFzIEFzc29jaWF0ZSBKdXN0aWNlPyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAiRnVsbFRleHQiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJTaGFsbCBFbG1lciBIdWxsIGJlIHJldGFpbmVkIGFzIEFzc29jaWF0ZSBKdXN0aWNlIG9mIHRoZSBIYW1pbHRvbiBDb3VydCBvZiBBcHBlYWxzPyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAiQ29udGVzdE9wdGlvbiI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkJhbGxvdE1lYXN1cmVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAianVkaWNpYWwtZWxtZXItaHVsbC1vcHRpb24teWVzIiwKICAgICAgICAgICAgICAiU2VsZWN0aW9uIjogewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiWWVzIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQmFsbG90TWVhc3VyZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJqdWRpY2lhbC1lbG1lci1odWxsLW9wdGlvbi1ubyIsCiAgICAgICAgICAgICAgIlNlbGVjdGlvbiI6IHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgICAgICJDb250ZW50IjogIk5vIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5CYWxsb3RNZWFzdXJlQ29udGVzdCIsCiAgICAgICAgICAiQGlkIjogInF1ZXN0aW9uLWEiLAogICAgICAgICAgIkVsZWN0aW9uRGlzdHJpY3RJZCI6ICJkaXN0cmljdC0xIiwKICAgICAgICAgICJOYW1lIjogIlF1ZXN0aW9uIEE6IFJlY292ZXJ5IG9mIFByb3BlcnR5IERhbWFnZXMiLAogICAgICAgICAgIkJhbGxvdFRpdGxlIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiUXVlc3Rpb24gQTogUmVjb3Zlcnkgb2YgUHJvcGVydHkgRGFtYWdlcyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAiRnVsbFRleHQiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJTaGFsbCB0aGVyZSBiZSBhbiBhbWVuZG1lbnQgdG8gdGhlIFN0YXRlIGNvbnN0aXR1dGlvbiBjb25jZXJuaW5nIHJlY292ZXJ5IG9mIGRhbWFnZXMgcmVsYXRpbmcgdG8gY29uc3RydWN0aW9uIG9mIHJlYWwgcHJvcGVydHkgaW1wcm92ZW1lbnRzLCBhbmQsIGluIGNvbm5lY3Rpb24gdGhlcmV3aXRoLCBwcm9oaWJpdGluZyBsYXdzIHRoYXQgbGltaXQgb3IgaW1wYWlyIGEgcHJvcGVydHkgb3duZXIncyByaWdodCB0byByZWNvdmVyIGRhbWFnZXMgY2F1c2VkIGJ5IGEgZmFpbHVyZSB0byBjb25zdHJ1Y3QgYW4gaW1wcm92ZW1lbnQgaW4gYSBnb29kIGFuZCB3b3JrbWFubGlrZSBtYW5uZXI/IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgICJDb250ZXN0T3B0aW9uIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQmFsbG90TWVhc3VyZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJxdWVzdGlvbi1hLW9wdGlvbi15ZXMiLAogICAgICAgICAgICAgICJTZWxlY3Rpb24iOiB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJZZXMiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5CYWxsb3RNZWFzdXJlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogInF1ZXN0aW9uLWEtb3B0aW9uLW5vIiwKICAgICAgICAgICAgICAiU2VsZWN0aW9uIjogewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiTm8iCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkJhbGxvdE1lYXN1cmVDb250ZXN0IiwKICAgICAgICAgICJAaWQiOiAicXVlc3Rpb24tYiIsCiAgICAgICAgICAiRWxlY3Rpb25EaXN0cmljdElkIjogImRpc3RyaWN0LTEiLAogICAgICAgICAgIk5hbWUiOiAiUXVlc3Rpb24gQjogU2VwYXJhdGlvbiBvZiBQb3dlcnMiLAogICAgICAgICAgIkJhbGxvdFRpdGxlIjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiUXVlc3Rpb24gQjogU2VwYXJhdGlvbiBvZiBQb3dlcnMiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgIkZ1bGxUZXh0IjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiU2hhbGwgdGhlcmUgYmUgYW1lbmRtZW50cyB0byB0aGUgU3RhdGUgY29uc3RpdHV0aW9uIGludGVuZGVkIHRvIGhhdmUgdGhlIGNvbGxlY3RpdmUgZWZmZWN0IG9mIGVuc3VyaW5nIHRoZSBzZXBhcmF0aW9uIG9mIGdvdmVybm1lbnRhbCBwb3dlciBhbW9uZyB0aGUgdGhyZWUgYnJhbmNoZXMgb2Ygc3RhdGUgZ292ZXJubWVudDogdGhlIGxlZ2lzbGF0aXZlIGJyYW5jaCwgdGhlIGV4ZWN1dGl2ZSBicmFuY2ggYW5kIHRoZSBqdWRpY2lhbCBicmFuY2g/IFxuXG5hLiBBcnRpY2xlIElJSSwgU2VjdGlvbiA2IG9mIHRoZSBDb25zdGl0dXRpb24gc2hhbGwgYmUgYW1lbmRlZCB0byByZWFkIGFzIGZvbGxvd3M6IFxuXG5TZWN0aW9uIDYuIEhvbGRpbmcgb2Ygb2ZmaWNlcyB1bmRlciBvdGhlciBnb3Zlcm5tZW50cyBcblxuU2VuYXRvcnMgYW5kIHJlcHJlc2VudGF0aXZlcyBub3QgdG8gaG9sZCBvdGhlciBhcHBvaW50ZWQgb2ZmaWNlcyB1bmRlciBzdGF0ZSBnb3Zlcm5tZW50LiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAiQ29udGVzdE9wdGlvbiI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkJhbGxvdE1lYXN1cmVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAicXVlc3Rpb24tYi1vcHRpb24teWVzIiwKICAgICAgICAgICAgICAiU2VsZWN0aW9uIjogewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiWWVzIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQmFsbG90TWVhc3VyZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJxdWVzdGlvbi1iLW9wdGlvbi1ubyIsCiAgICAgICAgICAgICAgIlNlbGVjdGlvbiI6IHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgICAgICJDb250ZW50IjogIk5vIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5CYWxsb3RNZWFzdXJlQ29udGVzdCIsCiAgICAgICAgICAiQGlkIjogInF1ZXN0aW9uLWMiLAogICAgICAgICAgIkVsZWN0aW9uRGlzdHJpY3RJZCI6ICJkaXN0cmljdC0yIiwKICAgICAgICAgICJOYW1lIjogIlF1ZXN0aW9uIEM6IExpbWl0cyB0byBEYW1hZ2VzIGZvciBOb24tRWNvbm9taWMgTG9zcyIsCiAgICAgICAgICAiQmFsbG90VGl0bGUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJRdWVzdGlvbiBDOiBMaW1pdHMgdG8gRGFtYWdlcyBmb3IgTm9uLUVjb25vbWljIExvc3MiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgIkZ1bGxUZXh0IjogewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiU2hhbGwgdGhlcmUgYmUgYW4gYW1lbmRtZW50IHRvIHRoZSBTdGF0ZSBjb25zdGl0dXRpb24gYWxsb3dpbmcgdGhlIFN0YXRlIGxlZ2lzbGF0dXJlIHRvIGVuYWN0IGxhd3MgbGltaXRpbmcgdGhlIGFtb3VudCBvZiBkYW1hZ2VzIGZvciBub24tZWNvbm9taWMgbG9zcyB0aGF0IGNvdWxkIGJlIGF3YXJkZWQgZm9yIGluanVyeSBvciBkZWF0aCBjYXVzZWQgYnkgYSBoZWFsdGggY2FyZSBwcm92aWRlcj8iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgIkNvbnRlc3RPcHRpb24iOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5CYWxsb3RNZWFzdXJlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogInF1ZXN0aW9uLWMtb3B0aW9uLXllcyIsCiAgICAgICAgICAgICAgIlNlbGVjdGlvbiI6IHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgICAgICJDb250ZW50IjogIlllcyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkJhbGxvdE1lYXN1cmVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAicXVlc3Rpb24tYy1vcHRpb24tbm8iLAogICAgICAgICAgICAgICJTZWxlY3Rpb24iOiB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJObyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQmFsbG90TWVhc3VyZUNvbnRlc3QiLAogICAgICAgICAgIkBpZCI6ICJwcm9wb3NpdGlvbi0xIiwKICAgICAgICAgICJFbGVjdGlvbkRpc3RyaWN0SWQiOiAiZGlzdHJpY3QtMSIsCiAgICAgICAgICAiTmFtZSI6ICJQcm9wb3NpdGlvbiAxOiBHYW1ibGluZyBpbiBGcmFua2xpbiBhbmQgRnJvbXdpdCBDb3VudGllcyIsCiAgICAgICAgICAiQmFsbG90VGl0bGUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJQcm9wb3NpdGlvbiAxOiBHYW1ibGluZyBpbiBGcmFua2xpbiBhbmQgRnJvbXdpdCBDb3VudGllcyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAiRnVsbFRleHQiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJTaGFsbCB0aGVyZSBiZSBhbiBhbWVuZG1lbnQgdG8gdGhlIFN0YXRlIGNvbnN0aXR1dGlvbiBhdXRob3JpemluZyBGcmFua2xpbiBhbmQgRnJvbXdpdCBDb3VudGllcyB0byBob2xkIHJlZmVyZW5kYSBvbiB3aGV0aGVyIHRvIGF1dGhvcml6ZSBzbG90IG1hY2hpbmVzIGluIGV4aXN0aW5nLCBsaWNlbnNlZCBwYXJpLW11dHVlbCBmYWNpbGl0aWVzICh0aG9yb3VnaGJyZWQgYW5kIGhhcm5lc3MgcmFjaW5nLCBncmV5aG91bmQgcmFjaW5nLCBhbmQgamFpIGFsYWkpIHRoYXQgaGF2ZSBjb25kdWN0ZWQgbGl2ZSByYWNpbmcgb3IgZ2FtZXMgaW4gdGhhdCBjb3VudHkgZHVyaW5nIGVhY2ggb2YgdGhlIGxhc3QgdHdvIGNhbGVuZGFyIHllYXJzIGJlZm9yZSBlZmZlY3RpdmUgZGF0ZSBvZiB0aGlzIGFtZW5kbWVudD8gUmVxdWlyZXMgaW1wbGVtZW50aW5nIGxlZ2lzbGF0aW9uLiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAiQ29udGVzdE9wdGlvbiI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkJhbGxvdE1lYXN1cmVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAicHJvcG9zaXRpb24tMS1vcHRpb24teWVzIiwKICAgICAgICAgICAgICAiU2VsZWN0aW9uIjogewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiWWVzIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQmFsbG90TWVhc3VyZU9wdGlvbiIsCiAgICAgICAgICAgICAgIkBpZCI6ICJwcm9wb3NpdGlvbi0xLW9wdGlvbi1ubyIsCiAgICAgICAgICAgICAgIlNlbGVjdGlvbiI6IHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgICAgICJDb250ZW50IjogIk5vIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5CYWxsb3RNZWFzdXJlQ29udGVzdCIsCiAgICAgICAgICAiQGlkIjogIm1lYXN1cmUtMTAxIiwKICAgICAgICAgICJFbGVjdGlvbkRpc3RyaWN0SWQiOiAiZGlzdHJpY3QtMiIsCiAgICAgICAgICAiTmFtZSI6ICJNZWFzdXJlIDEwMTogQ29sbGVnZSBEaXN0cmljdCIsCiAgICAgICAgICAiQmFsbG90VGl0bGUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJNZWFzdXJlIDEwMTogQ29sbGVnZSBEaXN0cmljdCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAiRnVsbFRleHQiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJUbyB1cGdyYWRlIGVkdWNhdGlvbmFsIGZhY2lsaXRpZXMgYXQgRGlhYmxvIFZhbGxleSwgYW5kIEZyYW5rbGluLCBDb2xsZWdlcywgYW5kIHRoZSBTYW4gQnJlbnR3b29kIGNlbnRlciwgYW5kIGhlbHAgcHJlcGFyZSBzdHVkZW50cyBmb3Igam9icyBhbmQgY29sbGVnZSB0cmFuc2ZlciBieSBtb2Rlcm5pemluZyBjbGFzc3Jvb21zIGFuZCBsYWJzLCBidWlsZGluZyBmYWNpbGl0aWVzIGZvciBoZWFsdGgsIG1lZGljYWwsIHNjaWVuY2UsIGFuZCB0ZWNobm9sb2d5IHRyYWluaW5nLCBhbmQgaW1wbGVtZW50aW5nIGluZnJhc3RydWN0dXJlIGltcHJvdmVtZW50cywgc2hhbGwgdGhlIEZyYW5rbGluIENvbW11bml0eSBDb2xsZWdlIERpc3RyaWN0IGlzc3VlICQ0NTAgbWlsbGlvbiBvZiBib25kcyBhdCBsZWdhbCBpbnRlcmVzdCByYXRlcyB3aXRoIGluZGVwZW5kZW50IG92ZXJzaWdodCwgYXVkaXRzLCBhbmQgYWxsIGZ1bmRzIHNwZW50IG9uIGxvY2FsIHNpdGVzPyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAiQ29udGVzdE9wdGlvbiI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkJhbGxvdE1lYXN1cmVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAibWVhc3VyZS0xMDEtb3B0aW9uLXllcyIsCiAgICAgICAgICAgICAgIlNlbGVjdGlvbiI6IHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAgICAgICAgICJDb250ZW50IjogIlllcyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkJhbGxvdE1lYXN1cmVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAibWVhc3VyZS0xMDEtb3B0aW9uLW5vIiwKICAgICAgICAgICAgICAiU2VsZWN0aW9uIjogewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAgICAgIkNvbnRlbnQiOiAiTm8iCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkJhbGxvdE1lYXN1cmVDb250ZXN0IiwKICAgICAgICAgICJAaWQiOiAiMTAyIiwKICAgICAgICAgICJFbGVjdGlvbkRpc3RyaWN0SWQiOiAiZGlzdHJpY3QtMSIsCiAgICAgICAgICAiTmFtZSI6ICJNZWFzdXJlIDEwMjogVmVoaWNsZSBBYmF0ZW1lbnQgUHJvZ3JhbSIsCiAgICAgICAgICAiQmFsbG90VGl0bGUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJNZWFzdXJlIDEwMjogVmVoaWNsZSBBYmF0ZW1lbnQgUHJvZ3JhbSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAiRnVsbFRleHQiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJTaG91bGQgdGhlIEZyYW5rbGluIENvdW50eSBWZWhpY2xlIEFiYXRlbWVudCBQcm9ncmFtIGFuZCB2ZWhpY2xlIHJlZ2lzdHJhdGlvbiBmZWVzIChvbmUgZG9sbGFyIHBlciB2ZWhpY2xlIGFuZCBhbiBhZGRpdGlvbmFsIHR3byBkb2xsYXJzIGZvciBjZXJ0YWluIGNvbW1lcmNpYWwgdmVoaWNsZXMgcGF5YWJsZSB1cG9uIHJlZ2lzdHJhdGlvbiBvZiBhIHZlaGljbGUpIGJlIHJlbmV3ZWQgZm9yIGEgdGVuLXllYXIgdGVybSBiZWdpbm5pbmcgSnVseSAxLCAyMDIxLCBmb3IgdGhlIGFiYXRlbWVudCBhbmQgcmVtb3ZhbCBvZiBhYmFuZG9uZWQsIHdyZWNrZWQsIGRpc21hbnRsZWQsIG9yIGlub3BlcmF0aXZlIHZlaGljbGVzPyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAiQ29udGVzdE9wdGlvbiI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkJhbGxvdE1lYXN1cmVPcHRpb24iLAogICAgICAgICAgICAgICJAaWQiOiAiMTAyLW9wdGlvbi15ZXMiLAogICAgICAgICAgICAgICJTZWxlY3Rpb24iOiB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJZZXMiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5CYWxsb3RNZWFzdXJlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogIjEwMi1vcHRpb24tbm8iLAogICAgICAgICAgICAgICJTZWxlY3Rpb24iOiB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJObyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlQ29udGVzdCIsCiAgICAgICAgICAiQGlkIjogIm1lYXN1cmUtNjY2IiwKICAgICAgICAgICJFbGVjdGlvbkRpc3RyaWN0SWQiOiAiZGlzdHJpY3QtMSIsCiAgICAgICAgICAiTmFtZSI6ICJNZWFzdXJlIDY2NjogUGFydHkgbm90IGFzc29jaWF0ZWQgd2l0aCBhbnkgYmFsbG90IHN0eWxlcyIsCiAgICAgICAgICAiQmFsbG90VGl0bGUiOiB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgICAgICJUZXh0IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAiQ29udGVudCI6ICJNZWFzdXJlIDY2NjogUGFydHkgbm90IGFzc29jaWF0ZWQgd2l0aCBhbnkgYmFsbG90IHN0eWxlcyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAiVm90ZXNBbGxvd2VkIjogMSwKICAgICAgICAgICJDb250ZXN0T3B0aW9uIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQ2FuZGlkYXRlT3B0aW9uIiwKICAgICAgICAgICAgICAiQGlkIjogIm1lYXN1cmUtNjY2LW9wdGlvbi13cml0ZS1pbi0xIiwKICAgICAgICAgICAgICAiSXNXcml0ZUluIjogdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgIlByaW1hcnlQYXJ0eUlkcyI6IFsiMiJdCiAgICAgICAgfQogICAgICBdLAogICAgICAiQmFsbG90U3R5bGUiOiBbCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQmFsbG90U3R5bGUiLAogICAgICAgICAgIkdwVW5pdElkcyI6IFsiMjMiLCAiMjEtc3BsaXQtMSJdLAogICAgICAgICAgIkV4dGVybmFsSWRlbnRpZmllciI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkV4dGVybmFsSWRlbnRpZmllciIsCiAgICAgICAgICAgICAgIlR5cGUiOiAic3RhdGUtbGV2ZWwiLAogICAgICAgICAgICAgICJWYWx1ZSI6ICIxMiIKICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uQmFsbG90U3R5bGUiLAogICAgICAgICAgIkdwVW5pdElkcyI6IFsiMjEtc3BsaXQtMiJdLAogICAgICAgICAgIkV4dGVybmFsSWRlbnRpZmllciI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkV4dGVybmFsSWRlbnRpZmllciIsCiAgICAgICAgICAgICAgIlR5cGUiOiAic3RhdGUtbGV2ZWwiLAogICAgICAgICAgICAgICJWYWx1ZSI6ICI1IgogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5CYWxsb3RTdHlsZSIsCiAgICAgICAgICAiR3BVbml0SWRzIjogWyIyMCJdLAogICAgICAgICAgIlBhcnR5SWRzIjogWyIzIl0sCiAgICAgICAgICAiRXh0ZXJuYWxJZGVudGlmaWVyIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uRXh0ZXJuYWxJZGVudGlmaWVyIiwKICAgICAgICAgICAgICAiVHlwZSI6ICJzdGF0ZS1sZXZlbCIsCiAgICAgICAgICAgICAgIlZhbHVlIjogIjdDIgogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfQogICAgICBdCiAgICB9CiAgXSwKICAiUGFydHkiOiBbCiAgICB7CiAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLlBhcnR5IiwKICAgICAgIkBpZCI6ICIwIiwKICAgICAgIk5hbWUiOiB7CiAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAiQ29udGVudCI6ICJGZWRlcmFsaXN0IFBhcnR5IgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgIkFiYnJldmlhdGlvbiI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIkYiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAidnhCYWxsb3RMYWJlbCI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIkZlZGVyYWxpc3QiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9CiAgICB9LAogICAgewogICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5QYXJ0eSIsCiAgICAgICJAaWQiOiAiMSIsCiAgICAgICJOYW1lIjogewogICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgIkNvbnRlbnQiOiAiUGVvcGxl4oCZcyBQYXJ0eSIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJBYmJyZXZpYXRpb24iOiB7CiAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAiQ29udGVudCI6ICJQIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgInZ4QmFsbG90TGFiZWwiOiB7CiAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAiQ29udGVudCI6ICJQZW9wbGXigJlzIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfQogICAgfSwKICAgIHsKICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uUGFydHkiLAogICAgICAiQGlkIjogIjIiLAogICAgICAiTmFtZSI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIkxpYmVydHkgUGFydHkiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAiQWJicmV2aWF0aW9uIjogewogICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgIkNvbnRlbnQiOiAiTGkiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAidnhCYWxsb3RMYWJlbCI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIkxpYmVydHkiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9CiAgICB9LAogICAgewogICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5QYXJ0eSIsCiAgICAgICJAaWQiOiAiMyIsCiAgICAgICJOYW1lIjogewogICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgIkNvbnRlbnQiOiAiQ29uc3RpdHV0aW9uIFBhcnR5IgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgIkFiYnJldmlhdGlvbiI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIkMiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAidnhCYWxsb3RMYWJlbCI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIkNvbnN0aXR1dGlvbiIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLlBhcnR5IiwKICAgICAgIkBpZCI6ICI0IiwKICAgICAgIk5hbWUiOiB7CiAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAiQ29udGVudCI6ICJXaGlnIFBhcnR5IgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgIkFiYnJldmlhdGlvbiI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIlciCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAidnhCYWxsb3RMYWJlbCI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIldoaWciCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9CiAgICB9LAogICAgewogICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5QYXJ0eSIsCiAgICAgICJAaWQiOiAiNSIsCiAgICAgICJOYW1lIjogewogICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgIkNvbnRlbnQiOiAiTGFib3IgUGFydHkiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAiQWJicmV2aWF0aW9uIjogewogICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgIkNvbnRlbnQiOiAiTGEiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAidnhCYWxsb3RMYWJlbCI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIkxhYm9yIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfQogICAgfSwKICAgIHsKICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uUGFydHkiLAogICAgICAiQGlkIjogIjYiLAogICAgICAiTmFtZSI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIkluZGVwZW5kZW50IFBhcnR5IgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgIkFiYnJldmlhdGlvbiI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIkkiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAidnhCYWxsb3RMYWJlbCI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIkluZGVwZW5kZW50IgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfQogICAgfSwKICAgIHsKICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uUGFydHkiLAogICAgICAiQGlkIjogIjciLAogICAgICAiTmFtZSI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIkRlbW9jcmF0aWMgUGFydHkiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAiQWJicmV2aWF0aW9uIjogewogICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgIkNvbnRlbnQiOiAiRCIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJ2eEJhbGxvdExhYmVsIjogewogICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgIkNvbnRlbnQiOiAiRGVtb2NyYXQiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9CiAgICB9LAogICAgewogICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5QYXJ0eSIsCiAgICAgICJAaWQiOiAiOCIsCiAgICAgICJOYW1lIjogewogICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgIkNvbnRlbnQiOiAiUmVwdWJsaWNhbiBQYXJ0eSIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJBYmJyZXZpYXRpb24iOiB7CiAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAiQ29udGVudCI6ICJSIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgInZ4QmFsbG90TGFiZWwiOiB7CiAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAiQ29udGVudCI6ICJSZXB1YmxpY2FuIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfQogICAgfQogIF0sCiAgIkdwVW5pdCI6IFsKICAgIHsKICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uUmVwb3J0aW5nVW5pdCIsCiAgICAgICJAaWQiOiAic3RhdGUtb2YtaGFtaWx0b24iLAogICAgICAiTmFtZSI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIlN0YXRlIG9mIEhhbWlsdG9uIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgIlR5cGUiOiAic3RhdGUiLAogICAgICAiQ29tcG9zaW5nR3BVbml0SWRzIjogWyJmcmFua2xpbiJdCiAgICB9LAogICAgewogICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5SZXBvcnRpbmdVbml0IiwKICAgICAgIkBpZCI6ICJmcmFua2xpbiIsCiAgICAgICJOYW1lIjogewogICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgIkNvbnRlbnQiOiAiRnJhbmtsaW4gQ291bnR5IgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgIlR5cGUiOiAiY291bnR5IiwKICAgICAgIkNvbXBvc2luZ0dwVW5pdElkcyI6IFsKICAgICAgICAiZGlzdHJpY3QtMSIsCiAgICAgICAgImRpc3RyaWN0LTIiLAogICAgICAgICJkaXN0cmljdC0zIiwKICAgICAgICAiZGlzdHJpY3QtNyIKICAgICAgXQogICAgfSwKICAgIHsKICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uUmVwb3J0aW5nVW5pdCIsCiAgICAgICJAaWQiOiAiZGlzdHJpY3QtMSIsCiAgICAgICJOYW1lIjogewogICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgIkNvbnRlbnQiOiAiRGlzdHJpY3QgMSIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJUeXBlIjogIm90aGVyIiwKICAgICAgIkNvbXBvc2luZ0dwVW5pdElkcyI6IFsiMjMiLCAiMjEtc3BsaXQtMSIsICIyMS1zcGxpdC0yIl0KICAgIH0sCiAgICB7CiAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLlJlcG9ydGluZ1VuaXQiLAogICAgICAiQGlkIjogImRpc3RyaWN0LTIiLAogICAgICAiTmFtZSI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIkRpc3RyaWN0IDIiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAiVHlwZSI6ICJvdGhlciIsCiAgICAgICJDb21wb3NpbmdHcFVuaXRJZHMiOiBbIjIzIiwgIjIxLXNwbGl0LTEiXQogICAgfSwKICAgIHsKICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uUmVwb3J0aW5nVW5pdCIsCiAgICAgICJAaWQiOiAiZGlzdHJpY3QtMyIsCiAgICAgICJOYW1lIjogewogICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgIkNvbnRlbnQiOiAiRGlzdHJpY3QgMyIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJUeXBlIjogIm90aGVyIiwKICAgICAgIkNvbXBvc2luZ0dwVW5pdElkcyI6IFtdCiAgICB9LAogICAgewogICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5SZXBvcnRpbmdVbml0IiwKICAgICAgIkBpZCI6ICJkaXN0cmljdC03IiwKICAgICAgIk5hbWUiOiB7CiAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uSW50ZXJuYXRpb25hbGl6ZWRUZXh0IiwKICAgICAgICAiVGV4dCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uTGFuZ3VhZ2VTdHJpbmciLAogICAgICAgICAgICAiTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAiQ29udGVudCI6ICJEaXN0cmljdCA3IgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgIlR5cGUiOiAib3RoZXIiLAogICAgICAiQ29tcG9zaW5nR3BVbml0SWRzIjogWyIyMCJdCiAgICB9LAogICAgewogICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5SZXBvcnRpbmdVbml0IiwKICAgICAgIkBpZCI6ICIyMyIsCiAgICAgICJOYW1lIjogewogICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgIkNvbnRlbnQiOiAiQ2VudGVyIFNwcmluZ2ZpZWxkIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgIlR5cGUiOiAicHJlY2luY3QiCiAgICB9LAogICAgewogICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5SZXBvcnRpbmdVbml0IiwKICAgICAgIkBpZCI6ICIyMSIsCiAgICAgICJOYW1lIjogewogICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgIkNvbnRlbnQiOiAiTm9ydGggU3ByaW5nZmllbGQiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAiVHlwZSI6ICJwcmVjaW5jdCIsCiAgICAgICJDb21wb3NpbmdHcFVuaXRJZHMiOiBbIjIxLXNwbGl0LTEiLCAiMjEtc3BsaXQtMiJdCiAgICB9LAogICAgewogICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5SZXBvcnRpbmdVbml0IiwKICAgICAgIkBpZCI6ICIyMCIsCiAgICAgICJOYW1lIjogewogICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgIkNvbnRlbnQiOiAiU291dGggU3ByaW5nZmllbGQiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAiVHlwZSI6ICJwcmVjaW5jdCIKICAgIH0sCiAgICB7CiAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLlJlcG9ydGluZ1VuaXQiLAogICAgICAiQGlkIjogIjIxLXNwbGl0LTEiLAogICAgICAiTmFtZSI6IHsKICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5JbnRlcm5hdGlvbmFsaXplZFRleHQiLAogICAgICAgICJUZXh0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5MYW5ndWFnZVN0cmluZyIsCiAgICAgICAgICAgICJMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJDb250ZW50IjogIk5vcnRoIFNwcmluZ2ZpZWxkIC0gU3BsaXQgMSIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJUeXBlIjogInNwbGl0LXByZWNpbmN0IgogICAgfSwKICAgIHsKICAgICAgIkB0eXBlIjogIkJhbGxvdERlZmluaXRpb24uUmVwb3J0aW5nVW5pdCIsCiAgICAgICJAaWQiOiAiMjEtc3BsaXQtMiIsCiAgICAgICJOYW1lIjogewogICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkludGVybmF0aW9uYWxpemVkVGV4dCIsCiAgICAgICAgIlRleHQiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkxhbmd1YWdlU3RyaW5nIiwKICAgICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgICAgIkNvbnRlbnQiOiAiTm9ydGggU3ByaW5nZmllbGQgLSBTcGxpdCAyIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgIlR5cGUiOiAic3BsaXQtcHJlY2luY3QiCiAgICB9CiAgXSwKICAiQmFsbG90Rm9ybWF0IjogWwogICAgewogICAgICAiQHR5cGUiOiAiQmFsbG90RGVmaW5pdGlvbi5CYWxsb3RGb3JtYXQiLAogICAgICAiQGlkIjogImJhbGxvdC1mb3JtYXQiLAogICAgICAiRXh0ZXJuYWxJZGVudGlmaWVyIjogWwogICAgICAgIHsKICAgICAgICAgICJAdHlwZSI6ICJCYWxsb3REZWZpbml0aW9uLkV4dGVybmFsSWRlbnRpZmllciIsCiAgICAgICAgICAiVHlwZSI6ICJvdGhlciIsCiAgICAgICAgICAiVmFsdWUiOiAiYmFsbG90LWZvcm1hdCIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJNZWFzdXJlbWVudFVuaXQiOiAiaW4iLAogICAgICAiU2hvcnRFZGdlIjogOC41LAogICAgICAiTG9uZ0VkZ2UiOiAxMSwKICAgICAgIk9yaWVudGF0aW9uIjogInBvcnRyYWl0IiwKICAgICAgIlNlbGVjdGlvbkNhcHR1cmVNZXRob2QiOiAib21yIgogICAgfQogIF0sCiAgIkdlbmVyYXRlZERhdGUiOiAiMjAyMC0xMS0wM1QwMDowMDowMFoiLAogICJJc3N1ZXIiOiAiVm90aW5nV29ya3MiLAogICJJc3N1ZXJBYmJyZXZpYXRpb24iOiAiVlgiLAogICJWZW5kb3JBcHBsaWNhdGlvbklkIjogIlZ4U3VpdGUiLAogICJWZXJzaW9uIjogIjEuMC4wIiwKICAiU2VxdWVuY2VTdGFydCI6IDEsCiAgIlNlcXVlbmNlRW5kIjogMQp9Cg==';

/**
 * MIME type of data/electionSampleCDF.json.
 */
export const mimeType = 'application/json';

/**
 * Path to a file containing this file's contents.
 *
 * SHA-256 hash of file data: 5f9be00c4d77fdc8a8c573ecdc5959181e924d207f4eb7b8243a9abc2a1073ae
 */
export function asFilePath(): string {
  const directoryPath = mkdtempSync(tmpdir() + sep);
  const filePath = join(directoryPath, 'electionSampleCDF.json');
  writeFileSync(filePath, asBuffer());
  return filePath;
}

/**
 * Convert to a `data:` URL of data/electionSampleCDF.json, suitable for embedding in HTML.
 *
 * SHA-256 hash of file data: 5f9be00c4d77fdc8a8c573ecdc5959181e924d207f4eb7b8243a9abc2a1073ae
 */
export function asDataUrl(): string {
  return `data:${mimeType};base64,${resourceDataBase64}`;
}

/**
 * Raw data of data/electionSampleCDF.json.
 *
 * SHA-256 hash of file data: 5f9be00c4d77fdc8a8c573ecdc5959181e924d207f4eb7b8243a9abc2a1073ae
 */
export function asBuffer(): Buffer {
  return Buffer.from(resourceDataBase64, 'base64');
}

/**
 * Text content of data/electionSampleCDF.json.
 *
 * SHA-256 hash of file data: 5f9be00c4d77fdc8a8c573ecdc5959181e924d207f4eb7b8243a9abc2a1073ae
 */
export function asText(): string {
  return asBuffer().toString('utf-8');
}

/**
 * Full election definition for data/electionSampleCDF.json.
 *
 * SHA-256 hash of file data: 5f9be00c4d77fdc8a8c573ecdc5959181e924d207f4eb7b8243a9abc2a1073ae
 */
export const electionDefinition = safeParseElectionDefinition(
  asText()
).unsafeUnwrap();

/**
 * Election definition for data/electionSampleCDF.json.
 *
 * SHA-256 hash of file data: 5f9be00c4d77fdc8a8c573ecdc5959181e924d207f4eb7b8243a9abc2a1073ae
 */
export const election = electionDefinition.election;

/**
 * Ballot package for data/electionSampleCDF.json.
 *
 * SHA-256 hash of file data: 5f9be00c4d77fdc8a8c573ecdc5959181e924d207f4eb7b8243a9abc2a1073ae
 */
export function toBallotPackage(systemSettings = DEFAULT_SYSTEM_SETTINGS): BallotPackage {
  return {
    electionDefinition,
    systemSettings,
  };
}