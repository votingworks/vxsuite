/* Generated by res-to-ts. DO NOT EDIT */
/* eslint-disable */
/* istanbul ignore file */

import { Buffer } from 'buffer';
import { safeParseElectionDefinition } from '@votingworks/types';

/**
 * Data of data/electionFamousNames2021/election.json encoded as base64.
 *
 * SHA-256 hash of file data: da81438d51136692b43c3daab350b572a8aea13f8706db1ef3ec4573e37a21f1
 */
const resourceDataBase64 = '';

/**
 * MIME type of data/electionFamousNames2021/election.json.
 */
export const mimeType = 'application/json';

/**
 * Convert to a `data:` URL of data/electionFamousNames2021/election.json, suitable for embedding in HTML.
 *
 * SHA-256 hash of file data: da81438d51136692b43c3daab350b572a8aea13f8706db1ef3ec4573e37a21f1
 */
export function asDataUrl() {
  return `data:${mimeType};base64,${resourceDataBase64}`;
}

/**
 * Raw data of data/electionFamousNames2021/election.json.
 *
 * SHA-256 hash of file data: da81438d51136692b43c3daab350b572a8aea13f8706db1ef3ec4573e37a21f1
 */
export function asBuffer(): Buffer {
  return Buffer.from(resourceDataBase64, 'base64');
}

/**
 * Text content of data/electionFamousNames2021/election.json.
 *
 * SHA-256 hash of file data: da81438d51136692b43c3daab350b572a8aea13f8706db1ef3ec4573e37a21f1
 */
export function asText(): string {
  return asBuffer().toString('utf-8');
}

/**
 * Full election definition for data/electionFamousNames2021/election.json.
 *
 * SHA-256 hash of file data: da81438d51136692b43c3daab350b572a8aea13f8706db1ef3ec4573e37a21f1
 */
export const electionDefinition = safeParseElectionDefinition(
  asText()
).unsafeUnwrap();

/**
 * Election definition for data/electionFamousNames2021/election.json.
 *
 * SHA-256 hash of file data: da81438d51136692b43c3daab350b572a8aea13f8706db1ef3ec4573e37a21f1
 */
export const election = electionDefinition.election;