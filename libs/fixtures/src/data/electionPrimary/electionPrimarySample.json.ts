/* Generated by res-to-ts. DO NOT EDIT */
/* eslint-disable */
/* istanbul ignore file */

import { Buffer } from 'buffer';
import { mkdtempSync, writeFileSync } from 'fs';
import { tmpdir } from 'os';
import { join, sep } from 'path';
import { safeParseElectionDefinition } from '@votingworks/types';

/**
 * Data of data/electionPrimary/electionPrimarySample.json encoded as base64.
 *
 * SHA-256 hash of file data: df7551468ce8e546ed20c57d4cd1186c2a31563547139e4533092e66be93d913
 */
const resourceDataBase64 = '';

/**
 * MIME type of data/electionPrimary/electionPrimarySample.json.
 */
export const mimeType = 'application/json';

/**
 * Path to a file containing this file's contents.
 *
 * SHA-256 hash of file data: df7551468ce8e546ed20c57d4cd1186c2a31563547139e4533092e66be93d913
 */
export function asFilePath(): string {
  const directoryPath = mkdtempSync(tmpdir() + sep);
  const filePath = join(directoryPath, 'electionPrimarySample.json');
  writeFileSync(filePath, asBuffer());
  return filePath;
}

/**
 * Convert to a `data:` URL of data/electionPrimary/electionPrimarySample.json, suitable for embedding in HTML.
 *
 * SHA-256 hash of file data: df7551468ce8e546ed20c57d4cd1186c2a31563547139e4533092e66be93d913
 */
export function asDataUrl(): string {
  return `data:${mimeType};base64,${resourceDataBase64}`;
}

/**
 * Raw data of data/electionPrimary/electionPrimarySample.json.
 *
 * SHA-256 hash of file data: df7551468ce8e546ed20c57d4cd1186c2a31563547139e4533092e66be93d913
 */
export function asBuffer(): Buffer {
  return Buffer.from(resourceDataBase64, 'base64');
}

/**
 * Text content of data/electionPrimary/electionPrimarySample.json.
 *
 * SHA-256 hash of file data: df7551468ce8e546ed20c57d4cd1186c2a31563547139e4533092e66be93d913
 */
export function asText(): string {
  return asBuffer().toString('utf-8');
}

/**
 * Full election definition for data/electionPrimary/electionPrimarySample.json.
 *
 * SHA-256 hash of file data: df7551468ce8e546ed20c57d4cd1186c2a31563547139e4533092e66be93d913
 */
export const electionDefinition = safeParseElectionDefinition(
  asText()
).unsafeUnwrap();

/**
 * Election definition for data/electionPrimary/electionPrimarySample.json.
 *
 * SHA-256 hash of file data: df7551468ce8e546ed20c57d4cd1186c2a31563547139e4533092e66be93d913
 */
export const election = electionDefinition.election;