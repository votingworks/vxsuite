/* Generated by res-to-ts. DO NOT EDIT */
/* eslint-disable */
/* istanbul ignore file */

import { Buffer } from 'buffer';
import { mkdtempSync, writeFileSync } from 'fs';
import { tmpdir } from 'os';
import { join, sep } from 'path';
import { safeParseElectionDefinition } from '@votingworks/types';

/**
 * Data of data/electionGridLayout/election.json encoded as base64.
 *
 * SHA-256 hash of file data: b0c77fefe5e00f13071ec70c09ea2d04c96fd56a5b0a3aae3f063962a404c5a2
 */
const resourceDataBase64 = 'ewogICJiYWxsb3RMYXlvdXQiOiB7CiAgICAicGFwZXJTaXplIjogImxldHRlciIsCiAgICAidGFyZ2V0TWFya1Bvc2l0aW9uIjogInJpZ2h0IgogIH0sCiAgImJhbGxvdFN0eWxlcyI6IFsKICAgIHsKICAgICAgImlkIjogImNhcmQtbnVtYmVyLTMiLAogICAgICAicHJlY2luY3RzIjogWyJ0b3duLWlkLTAwNzAxLXByZWNpbmN0LWlkLSJdLAogICAgICAiZGlzdHJpY3RzIjogWyJ0b3duLWlkLTAwNzAxLXByZWNpbmN0LWlkLSJdCiAgICB9CiAgXSwKICAiY2VudHJhbFNjYW5BZGp1ZGljYXRpb25SZWFzb25zIjogWwogICAgIlVuaW50ZXJwcmV0YWJsZUJhbGxvdCIsCiAgICAiT3ZlcnZvdGUiLAogICAgIkJsYW5rQmFsbG90IgogIF0sCiAgImNvbnRlc3RzIjogWwogICAgewogICAgICAiaWQiOiAiR292ZXJub3ItMDYxYTQwMWIiLAogICAgICAiZGlzdHJpY3RJZCI6ICJ0b3duLWlkLTAwNzAxLXByZWNpbmN0LWlkLSIsCiAgICAgICJzZWN0aW9uIjogIkdvdmVybm9yIiwKICAgICAgInRpdGxlIjogIkdvdmVybm9yIiwKICAgICAgInR5cGUiOiAiY2FuZGlkYXRlIiwKICAgICAgInNlYXRzIjogMSwKICAgICAgImNhbmRpZGF0ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImlkIjogIkpvc2lhaC1CYXJ0bGV0dC0xYmI5OTk4NSIsCiAgICAgICAgICAibmFtZSI6ICJKb3NpYWggQmFydGxldHQiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJEZW1vY3JhdGljLWFlYTIwYWRiIl0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJIYW5uYWgtRHVzdGluLWFiNGVmN2M4IiwKICAgICAgICAgICJuYW1lIjogIkhhbm5haCBEdXN0aW4iLAogICAgICAgICAgInBhcnR5SWRzIjogWyJSZXB1YmxpY2FuLWYwMTY3Y2U3Il0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJKb2huLVNwZW5jZXItOWZmYjU5NzAiLAogICAgICAgICAgIm5hbWUiOiAiSm9obiBTcGVuY2VyIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsiT0MtM2EzODZkMmIiXQogICAgICAgIH0KICAgICAgXSwKICAgICAgImFsbG93V3JpdGVJbnMiOiB0cnVlCiAgICB9LAogICAgewogICAgICAiaWQiOiAiVW5pdGVkLVN0YXRlcy1TZW5hdG9yLWQzZjFjNzViIiwKICAgICAgImRpc3RyaWN0SWQiOiAidG93bi1pZC0wMDcwMS1wcmVjaW5jdC1pZC0iLAogICAgICAic2VjdGlvbiI6ICJVbml0ZWQgU3RhdGVzIFNlbmF0b3IiLAogICAgICAidGl0bGUiOiAiVW5pdGVkIFN0YXRlcyBTZW5hdG9yIiwKICAgICAgInR5cGUiOiAiY2FuZGlkYXRlIiwKICAgICAgInNlYXRzIjogMSwKICAgICAgImNhbmRpZGF0ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImlkIjogIkpvaG4tTGFuZ2Rvbi01OTUxYzhlMSIsCiAgICAgICAgICAibmFtZSI6ICJKb2huIExhbmdkb24iLAogICAgICAgICAgInBhcnR5SWRzIjogWyJEZW1vY3JhdGljLWFlYTIwYWRiIl0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJXaWxsaWFtLVByZXN0b24tMzc3OGZjZDUiLAogICAgICAgICAgIm5hbWUiOiAiV2lsbGlhbSBQcmVzdG9uIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsiUmVwdWJsaWNhbi1mMDE2N2NlNyJdCiAgICAgICAgfQogICAgICBdLAogICAgICAiYWxsb3dXcml0ZUlucyI6IHRydWUKICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJSZXByZXNlbnRhdGl2ZS1pbi1Db25ncmVzcy0yNDY4M2I0NCIsCiAgICAgICJkaXN0cmljdElkIjogInRvd24taWQtMDA3MDEtcHJlY2luY3QtaWQtIiwKICAgICAgInNlY3Rpb24iOiAiUmVwcmVzZW50YXRpdmUgaW4gQ29uZ3Jlc3MiLAogICAgICAidGl0bGUiOiAiUmVwcmVzZW50YXRpdmUgaW4gQ29uZ3Jlc3MiLAogICAgICAidHlwZSI6ICJjYW5kaWRhdGUiLAogICAgICAic2VhdHMiOiAxLAogICAgICAiY2FuZGlkYXRlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiSmVyZW1pYWgtU21pdGgtNDY5NTYwYzkiLAogICAgICAgICAgIm5hbWUiOiAiSmVyZW1pYWggU21pdGgiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJEZW1vY3JhdGljLWFlYTIwYWRiIl0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJOaWNob2xhcy1HaWxtYW4tMTc5MWFlZDciLAogICAgICAgICAgIm5hbWUiOiAiTmljaG9sYXMgR2lsbWFuIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsiUmVwdWJsaWNhbi1mMDE2N2NlNyJdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiUmljaGFyZC1Db290ZS1iOTA5NTYzNiIsCiAgICAgICAgICAibmFtZSI6ICJSaWNoYXJkIENvb3RlIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsiT0MtM2EzODZkMmIiXQogICAgICAgIH0KICAgICAgXSwKICAgICAgImFsbG93V3JpdGVJbnMiOiB0cnVlCiAgICB9LAogICAgewogICAgICAiaWQiOiAiRXhlY3V0aXZlLUNvdW5jaWxvci1iYjIyNTU3ZiIsCiAgICAgICJkaXN0cmljdElkIjogInRvd24taWQtMDA3MDEtcHJlY2luY3QtaWQtIiwKICAgICAgInNlY3Rpb24iOiAiRXhlY3V0aXZlIENvdW5jaWxvciIsCiAgICAgICJ0aXRsZSI6ICJFeGVjdXRpdmUgQ291bmNpbG9yIiwKICAgICAgInR5cGUiOiAiY2FuZGlkYXRlIiwKICAgICAgInNlYXRzIjogMSwKICAgICAgImNhbmRpZGF0ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImlkIjogIkFubmUtV2FsZHJvbi1lZTBjYmM4NSIsCiAgICAgICAgICAibmFtZSI6ICJBbm5lIFdhbGRyb24iLAogICAgICAgICAgInBhcnR5SWRzIjogWyJEZW1vY3JhdGljLWFlYTIwYWRiIl0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJEYW5pZWwtV2Vic3Rlci0xM2Y3N2IyZCIsCiAgICAgICAgICAibmFtZSI6ICJEYW5pZWwgV2Vic3RlciIsCiAgICAgICAgICAicGFydHlJZHMiOiBbIlJlcHVibGljYW4tZjAxNjdjZTciXQogICAgICAgIH0KICAgICAgXSwKICAgICAgImFsbG93V3JpdGVJbnMiOiB0cnVlCiAgICB9LAogICAgewogICAgICAiaWQiOiAiU3RhdGUtU2VuYXRvci0zOTEzODFmOCIsCiAgICAgICJkaXN0cmljdElkIjogInRvd24taWQtMDA3MDEtcHJlY2luY3QtaWQtIiwKICAgICAgInNlY3Rpb24iOiAiU3RhdGUgU2VuYXRvciIsCiAgICAgICJ0aXRsZSI6ICJTdGF0ZSBTZW5hdG9yIiwKICAgICAgInR5cGUiOiAiY2FuZGlkYXRlIiwKICAgICAgInNlYXRzIjogMSwKICAgICAgImNhbmRpZGF0ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImlkIjogIkphbWVzLVBvb2xlLWRiNWVmNGJkIiwKICAgICAgICAgICJuYW1lIjogIkphbWVzIFBvb2xlIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsiRGVtb2NyYXRpYy1hZWEyMGFkYiJdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiTWF0dGhldy1UaG9ybnRvbi1mNjZmZWM1ZSIsCiAgICAgICAgICAibmFtZSI6ICJNYXR0aGV3IFRob3JudG9uIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsiUmVwdWJsaWNhbi1mMDE2N2NlNyJdCiAgICAgICAgfQogICAgICBdLAogICAgICAiYWxsb3dXcml0ZUlucyI6IHRydWUKICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJTdGF0ZS1SZXByZXNlbnRhdGl2ZXMtSGlsbHNib3JvdWdoLURpc3RyaWN0LTM0LWIxMDEyZDM4IiwKICAgICAgImRpc3RyaWN0SWQiOiAidG93bi1pZC0wMDcwMS1wcmVjaW5jdC1pZC0iLAogICAgICAic2VjdGlvbiI6ICJTdGF0ZSBSZXByZXNlbnRhdGl2ZXMgIEhpbGxzYm9yb3VnaCBEaXN0cmljdCAzNCIsCiAgICAgICJ0aXRsZSI6ICJTdGF0ZSBSZXByZXNlbnRhdGl2ZXMgIEhpbGxzYm9yb3VnaCBEaXN0cmljdCAzNCIsCiAgICAgICJ0eXBlIjogImNhbmRpZGF0ZSIsCiAgICAgICJzZWF0cyI6IDMsCiAgICAgICJjYW5kaWRhdGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJPYmFkaWFoLUNhcnJpZ2FuLTVjOTUxNDVhIiwKICAgICAgICAgICJuYW1lIjogIk9iYWRpYWggQ2FycmlnYW4iLAogICAgICAgICAgInBhcnR5SWRzIjogWyJEZW1vY3JhdGljLWFlYTIwYWRiIl0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJNYXJ5LUJha2VyLUVkZHktMzUwNzg1ZDUiLAogICAgICAgICAgIm5hbWUiOiAiTWFyeSBCYWtlciBFZGR5IiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsiRGVtb2NyYXRpYy1hZWEyMGFkYiJdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiU2FtdWVsLUJlbGwtMTc5NzMyNzUiLAogICAgICAgICAgIm5hbWUiOiAiU2FtdWVsIEJlbGwiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJEZW1vY3JhdGljLWFlYTIwYWRiIl0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJTYW11ZWwtTGl2ZXJtb3JlLWY5MjdmZWYxIiwKICAgICAgICAgICJuYW1lIjogIlNhbXVlbCBMaXZlcm1vcmUiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJSZXB1YmxpY2FuLWYwMTY3Y2U3Il0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJFbGlqYWgtTWlsbGVyLWE1MmU2OTg4IiwKICAgICAgICAgICJuYW1lIjogIkVsaWphaCBNaWxsZXIiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJSZXB1YmxpY2FuLWYwMTY3Y2U3Il0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJJc2FhYy1IaWxsLWQ2YzlkZWViIiwKICAgICAgICAgICJuYW1lIjogIklzYWFjIEhpbGwiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJSZXB1YmxpY2FuLWYwMTY3Y2U3Il0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJBYmlnYWlsLUJhcnRsZXR0LTRlNDZjOWQ0IiwKICAgICAgICAgICJuYW1lIjogIkFiaWdhaWwgQmFydGxldHQiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJPQy0zYTM4NmQyYiJdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiSmFjb2ItRnJlZXNlLWI1MTQ2NTA1IiwKICAgICAgICAgICJuYW1lIjogIkphY29iIEZyZWVzZSIsCiAgICAgICAgICAicGFydHlJZHMiOiBbIk9DLTNhMzg2ZDJiIl0KICAgICAgICB9CiAgICAgIF0sCiAgICAgICJhbGxvd1dyaXRlSW5zIjogdHJ1ZQogICAgfSwKICAgIHsKICAgICAgImlkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlLUhpbGxzYm9yb3VnaC1EaXN0cmljdC0zNy1mM2JkZTg5NCIsCiAgICAgICJkaXN0cmljdElkIjogInRvd24taWQtMDA3MDEtcHJlY2luY3QtaWQtIiwKICAgICAgInNlY3Rpb24iOiAiU3RhdGUgUmVwcmVzZW50YXRpdmUgIEhpbGxzYm9yb3VnaCBEaXN0cmljdCAzNyIsCiAgICAgICJ0aXRsZSI6ICJTdGF0ZSBSZXByZXNlbnRhdGl2ZSAgSGlsbHNib3JvdWdoIERpc3RyaWN0IDM3IiwKICAgICAgInR5cGUiOiAiY2FuZGlkYXRlIiwKICAgICAgInNlYXRzIjogMSwKICAgICAgImNhbmRpZGF0ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImlkIjogIkFiZWlsLUZvc3Rlci1kZWQzOGUzNiIsCiAgICAgICAgICAibmFtZSI6ICJBYmVpbCBGb3N0ZXIiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJEZW1vY3JhdGljLWFlYTIwYWRiIl0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJDaGFybGVzLUgtSGVyc2V5LTA5NjI4NmE0IiwKICAgICAgICAgICJuYW1lIjogIkNoYXJsZXMgSC4gSGVyc2V5IiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsiUmVwdWJsaWNhbi1mMDE2N2NlNyJdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiV2lsbGlhbS1Mb3Zlam95LWZkZTNjMmRmIiwKICAgICAgICAgICJuYW1lIjogIldpbGxpYW0gTG92ZWpveSIsCiAgICAgICAgICAicGFydHlJZHMiOiBbIk9DLTNhMzg2ZDJiIl0KICAgICAgICB9CiAgICAgIF0sCiAgICAgICJhbGxvd1dyaXRlSW5zIjogdHJ1ZQogICAgfSwKICAgIHsKICAgICAgImlkIjogIlNoZXJpZmYtNDI0M2ZlMGIiLAogICAgICAiZGlzdHJpY3RJZCI6ICJ0b3duLWlkLTAwNzAxLXByZWNpbmN0LWlkLSIsCiAgICAgICJzZWN0aW9uIjogIlNoZXJpZmYiLAogICAgICAidGl0bGUiOiAiU2hlcmlmZiIsCiAgICAgICJ0eXBlIjogImNhbmRpZGF0ZSIsCiAgICAgICJzZWF0cyI6IDEsCiAgICAgICJjYW5kaWRhdGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJFZHdhcmQtUmFuZG9scGgtYmY0Yzg0OGEiLAogICAgICAgICAgIm5hbWUiOiAiRWR3YXJkIFJhbmRvbHBoIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsiRGVtb2NyYXRpYy1hZWEyMGFkYiIsICJSZXB1YmxpY2FuLWYwMTY3Y2U3Il0KICAgICAgICB9CiAgICAgIF0sCiAgICAgICJhbGxvd1dyaXRlSW5zIjogdHJ1ZQogICAgfSwKICAgIHsKICAgICAgImlkIjogIkNvdW50eS1BdHRvcm5leS0xMzNmOTEwZiIsCiAgICAgICJkaXN0cmljdElkIjogInRvd24taWQtMDA3MDEtcHJlY2luY3QtaWQtIiwKICAgICAgInNlY3Rpb24iOiAiQ291bnR5IEF0dG9ybmV5IiwKICAgICAgInRpdGxlIjogIkNvdW50eSBBdHRvcm5leSIsCiAgICAgICJ0eXBlIjogImNhbmRpZGF0ZSIsCiAgICAgICJzZWF0cyI6IDEsCiAgICAgICJjYW5kaWRhdGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJFenJhLUJhcnRsZXR0LThmOTUyMjNjIiwKICAgICAgICAgICJuYW1lIjogIkV6cmEgQmFydGxldHQiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJEZW1vY3JhdGljLWFlYTIwYWRiIl0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJNYXJ5LVdvb2xzb24tZGMwYjg1NGEiLAogICAgICAgICAgIm5hbWUiOiAiTWFyeSBXb29sc29uIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsiUmVwdWJsaWNhbi1mMDE2N2NlNyJdCiAgICAgICAgfQogICAgICBdLAogICAgICAiYWxsb3dXcml0ZUlucyI6IHRydWUKICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJDb3VudHktVHJlYXN1cmVyLTg3ZDI1YTMxIiwKICAgICAgImRpc3RyaWN0SWQiOiAidG93bi1pZC0wMDcwMS1wcmVjaW5jdC1pZC0iLAogICAgICAic2VjdGlvbiI6ICJDb3VudHkgVHJlYXN1cmVyIiwKICAgICAgInRpdGxlIjogIkNvdW50eSBUcmVhc3VyZXIiLAogICAgICAidHlwZSI6ICJjYW5kaWRhdGUiLAogICAgICAic2VhdHMiOiAxLAogICAgICAiY2FuZGlkYXRlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiSm9obi1TbWl0aC1lZjYxYTU3OSIsCiAgICAgICAgICAibmFtZSI6ICJKb2huIFNtaXRoIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsiRGVtb2NyYXRpYy1hZWEyMGFkYiJdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiSmFuZS1Kb25lcy05Y2FhMTQxZiIsCiAgICAgICAgICAibmFtZSI6ICJKYW5lIEpvbmVzIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsiUmVwdWJsaWNhbi1mMDE2N2NlNyJdCiAgICAgICAgfQogICAgICBdLAogICAgICAiYWxsb3dXcml0ZUlucyI6IHRydWUKICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJSZWdpc3Rlci1vZi1EZWVkcy1hMTI3OGRmMiIsCiAgICAgICJkaXN0cmljdElkIjogInRvd24taWQtMDA3MDEtcHJlY2luY3QtaWQtIiwKICAgICAgInNlY3Rpb24iOiAiUmVnaXN0ZXIgb2YgRGVlZHMiLAogICAgICAidGl0bGUiOiAiUmVnaXN0ZXIgb2YgRGVlZHMiLAogICAgICAidHlwZSI6ICJjYW5kaWRhdGUiLAogICAgICAic2VhdHMiOiAxLAogICAgICAiY2FuZGlkYXRlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiSm9obi1NYW5uLWI1NmJiZGQzIiwKICAgICAgICAgICJuYW1lIjogIkpvaG4gTWFubiIsCiAgICAgICAgICAicGFydHlJZHMiOiBbIkRlbW9jcmF0aWMtYWVhMjBhZGIiXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImlkIjogIkVsbGVuLUEtU3RpbGVtYW4tMTQ0MDg3MzciLAogICAgICAgICAgIm5hbWUiOiAiRWxsZW4gQS4gU3RpbGVtYW4iLAogICAgICAgICAgInBhcnR5SWRzIjogWyJSZXB1YmxpY2FuLWYwMTY3Y2U3Il0KICAgICAgICB9CiAgICAgIF0sCiAgICAgICJhbGxvd1dyaXRlSW5zIjogdHJ1ZQogICAgfSwKICAgIHsKICAgICAgImlkIjogIlJlZ2lzdGVyLW9mLVByb2JhdGUtYTQxMTdkYTgiLAogICAgICAiZGlzdHJpY3RJZCI6ICJ0b3duLWlkLTAwNzAxLXByZWNpbmN0LWlkLSIsCiAgICAgICJzZWN0aW9uIjogIlJlZ2lzdGVyIG9mIFByb2JhdGUiLAogICAgICAidGl0bGUiOiAiUmVnaXN0ZXIgb2YgUHJvYmF0ZSIsCiAgICAgICJ0eXBlIjogImNhbmRpZGF0ZSIsCiAgICAgICJzZWF0cyI6IDEsCiAgICAgICJjYW5kaWRhdGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJOYXRoYW5pZWwtUGFya2VyLTU2YTA2YzI5IiwKICAgICAgICAgICJuYW1lIjogIk5hdGhhbmllbCBQYXJrZXIiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJEZW1vY3JhdGljLWFlYTIwYWRiIl0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJDbGFpcmUtQ3V0dHMtMDdhNDM2ZTciLAogICAgICAgICAgIm5hbWUiOiAiQ2xhaXJlIEN1dHRzIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsiUmVwdWJsaWNhbi1mMDE2N2NlNyJdCiAgICAgICAgfQogICAgICBdLAogICAgICAiYWxsb3dXcml0ZUlucyI6IHRydWUKICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJDb3VudHktQ29tbWlzc2lvbmVyLWQ2ZmVlZDI1IiwKICAgICAgImRpc3RyaWN0SWQiOiAidG93bi1pZC0wMDcwMS1wcmVjaW5jdC1pZC0iLAogICAgICAic2VjdGlvbiI6ICJDb3VudHkgQ29tbWlzc2lvbmVyIiwKICAgICAgInRpdGxlIjogIkNvdW50eSBDb21taXNzaW9uZXIiLAogICAgICAidHlwZSI6ICJjYW5kaWRhdGUiLAogICAgICAic2VhdHMiOiAxLAogICAgICAiY2FuZGlkYXRlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiSWNoYWJvZC1Hb29kd2luLTU1ZThkZTFmIiwKICAgICAgICAgICJuYW1lIjogIkljaGFib2QgR29vZHdpbiIsCiAgICAgICAgICAicGFydHlJZHMiOiBbIkRlbW9jcmF0aWMtYWVhMjBhZGIiXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImlkIjogIlZhbGJlLUNhZHktYmEzYWYzYWYiLAogICAgICAgICAgIm5hbWUiOiAiVmFsYmUgQ2FkeSIsCiAgICAgICAgICAicGFydHlJZHMiOiBbIlJlcHVibGljYW4tZjAxNjdjZTciXQogICAgICAgIH0KICAgICAgXSwKICAgICAgImFsbG93V3JpdGVJbnMiOiB0cnVlCiAgICB9LAogICAgewogICAgICAiaWQiOiAiU2hhbGwtdGhlcmUtYmUtYS1jb252ZW50aW9uLXRvLWFtZW5kLW9yLXJldmlzZS10aGUtY29uc3RpdHV0aW9uLS0xNWU4YjViYyIsCiAgICAgICJkaXN0cmljdElkIjogInRvd24taWQtMDA3MDEtcHJlY2luY3QtaWQtIiwKICAgICAgInNlY3Rpb24iOiAiQ29uc3RpdHV0aW9uYWwgQW1lbmRtZW50IFF1ZXN0aW9uIiwKICAgICAgInRpdGxlIjogIkNvbnN0aXR1dGlvbmFsIEFtZW5kbWVudCBRdWVzdGlvbiIsCiAgICAgICJ0eXBlIjogInllc25vIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlNoYWxsIHRoZXJlIGJlIGEgY29udmVudGlvbiB0byBhbWVuZCBvciByZXZpc2UgdGhlIGNvbnN0aXR1dGlvbj8iCiAgICB9CiAgXSwKICAiZ3JpZExheW91dHMiOiBbCiAgICB7CiAgICAgICJwcmVjaW5jdElkIjogInRvd24taWQtMDA3MDEtcHJlY2luY3QtaWQtIiwKICAgICAgImJhbGxvdFN0eWxlSWQiOiAiY2FyZC1udW1iZXItMyIsCiAgICAgICJjb2x1bW5zIjogMzQsCiAgICAgICJyb3dzIjogNTMsCiAgICAgICJncmlkUG9zaXRpb25zIjogWwogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMTIsCiAgICAgICAgICAicm93IjogOCwKICAgICAgICAgICJjb250ZXN0SWQiOiAiR292ZXJub3ItMDYxYTQwMWIiLAogICAgICAgICAgIm9wdGlvbklkIjogIkpvc2lhaC1CYXJ0bGV0dC0xYmI5OTk4NSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMTIsCiAgICAgICAgICAicm93IjogMTEsCiAgICAgICAgICAiY29udGVzdElkIjogIlVuaXRlZC1TdGF0ZXMtU2VuYXRvci1kM2YxYzc1YiIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiSm9obi1MYW5nZG9uLTU5NTFjOGUxIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxMiwKICAgICAgICAgICJyb3ciOiAxNCwKICAgICAgICAgICJjb250ZXN0SWQiOiAiUmVwcmVzZW50YXRpdmUtaW4tQ29uZ3Jlc3MtMjQ2ODNiNDQiLAogICAgICAgICAgIm9wdGlvbklkIjogIkplcmVtaWFoLVNtaXRoLTQ2OTU2MGM5IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxMiwKICAgICAgICAgICJyb3ciOiAxNywKICAgICAgICAgICJjb250ZXN0SWQiOiAiRXhlY3V0aXZlLUNvdW5jaWxvci1iYjIyNTU3ZiIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiQW5uZS1XYWxkcm9uLWVlMGNiYzg1IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxMiwKICAgICAgICAgICJyb3ciOiAyMCwKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtU2VuYXRvci0zOTEzODFmOCIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiSmFtZXMtUG9vbGUtZGI1ZWY0YmQiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDEyLAogICAgICAgICAgInJvdyI6IDI0LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJTdGF0ZS1SZXByZXNlbnRhdGl2ZXMtSGlsbHNib3JvdWdoLURpc3RyaWN0LTM0LWIxMDEyZDM4IiwKICAgICAgICAgICJvcHRpb25JZCI6ICJPYmFkaWFoLUNhcnJpZ2FuLTVjOTUxNDVhIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxMiwKICAgICAgICAgICJyb3ciOiAyNiwKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtUmVwcmVzZW50YXRpdmVzLUhpbGxzYm9yb3VnaC1EaXN0cmljdC0zNC1iMTAxMmQzOCIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiTWFyeS1CYWtlci1FZGR5LTM1MDc4NWQ1IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxMiwKICAgICAgICAgICJyb3ciOiAyOCwKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtUmVwcmVzZW50YXRpdmVzLUhpbGxzYm9yb3VnaC1EaXN0cmljdC0zNC1iMTAxMmQzOCIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiU2FtdWVsLUJlbGwtMTc5NzMyNzUiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDEyLAogICAgICAgICAgInJvdyI6IDMyLAogICAgICAgICAgImNvbnRlc3RJZCI6ICJTdGF0ZS1SZXByZXNlbnRhdGl2ZS1IaWxsc2Jvcm91Z2gtRGlzdHJpY3QtMzctZjNiZGU4OTQiLAogICAgICAgICAgIm9wdGlvbklkIjogIkFiZWlsLUZvc3Rlci1kZWQzOGUzNiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJiYWNrIiwKICAgICAgICAgICJjb2x1bW4iOiAxMiwKICAgICAgICAgICJyb3ciOiA0LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJTaGVyaWZmLTQyNDNmZTBiIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJFZHdhcmQtUmFuZG9scGgtYmY0Yzg0OGEiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiYmFjayIsCiAgICAgICAgICAiY29sdW1uIjogMTIsCiAgICAgICAgICAicm93IjogNywKICAgICAgICAgICJjb250ZXN0SWQiOiAiQ291bnR5LUF0dG9ybmV5LTEzM2Y5MTBmIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJFenJhLUJhcnRsZXR0LThmOTUyMjNjIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImJhY2siLAogICAgICAgICAgImNvbHVtbiI6IDEyLAogICAgICAgICAgInJvdyI6IDEwLAogICAgICAgICAgImNvbnRlc3RJZCI6ICJDb3VudHktVHJlYXN1cmVyLTg3ZDI1YTMxIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJKb2huLVNtaXRoLWVmNjFhNTc5IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImJhY2siLAogICAgICAgICAgImNvbHVtbiI6IDEyLAogICAgICAgICAgInJvdyI6IDEzLAogICAgICAgICAgImNvbnRlc3RJZCI6ICJSZWdpc3Rlci1vZi1EZWVkcy1hMTI3OGRmMiIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiSm9obi1NYW5uLWI1NmJiZGQzIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImJhY2siLAogICAgICAgICAgImNvbHVtbiI6IDEyLAogICAgICAgICAgInJvdyI6IDE2LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJSZWdpc3Rlci1vZi1Qcm9iYXRlLWE0MTE3ZGE4IiwKICAgICAgICAgICJvcHRpb25JZCI6ICJOYXRoYW5pZWwtUGFya2VyLTU2YTA2YzI5IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImJhY2siLAogICAgICAgICAgImNvbHVtbiI6IDEyLAogICAgICAgICAgInJvdyI6IDE5LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJDb3VudHktQ29tbWlzc2lvbmVyLWQ2ZmVlZDI1IiwKICAgICAgICAgICJvcHRpb25JZCI6ICJJY2hhYm9kLUdvb2R3aW4tNTVlOGRlMWYiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDE5LAogICAgICAgICAgInJvdyI6IDgsCiAgICAgICAgICAiY29udGVzdElkIjogIkdvdmVybm9yLTA2MWE0MDFiIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJIYW5uYWgtRHVzdGluLWFiNGVmN2M4IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxOSwKICAgICAgICAgICJyb3ciOiAxMSwKICAgICAgICAgICJjb250ZXN0SWQiOiAiVW5pdGVkLVN0YXRlcy1TZW5hdG9yLWQzZjFjNzViIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJXaWxsaWFtLVByZXN0b24tMzc3OGZjZDUiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDE5LAogICAgICAgICAgInJvdyI6IDE0LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJSZXByZXNlbnRhdGl2ZS1pbi1Db25ncmVzcy0yNDY4M2I0NCIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiTmljaG9sYXMtR2lsbWFuLTE3OTFhZWQ3IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxOSwKICAgICAgICAgICJyb3ciOiAxNywKICAgICAgICAgICJjb250ZXN0SWQiOiAiRXhlY3V0aXZlLUNvdW5jaWxvci1iYjIyNTU3ZiIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiRGFuaWVsLVdlYnN0ZXItMTNmNzdiMmQiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDE5LAogICAgICAgICAgInJvdyI6IDIwLAogICAgICAgICAgImNvbnRlc3RJZCI6ICJTdGF0ZS1TZW5hdG9yLTM5MTM4MWY4IiwKICAgICAgICAgICJvcHRpb25JZCI6ICJNYXR0aGV3LVRob3JudG9uLWY2NmZlYzVlIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxOSwKICAgICAgICAgICJyb3ciOiAyMywKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtUmVwcmVzZW50YXRpdmVzLUhpbGxzYm9yb3VnaC1EaXN0cmljdC0zNC1iMTAxMmQzOCIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiU2FtdWVsLUxpdmVybW9yZS1mOTI3ZmVmMSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMTksCiAgICAgICAgICAicm93IjogMjUsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlcy1IaWxsc2Jvcm91Z2gtRGlzdHJpY3QtMzQtYjEwMTJkMzgiLAogICAgICAgICAgIm9wdGlvbklkIjogIkVsaWphaC1NaWxsZXItYTUyZTY5ODgiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDE5LAogICAgICAgICAgInJvdyI6IDI3LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJTdGF0ZS1SZXByZXNlbnRhdGl2ZXMtSGlsbHNib3JvdWdoLURpc3RyaWN0LTM0LWIxMDEyZDM4IiwKICAgICAgICAgICJvcHRpb25JZCI6ICJJc2FhYy1IaWxsLWQ2YzlkZWViIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxOSwKICAgICAgICAgICJyb3ciOiAzMiwKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtUmVwcmVzZW50YXRpdmUtSGlsbHNib3JvdWdoLURpc3RyaWN0LTM3LWYzYmRlODk0IiwKICAgICAgICAgICJvcHRpb25JZCI6ICJDaGFybGVzLUgtSGVyc2V5LTA5NjI4NmE0IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImJhY2siLAogICAgICAgICAgImNvbHVtbiI6IDE5LAogICAgICAgICAgInJvdyI6IDQsCiAgICAgICAgICAiY29udGVzdElkIjogIlNoZXJpZmYtNDI0M2ZlMGIiLAogICAgICAgICAgIm9wdGlvbklkIjogIkVkd2FyZC1SYW5kb2xwaC1iZjRjODQ4YSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJiYWNrIiwKICAgICAgICAgICJjb2x1bW4iOiAxOSwKICAgICAgICAgICJyb3ciOiA3LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJDb3VudHktQXR0b3JuZXktMTMzZjkxMGYiLAogICAgICAgICAgIm9wdGlvbklkIjogIk1hcnktV29vbHNvbi1kYzBiODU0YSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJiYWNrIiwKICAgICAgICAgICJjb2x1bW4iOiAxOSwKICAgICAgICAgICJyb3ciOiAxMCwKICAgICAgICAgICJjb250ZXN0SWQiOiAiQ291bnR5LVRyZWFzdXJlci04N2QyNWEzMSIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiSmFuZS1Kb25lcy05Y2FhMTQxZiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJiYWNrIiwKICAgICAgICAgICJjb2x1bW4iOiAxOSwKICAgICAgICAgICJyb3ciOiAxMywKICAgICAgICAgICJjb250ZXN0SWQiOiAiUmVnaXN0ZXItb2YtRGVlZHMtYTEyNzhkZjIiLAogICAgICAgICAgIm9wdGlvbklkIjogIkVsbGVuLUEtU3RpbGVtYW4tMTQ0MDg3MzciCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiYmFjayIsCiAgICAgICAgICAiY29sdW1uIjogMTksCiAgICAgICAgICAicm93IjogMTYsCiAgICAgICAgICAiY29udGVzdElkIjogIlJlZ2lzdGVyLW9mLVByb2JhdGUtYTQxMTdkYTgiLAogICAgICAgICAgIm9wdGlvbklkIjogIkNsYWlyZS1DdXR0cy0wN2E0MzZlNyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJiYWNrIiwKICAgICAgICAgICJjb2x1bW4iOiAxOSwKICAgICAgICAgICJyb3ciOiAxOSwKICAgICAgICAgICJjb250ZXN0SWQiOiAiQ291bnR5LUNvbW1pc3Npb25lci1kNmZlZWQyNSIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiVmFsYmUtQ2FkeS1iYTNhZjNhZiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMjYsCiAgICAgICAgICAicm93IjogOCwKICAgICAgICAgICJjb250ZXN0SWQiOiAiR292ZXJub3ItMDYxYTQwMWIiLAogICAgICAgICAgIm9wdGlvbklkIjogIkpvaG4tU3BlbmNlci05ZmZiNTk3MCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMjYsCiAgICAgICAgICAicm93IjogMTQsCiAgICAgICAgICAiY29udGVzdElkIjogIlJlcHJlc2VudGF0aXZlLWluLUNvbmdyZXNzLTI0NjgzYjQ0IiwKICAgICAgICAgICJvcHRpb25JZCI6ICJSaWNoYXJkLUNvb3RlLWI5MDk1NjM2IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAyNiwKICAgICAgICAgICJyb3ciOiAyNCwKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtUmVwcmVzZW50YXRpdmVzLUhpbGxzYm9yb3VnaC1EaXN0cmljdC0zNC1iMTAxMmQzOCIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiQWJpZ2FpbC1CYXJ0bGV0dC00ZTQ2YzlkNCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMjYsCiAgICAgICAgICAicm93IjogMjYsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlcy1IaWxsc2Jvcm91Z2gtRGlzdHJpY3QtMzQtYjEwMTJkMzgiLAogICAgICAgICAgIm9wdGlvbklkIjogIkphY29iLUZyZWVzZS1iNTE0NjUwNSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMjYsCiAgICAgICAgICAicm93IjogMzIsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlLUhpbGxzYm9yb3VnaC1EaXN0cmljdC0zNy1mM2JkZTg5NCIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiV2lsbGlhbS1Mb3Zlam95LWZkZTNjMmRmIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAid3JpdGUtaW4iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDMyLAogICAgICAgICAgInJvdyI6IDgsCiAgICAgICAgICAiY29udGVzdElkIjogIkdvdmVybm9yLTA2MWE0MDFiIiwKICAgICAgICAgICJ3cml0ZUluSW5kZXgiOiAwCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJ3cml0ZS1pbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMzIsCiAgICAgICAgICAicm93IjogMTEsCiAgICAgICAgICAiY29udGVzdElkIjogIlVuaXRlZC1TdGF0ZXMtU2VuYXRvci1kM2YxYzc1YiIsCiAgICAgICAgICAid3JpdGVJbkluZGV4IjogMAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAid3JpdGUtaW4iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDMyLAogICAgICAgICAgInJvdyI6IDE0LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJSZXByZXNlbnRhdGl2ZS1pbi1Db25ncmVzcy0yNDY4M2I0NCIsCiAgICAgICAgICAid3JpdGVJbkluZGV4IjogMAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAid3JpdGUtaW4iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDMyLAogICAgICAgICAgInJvdyI6IDE3LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJFeGVjdXRpdmUtQ291bmNpbG9yLWJiMjI1NTdmIiwKICAgICAgICAgICJ3cml0ZUluSW5kZXgiOiAwCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJ3cml0ZS1pbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMzIsCiAgICAgICAgICAicm93IjogMjAsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVNlbmF0b3ItMzkxMzgxZjgiLAogICAgICAgICAgIndyaXRlSW5JbmRleCI6IDAKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIndyaXRlLWluIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAzMiwKICAgICAgICAgICJyb3ciOiAyMywKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtUmVwcmVzZW50YXRpdmVzLUhpbGxzYm9yb3VnaC1EaXN0cmljdC0zNC1iMTAxMmQzOCIsCiAgICAgICAgICAid3JpdGVJbkluZGV4IjogMgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAid3JpdGUtaW4iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDMyLAogICAgICAgICAgInJvdyI6IDI1LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJTdGF0ZS1SZXByZXNlbnRhdGl2ZXMtSGlsbHNib3JvdWdoLURpc3RyaWN0LTM0LWIxMDEyZDM4IiwKICAgICAgICAgICJ3cml0ZUluSW5kZXgiOiAxCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJ3cml0ZS1pbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMzIsCiAgICAgICAgICAicm93IjogMjcsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlcy1IaWxsc2Jvcm91Z2gtRGlzdHJpY3QtMzQtYjEwMTJkMzgiLAogICAgICAgICAgIndyaXRlSW5JbmRleCI6IDAKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIndyaXRlLWluIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAzMiwKICAgICAgICAgICJyb3ciOiAzMiwKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtUmVwcmVzZW50YXRpdmUtSGlsbHNib3JvdWdoLURpc3RyaWN0LTM3LWYzYmRlODk0IiwKICAgICAgICAgICJ3cml0ZUluSW5kZXgiOiAwCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJ3cml0ZS1pbiIsCiAgICAgICAgICAic2lkZSI6ICJiYWNrIiwKICAgICAgICAgICJjb2x1bW4iOiAzMiwKICAgICAgICAgICJyb3ciOiA0LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJTaGVyaWZmLTQyNDNmZTBiIiwKICAgICAgICAgICJ3cml0ZUluSW5kZXgiOiAwCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJ3cml0ZS1pbiIsCiAgICAgICAgICAic2lkZSI6ICJiYWNrIiwKICAgICAgICAgICJjb2x1bW4iOiAzMiwKICAgICAgICAgICJyb3ciOiA3LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJDb3VudHktQXR0b3JuZXktMTMzZjkxMGYiLAogICAgICAgICAgIndyaXRlSW5JbmRleCI6IDAKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIndyaXRlLWluIiwKICAgICAgICAgICJzaWRlIjogImJhY2siLAogICAgICAgICAgImNvbHVtbiI6IDMyLAogICAgICAgICAgInJvdyI6IDEwLAogICAgICAgICAgImNvbnRlc3RJZCI6ICJDb3VudHktVHJlYXN1cmVyLTg3ZDI1YTMxIiwKICAgICAgICAgICJ3cml0ZUluSW5kZXgiOiAwCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJ3cml0ZS1pbiIsCiAgICAgICAgICAic2lkZSI6ICJiYWNrIiwKICAgICAgICAgICJjb2x1bW4iOiAzMiwKICAgICAgICAgICJyb3ciOiAxMywKICAgICAgICAgICJjb250ZXN0SWQiOiAiUmVnaXN0ZXItb2YtRGVlZHMtYTEyNzhkZjIiLAogICAgICAgICAgIndyaXRlSW5JbmRleCI6IDAKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIndyaXRlLWluIiwKICAgICAgICAgICJzaWRlIjogImJhY2siLAogICAgICAgICAgImNvbHVtbiI6IDMyLAogICAgICAgICAgInJvdyI6IDE2LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJSZWdpc3Rlci1vZi1Qcm9iYXRlLWE0MTE3ZGE4IiwKICAgICAgICAgICJ3cml0ZUluSW5kZXgiOiAwCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJ3cml0ZS1pbiIsCiAgICAgICAgICAic2lkZSI6ICJiYWNrIiwKICAgICAgICAgICJjb2x1bW4iOiAzMiwKICAgICAgICAgICJyb3ciOiAxOSwKICAgICAgICAgICJjb250ZXN0SWQiOiAiQ291bnR5LUNvbW1pc3Npb25lci1kNmZlZWQyNSIsCiAgICAgICAgICAid3JpdGVJbkluZGV4IjogMAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJjb250ZXN0SWQiOiAiU2hhbGwtdGhlcmUtYmUtYS1jb252ZW50aW9uLXRvLWFtZW5kLW9yLXJldmlzZS10aGUtY29uc3RpdHV0aW9uLS0xNWU4YjViYyIsCiAgICAgICAgICAib3B0aW9uSWQiOiAieWVzIiwKICAgICAgICAgICJzaWRlIjogImJhY2siLAogICAgICAgICAgImNvbHVtbiI6IDI2LAogICAgICAgICAgInJvdyI6IDI0CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgImNvbnRlc3RJZCI6ICJTaGFsbC10aGVyZS1iZS1hLWNvbnZlbnRpb24tdG8tYW1lbmQtb3ItcmV2aXNlLXRoZS1jb25zdGl0dXRpb24tLTE1ZThiNWJjIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJubyIsCiAgICAgICAgICAic2lkZSI6ICJiYWNrIiwKICAgICAgICAgICJjb2x1bW4iOiAzMiwKICAgICAgICAgICJyb3ciOiAyNAogICAgICAgIH0KICAgICAgXQogICAgfQogIF0sCiAgImNvdW50eSI6IHsKICAgICJpZCI6ICIwMDcwMSIsCiAgICAibmFtZSI6ICJUZXN0IEJhbGxvdCIKICB9LAogICJkYXRlIjogIjIwMjItMDctMTJUMTI6MDA6MDAuMDAwLTA0OjAwIiwKICAiZGlzdHJpY3RzIjogWwogICAgewogICAgICAiaWQiOiAidG93bi1pZC0wMDcwMS1wcmVjaW5jdC1pZC0iLAogICAgICAibmFtZSI6ICJUZXN0IEJhbGxvdCIKICAgIH0KICBdLAogICJtYXJrVGhyZXNob2xkcyI6IHsKICAgICJtYXJnaW5hbCI6IDAuMSwKICAgICJkZWZpbml0ZSI6IDAuMTIKICB9LAogICJwYXJ0aWVzIjogWwogICAgewogICAgICAiaWQiOiAiRGVtb2NyYXRpYy1hZWEyMGFkYiIsCiAgICAgICJuYW1lIjogIkRlbW9jcmF0aWMiLAogICAgICAiZnVsbE5hbWUiOiAiRGVtb2NyYXRpYyIsCiAgICAgICJhYmJyZXYiOiAiRGVtb2NyYXRpYyIKICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJSZXB1YmxpY2FuLWYwMTY3Y2U3IiwKICAgICAgIm5hbWUiOiAiUmVwdWJsaWNhbiIsCiAgICAgICJmdWxsTmFtZSI6ICJSZXB1YmxpY2FuIiwKICAgICAgImFiYnJldiI6ICJSZXB1YmxpY2FuIgogICAgfSwKICAgIHsKICAgICAgImlkIjogIk9DLTNhMzg2ZDJiIiwKICAgICAgIm5hbWUiOiAiT0MiLAogICAgICAiZnVsbE5hbWUiOiAiT0MiLAogICAgICAiYWJicmV2IjogIk9DIgogICAgfQogIF0sCiAgInByZWNpbmN0U2NhbkFkanVkaWNhdGlvblJlYXNvbnMiOiBbCiAgICAiVW5pbnRlcnByZXRhYmxlQmFsbG90IiwKICAgICJPdmVydm90ZSIsCiAgICAiQmxhbmtCYWxsb3QiCiAgXSwKICAicHJlY2luY3RzIjogWwogICAgewogICAgICAiaWQiOiAidG93bi1pZC0wMDcwMS1wcmVjaW5jdC1pZC0iLAogICAgICAibmFtZSI6ICJUZXN0IEJhbGxvdCIKICAgIH0KICBdLAogICJzZWFsVXJsIjogIi9zZWFscy9TZWFsX29mX05ld19IYW1wc2hpcmUuc3ZnIiwKICAic3RhdGUiOiAiTkgiLAogICJ0aXRsZSI6ICJHZW5lcmFsIEVsZWN0aW9uIgp9Cg==';

/**
 * MIME type of data/electionGridLayout/election.json.
 */
export const mimeType = 'application/json';

/**
 * Path to a file containing this file's contents.
 *
 * SHA-256 hash of file data: b0c77fefe5e00f13071ec70c09ea2d04c96fd56a5b0a3aae3f063962a404c5a2
 */
export function asFilePath(): string {
  const directoryPath = mkdtempSync(tmpdir() + sep);
  const filePath = join(directoryPath, 'election.json');
  writeFileSync(filePath, asBuffer());
  return filePath;
}

/**
 * Convert to a `data:` URL of data/electionGridLayout/election.json, suitable for embedding in HTML.
 *
 * SHA-256 hash of file data: b0c77fefe5e00f13071ec70c09ea2d04c96fd56a5b0a3aae3f063962a404c5a2
 */
export function asDataUrl(): string {
  return `data:${mimeType};base64,${resourceDataBase64}`;
}

/**
 * Raw data of data/electionGridLayout/election.json.
 *
 * SHA-256 hash of file data: b0c77fefe5e00f13071ec70c09ea2d04c96fd56a5b0a3aae3f063962a404c5a2
 */
export function asBuffer(): Buffer {
  return Buffer.from(resourceDataBase64, 'base64');
}

/**
 * Text content of data/electionGridLayout/election.json.
 *
 * SHA-256 hash of file data: b0c77fefe5e00f13071ec70c09ea2d04c96fd56a5b0a3aae3f063962a404c5a2
 */
export function asText(): string {
  return asBuffer().toString('utf-8');
}

/**
 * Full election definition for data/electionGridLayout/election.json.
 *
 * SHA-256 hash of file data: b0c77fefe5e00f13071ec70c09ea2d04c96fd56a5b0a3aae3f063962a404c5a2
 */
export const electionDefinition = safeParseElectionDefinition(
  asText()
).unsafeUnwrap();

/**
 * Election definition for data/electionGridLayout/election.json.
 *
 * SHA-256 hash of file data: b0c77fefe5e00f13071ec70c09ea2d04c96fd56a5b0a3aae3f063962a404c5a2
 */
export const election = electionDefinition.election;