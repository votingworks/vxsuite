/* Generated by res-to-ts. DO NOT EDIT */
/* eslint-disable */
/* istanbul ignore file */

import { Buffer } from 'node:buffer';
import { cpSync, existsSync, mkdtempSync, readFileSync } from 'node:fs';
import { tmpdir } from 'node:os';
import { dirname, join, sep } from 'node:path';
import {
  Election,
  ElectionDefinition,
  ElectionPackage,
  safeParseElectionDefinition,
  DEFAULT_SYSTEM_SETTINGS,
} from '@votingworks/types';

/**
 * Get the path to the resource data/electionPrimaryPrecinctSplits/electionBase.json.
 */
function getResourcePath(): string {
  let rootDir = __dirname;
  do {
    if (existsSync(join(rootDir, 'package.json'))) {
      return join(
        rootDir,
        'data/electionPrimaryPrecinctSplits/electionBase.json'
      );
    }
    let parentDir = dirname(rootDir);
    if (parentDir === '.' || parentDir === rootDir) {
      break;
    }
    rootDir = parentDir;
  } while (true);
  throw new Error('Could not find resource path');
}

/**
 * MIME type of data/electionPrimaryPrecinctSplits/electionBase.json.
 */
export const mimeType = 'application/json';

/**
 * Path to a file containing this file's contents.
 */
export function asFilePath(): string {
  const directoryPath = mkdtempSync(tmpdir() + sep);
  const filePath = join(directoryPath, 'electionBase.json');
  cpSync(getResourcePath(), filePath);
  return filePath;
}

/**
 * Convert to a `data:` URL of data/electionPrimaryPrecinctSplits/electionBase.json, suitable for embedding in HTML.
 */
export function asDataUrl(): string {
  return `data:${mimeType};base64,${asBuffer().toString('base64')}`;
}

/**
 * Raw data of data/electionPrimaryPrecinctSplits/electionBase.json.
 */
export function asBuffer(): Buffer {
  return readFileSync(getResourcePath());
}

/**
 * Text content of data/electionPrimaryPrecinctSplits/electionBase.json.
 */
export function asText(): string {
  return readFileSync(getResourcePath(), 'utf-8');
}

/**
 * Full election definition for data/electionPrimaryPrecinctSplits/electionBase.json.
 */
export function readElectionDefinition(): ElectionDefinition {
  return safeParseElectionDefinition(asText()).unsafeUnwrap();
}

/**
 * Election definition for data/electionPrimaryPrecinctSplits/electionBase.json.
 */
export function readElection(): Election {
  return readElectionDefinition().election;
}

/**
 * Election package for data/electionPrimaryPrecinctSplits/electionBase.json.
 */
export function toElectionPackage(
  systemSettings = DEFAULT_SYSTEM_SETTINGS
): ElectionPackage {
  return {
    electionDefinition: readElectionDefinition(),
    systemSettings,
  };
}
