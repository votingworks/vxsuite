/* Generated by res-to-ts. DO NOT EDIT */
/* eslint-disable */
/* istanbul ignore file */

import { Buffer } from 'buffer';
import { mkdtempSync, writeFileSync } from 'fs';
import { tmpdir } from 'os';
import { join, sep } from 'path';
import { safeParseElectionDefinition } from '@votingworks/types';

/**
 * Data of data/electionGridLayoutNewHampshireAmherst/election.json encoded as base64.
 *
 * SHA-256 hash of file data: 72f02c461bfcc4b098a883b69e2642c2a4f5f2ef464d0ff8ec4102321e758f45
 */
const resourceDataBase64 = '';

/**
 * MIME type of data/electionGridLayoutNewHampshireAmherst/election.json.
 */
export const mimeType = 'application/json';

/**
 * Path to a file containing this file's contents.
 *
 * SHA-256 hash of file data: 72f02c461bfcc4b098a883b69e2642c2a4f5f2ef464d0ff8ec4102321e758f45
 */
export function asFilePath(): string {
  const directoryPath = mkdtempSync(tmpdir() + sep);
  const filePath = join(directoryPath, 'election.json');
  writeFileSync(filePath, asBuffer());
  return filePath;
}

/**
 * Convert to a `data:` URL of data/electionGridLayoutNewHampshireAmherst/election.json, suitable for embedding in HTML.
 *
 * SHA-256 hash of file data: 72f02c461bfcc4b098a883b69e2642c2a4f5f2ef464d0ff8ec4102321e758f45
 */
export function asDataUrl(): string {
  return `data:${mimeType};base64,${resourceDataBase64}`;
}

/**
 * Raw data of data/electionGridLayoutNewHampshireAmherst/election.json.
 *
 * SHA-256 hash of file data: 72f02c461bfcc4b098a883b69e2642c2a4f5f2ef464d0ff8ec4102321e758f45
 */
export function asBuffer(): Buffer {
  return Buffer.from(resourceDataBase64, 'base64');
}

/**
 * Text content of data/electionGridLayoutNewHampshireAmherst/election.json.
 *
 * SHA-256 hash of file data: 72f02c461bfcc4b098a883b69e2642c2a4f5f2ef464d0ff8ec4102321e758f45
 */
export function asText(): string {
  return asBuffer().toString('utf-8');
}

/**
 * Full election definition for data/electionGridLayoutNewHampshireAmherst/election.json.
 *
 * SHA-256 hash of file data: 72f02c461bfcc4b098a883b69e2642c2a4f5f2ef464d0ff8ec4102321e758f45
 */
export const electionDefinition = safeParseElectionDefinition(
  asText()
).unsafeUnwrap();

/**
 * Election definition for data/electionGridLayoutNewHampshireAmherst/election.json.
 *
 * SHA-256 hash of file data: 72f02c461bfcc4b098a883b69e2642c2a4f5f2ef464d0ff8ec4102321e758f45
 */
export const election = electionDefinition.election;