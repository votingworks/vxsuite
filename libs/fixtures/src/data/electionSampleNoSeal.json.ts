/* Generated by res-to-ts. DO NOT EDIT */
/* eslint-disable */
/* istanbul ignore file */

import { Buffer } from 'buffer';
import { mkdtempSync, writeFileSync } from 'fs';
import { tmpdir } from 'os';
import { join, sep } from 'path';
import { safeParseElectionDefinition } from '@votingworks/types';

/**
 * Data of data/electionSampleNoSeal.json encoded as base64.
 *
 * SHA-256 hash of file data: a404c660d605a99ebe3c431426f3d5d61f757d816819f614aa87c0b97bb0fbd6
 */
const resourceDataBase64 = '';

/**
 * MIME type of data/electionSampleNoSeal.json.
 */
export const mimeType = 'application/json';

/**
 * Path to a file containing this file's contents.
 *
 * SHA-256 hash of file data: a404c660d605a99ebe3c431426f3d5d61f757d816819f614aa87c0b97bb0fbd6
 */
export function asFilePath(): string {
  const directoryPath = mkdtempSync(tmpdir() + sep);
  const filePath = join(directoryPath, 'electionSampleNoSeal.json');
  writeFileSync(filePath, asBuffer());
  return filePath;
}

/**
 * Convert to a `data:` URL of data/electionSampleNoSeal.json, suitable for embedding in HTML.
 *
 * SHA-256 hash of file data: a404c660d605a99ebe3c431426f3d5d61f757d816819f614aa87c0b97bb0fbd6
 */
export function asDataUrl(): string {
  return `data:${mimeType};base64,${resourceDataBase64}`;
}

/**
 * Raw data of data/electionSampleNoSeal.json.
 *
 * SHA-256 hash of file data: a404c660d605a99ebe3c431426f3d5d61f757d816819f614aa87c0b97bb0fbd6
 */
export function asBuffer(): Buffer {
  return Buffer.from(resourceDataBase64, 'base64');
}

/**
 * Text content of data/electionSampleNoSeal.json.
 *
 * SHA-256 hash of file data: a404c660d605a99ebe3c431426f3d5d61f757d816819f614aa87c0b97bb0fbd6
 */
export function asText(): string {
  return asBuffer().toString('utf-8');
}

/**
 * Full election definition for data/electionSampleNoSeal.json.
 *
 * SHA-256 hash of file data: a404c660d605a99ebe3c431426f3d5d61f757d816819f614aa87c0b97bb0fbd6
 */
export const electionDefinition = safeParseElectionDefinition(
  asText()
).unsafeUnwrap();

/**
 * Election definition for data/electionSampleNoSeal.json.
 *
 * SHA-256 hash of file data: a404c660d605a99ebe3c431426f3d5d61f757d816819f614aa87c0b97bb0fbd6
 */
export const election = electionDefinition.election;