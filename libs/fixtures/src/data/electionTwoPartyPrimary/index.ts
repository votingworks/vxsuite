import path from 'node:path';
import { Election, ElectionDefinition } from '@votingworks/types';
import { asElectionDefinition } from '../../util';
import { asText as batchResultsCsvAsText } from './csvFiles/batchResults.csv';
import { asText as finalResultsCsvAsText } from './csvFiles/finalResults.csv';
import * as electionJson from './election.json';

import * as castVoteRecords from './castVoteRecords';

export const makeBatchCsvData = batchResultsCsvAsText;
export const makeFinalCsvData = finalResultsCsvAsText;

// eslint-disable-next-line vx/gts-direct-module-export-access-only
export { electionJson };
export { readElection, readElectionDefinition } from './election.json';

export function makeSinglePrecinctElection(): Election {
  const election = electionJson.readElection();
  return {
    ...election,
    precincts: [election.precincts[0]],
    ballotStyles: election.ballotStyles.map((ballotStyle) => ({
      ...ballotStyle,
      precincts: [election.precincts[0].id],
    })),
  };
}

export function makeSinglePrecinctElectionDefinition(): ElectionDefinition {
  return asElectionDefinition(makeSinglePrecinctElection());
}

export * as systemSettings from '../systemSettings.json';

// Generated by libs/fixture-generators script: pnpm generate-cvr-fixtures
export const castVoteRecordExport = {
  asDirectoryPath: () =>
    path.join(
      castVoteRecords.asDirectoryPath(),
      'machine_0000__2024-01-01_00-00-00'
    ),
} as const;
