/* Generated by res-to-ts. DO NOT EDIT */
/* eslint-disable */
/* istanbul ignore file */

import { Buffer } from 'buffer';
import { mkdtempSync, writeFileSync } from 'fs';
import { tmpdir } from 'os';
import { join, sep } from 'path';
import { BallotPackage, safeParseElectionDefinition, DEFAULT_SYSTEM_SETTINGS } from '@votingworks/types';

/**
 * Data of data/electionGridLayoutNewHampshireHudson/election.json encoded as base64.
 *
 * SHA-256 hash of file data: 46ee29adf37b79cc708163fe88e459b01e44dbafa62be8bd98b1fa71eb431ed0
 */
const resourceDataBase64 = '';

/**
 * MIME type of data/electionGridLayoutNewHampshireHudson/election.json.
 */
export const mimeType = 'application/json';

/**
 * Path to a file containing this file's contents.
 *
 * SHA-256 hash of file data: 46ee29adf37b79cc708163fe88e459b01e44dbafa62be8bd98b1fa71eb431ed0
 */
export function asFilePath(): string {
  const directoryPath = mkdtempSync(tmpdir() + sep);
  const filePath = join(directoryPath, 'election.json');
  writeFileSync(filePath, asBuffer());
  return filePath;
}

/**
 * Convert to a `data:` URL of data/electionGridLayoutNewHampshireHudson/election.json, suitable for embedding in HTML.
 *
 * SHA-256 hash of file data: 46ee29adf37b79cc708163fe88e459b01e44dbafa62be8bd98b1fa71eb431ed0
 */
export function asDataUrl(): string {
  return `data:${mimeType};base64,${resourceDataBase64}`;
}

/**
 * Raw data of data/electionGridLayoutNewHampshireHudson/election.json.
 *
 * SHA-256 hash of file data: 46ee29adf37b79cc708163fe88e459b01e44dbafa62be8bd98b1fa71eb431ed0
 */
export function asBuffer(): Buffer {
  return Buffer.from(resourceDataBase64, 'base64');
}

/**
 * Text content of data/electionGridLayoutNewHampshireHudson/election.json.
 *
 * SHA-256 hash of file data: 46ee29adf37b79cc708163fe88e459b01e44dbafa62be8bd98b1fa71eb431ed0
 */
export function asText(): string {
  return asBuffer().toString('utf-8');
}

/**
 * Full election definition for data/electionGridLayoutNewHampshireHudson/election.json.
 *
 * SHA-256 hash of file data: 46ee29adf37b79cc708163fe88e459b01e44dbafa62be8bd98b1fa71eb431ed0
 */
export const electionDefinition = safeParseElectionDefinition(
  asText()
).unsafeUnwrap();

/**
 * Election definition for data/electionGridLayoutNewHampshireHudson/election.json.
 *
 * SHA-256 hash of file data: 46ee29adf37b79cc708163fe88e459b01e44dbafa62be8bd98b1fa71eb431ed0
 */
export const election = electionDefinition.election;

/**
 * Ballot package for data/electionGridLayoutNewHampshireHudson/election.json.
 *
 * SHA-256 hash of file data: 46ee29adf37b79cc708163fe88e459b01e44dbafa62be8bd98b1fa71eb431ed0
 */
export function toBallotPackage(systemSettings = DEFAULT_SYSTEM_SETTINGS): BallotPackage {
  return {
    electionDefinition,
    systemSettings,
  };
}