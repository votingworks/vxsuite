/* Generated by res-to-ts. DO NOT EDIT */
/* eslint-disable */
/* istanbul ignore file */

import { Buffer } from 'buffer';
import { mkdtempSync, writeFileSync } from 'fs';
import { tmpdir } from 'os';
import { join, sep } from 'path';
import { safeParseElectionDefinition } from '@votingworks/types';

/**
 * Data of data/electionGridLayoutNewHampshireHudson/election.json encoded as base64.
 *
 * SHA-256 hash of file data: 51e3d058b80ef04c6a91a4efafe4286fd3203998e94578c7e8804fd4491554e4
 */
const resourceDataBase64 = 'ewogICJiYWxsb3RMYXlvdXQiOiB7CiAgICAicGFwZXJTaXplIjogImxlZ2FsIiwKICAgICJ0YXJnZXRNYXJrUG9zaXRpb24iOiAicmlnaHQiCiAgfSwKICAiYmFsbG90U3R5bGVzIjogWwogICAgewogICAgICAiaWQiOiAiY2FyZC1udW1iZXItNTQiLAogICAgICAicHJlY2luY3RzIjogWwogICAgICAgICJ0b3duLWlkLTEyMTAxLXByZWNpbmN0LWlkLSIKICAgICAgXSwKICAgICAgImRpc3RyaWN0cyI6IFsKICAgICAgICAidG93bi1pZC0xMjEwMS1wcmVjaW5jdC1pZC0iCiAgICAgIF0KICAgIH0KICBdLAogICJjZW50cmFsU2NhbkFkanVkaWNhdGlvblJlYXNvbnMiOiBbCiAgICAiVW5pbnRlcnByZXRhYmxlQmFsbG90IiwKICAgICJPdmVydm90ZSIKICBdLAogICJjb250ZXN0cyI6IFsKICAgIHsKICAgICAgImlkIjogIlByZXNpZGVudC1hbmQtVmljZS1QcmVzaWRlbnQtb2YtdGhlLVVuaXRlZC1TdGF0ZXMtMThkMWE1NWEiLAogICAgICAiZGlzdHJpY3RJZCI6ICJ0b3duLWlkLTEyMTAxLXByZWNpbmN0LWlkLSIsCiAgICAgICJzZWN0aW9uIjogIlByZXNpZGVudCBhbmQgVmljZS1QcmVzaWRlbnQgb2YgdGhlIFVuaXRlZCBTdGF0ZXMiLAogICAgICAidGl0bGUiOiAiUHJlc2lkZW50IGFuZCBWaWNlLVByZXNpZGVudCBvZiB0aGUgVW5pdGVkIFN0YXRlcyIsCiAgICAgICJ0eXBlIjogImNhbmRpZGF0ZSIsCiAgICAgICJzZWF0cyI6IDEsCiAgICAgICJjYW5kaWRhdGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJEb25hbGQtSi1UcnVtcC1hbmQtTWljaGFlbC1SLVBlbmNlLTNlM2YzMWE3IiwKICAgICAgICAgICJuYW1lIjogIkRvbmFsZCBKLiBUcnVtcCAgYW5kIE1pY2hhZWwgUi4gUGVuY2UiLAogICAgICAgICAgInBhcnR5SWRzIjogWwogICAgICAgICAgICAiUmVwdWJsaWNhbi1mMDE2N2NlNyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJKb3NlcGgtUi1CaWRlbi1hbmQtS2FtYWxhLUQtSGFycmlzLTM0Njc1NmMwIiwKICAgICAgICAgICJuYW1lIjogIkpvc2VwaCBSLiBCaWRlbiAgYW5kIEthbWFsYSBELiBIYXJyaXMiLAogICAgICAgICAgInBhcnR5SWRzIjogWwogICAgICAgICAgICAiRGVtb2NyYXRpYy1hZWEyMGFkYiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJKby1Kb3JnZW5zZW4tYW5kLUplcmVteS1Db2hlbi03ZTk4MTIzNCIsCiAgICAgICAgICAibmFtZSI6ICJKbyBKb3JnZW5zZW4gIGFuZCBKZXJlbXkgQ29oZW4iLAogICAgICAgICAgInBhcnR5SWRzIjogWwogICAgICAgICAgICAiT0MtM2EzODZkMmIiCiAgICAgICAgICBdCiAgICAgICAgfQogICAgICBdLAogICAgICAiYWxsb3dXcml0ZUlucyI6IHRydWUKICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJHb3Zlcm5vci0wNjFhNDAxYiIsCiAgICAgICJkaXN0cmljdElkIjogInRvd24taWQtMTIxMDEtcHJlY2luY3QtaWQtIiwKICAgICAgInNlY3Rpb24iOiAiR292ZXJub3IiLAogICAgICAidGl0bGUiOiAiR292ZXJub3IiLAogICAgICAidHlwZSI6ICJjYW5kaWRhdGUiLAogICAgICAic2VhdHMiOiAxLAogICAgICAiY2FuZGlkYXRlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiQ2hyaXMtU3VudW51LTEzMDEyNGY3IiwKICAgICAgICAgICJuYW1lIjogIkNocmlzIFN1bnVudSIsCiAgICAgICAgICAicGFydHlJZHMiOiBbCiAgICAgICAgICAgICJSZXB1YmxpY2FuLWYwMTY3Y2U3IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImlkIjogIkRhbi1GZWx0ZXMtM2ZhZGY3OTgiLAogICAgICAgICAgIm5hbWUiOiAiRGFuIEZlbHRlcyIsCiAgICAgICAgICAicGFydHlJZHMiOiBbCiAgICAgICAgICAgICJEZW1vY3JhdGljLWFlYTIwYWRiIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImlkIjogIkRhcnJ5bC1XLVBlcnJ5LTJmMDdjNDU1IiwKICAgICAgICAgICJuYW1lIjogIkRhcnJ5bCBXLiBQZXJyeSIsCiAgICAgICAgICAicGFydHlJZHMiOiBbCiAgICAgICAgICAgICJPQy0zYTM4NmQyYiIKICAgICAgICAgIF0KICAgICAgICB9CiAgICAgIF0sCiAgICAgICJhbGxvd1dyaXRlSW5zIjogdHJ1ZQogICAgfSwKICAgIHsKICAgICAgImlkIjogIlVuaXRlZC1TdGF0ZXMtU2VuYXRvci1kM2YxYzc1YiIsCiAgICAgICJkaXN0cmljdElkIjogInRvd24taWQtMTIxMDEtcHJlY2luY3QtaWQtIiwKICAgICAgInNlY3Rpb24iOiAiVW5pdGVkIFN0YXRlcyBTZW5hdG9yIiwKICAgICAgInRpdGxlIjogIlVuaXRlZCBTdGF0ZXMgU2VuYXRvciIsCiAgICAgICJ0eXBlIjogImNhbmRpZGF0ZSIsCiAgICAgICJzZWF0cyI6IDEsCiAgICAgICJjYW5kaWRhdGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJDb3JreS1NZXNzbmVyLWI2ZWIyMTZkIiwKICAgICAgICAgICJuYW1lIjogIkNvcmt5IE1lc3NuZXIiLAogICAgICAgICAgInBhcnR5SWRzIjogWwogICAgICAgICAgICAiUmVwdWJsaWNhbi1mMDE2N2NlNyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJKZWFubmUtU2hhaGVlbi02ZTE5NjIyZCIsCiAgICAgICAgICAibmFtZSI6ICJKZWFubmUgU2hhaGVlbiIsCiAgICAgICAgICAicGFydHlJZHMiOiBbCiAgICAgICAgICAgICJEZW1vY3JhdGljLWFlYTIwYWRiIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImlkIjogIkp1c3Rpbi1PLURvbm5lbGwtZWM3MTc2MGMiLAogICAgICAgICAgIm5hbWUiOiAiSnVzdGluIE8nRG9ubmVsbCIsCiAgICAgICAgICAicGFydHlJZHMiOiBbCiAgICAgICAgICAgICJPQy0zYTM4NmQyYiIKICAgICAgICAgIF0KICAgICAgICB9CiAgICAgIF0sCiAgICAgICJhbGxvd1dyaXRlSW5zIjogdHJ1ZQogICAgfSwKICAgIHsKICAgICAgImlkIjogIlJlcHJlc2VudGF0aXZlLWluLUNvbmdyZXNzLTI0NjgzYjQ0IiwKICAgICAgImRpc3RyaWN0SWQiOiAidG93bi1pZC0xMjEwMS1wcmVjaW5jdC1pZC0iLAogICAgICAic2VjdGlvbiI6ICJSZXByZXNlbnRhdGl2ZSBpbiBDb25ncmVzcyIsCiAgICAgICJ0aXRsZSI6ICJSZXByZXNlbnRhdGl2ZSBpbiBDb25ncmVzcyIsCiAgICAgICJ0eXBlIjogImNhbmRpZGF0ZSIsCiAgICAgICJzZWF0cyI6IDEsCiAgICAgICJjYW5kaWRhdGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJTdGV2ZW4tTmVncm9uLTVkNDgyZDcyIiwKICAgICAgICAgICJuYW1lIjogIlN0ZXZlbiBOZWdyb24iLAogICAgICAgICAgInBhcnR5SWRzIjogWwogICAgICAgICAgICAiUmVwdWJsaWNhbi1mMDE2N2NlNyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJBbm4tTWNMYW5lLUt1c3Rlci02N2ZkZjA2MCIsCiAgICAgICAgICAibmFtZSI6ICJBbm4gTWNMYW5lIEt1c3RlciIsCiAgICAgICAgICAicGFydHlJZHMiOiBbCiAgICAgICAgICAgICJEZW1vY3JhdGljLWFlYTIwYWRiIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImlkIjogIkFuZHJldy1PbGRpbmctYmVkMzNmMDgiLAogICAgICAgICAgIm5hbWUiOiAiQW5kcmV3IE9sZGluZyIsCiAgICAgICAgICAicGFydHlJZHMiOiBbCiAgICAgICAgICAgICJPQy0zYTM4NmQyYiIKICAgICAgICAgIF0KICAgICAgICB9CiAgICAgIF0sCiAgICAgICJhbGxvd1dyaXRlSW5zIjogdHJ1ZQogICAgfSwKICAgIHsKICAgICAgImlkIjogIkV4ZWN1dGl2ZS1Db3VuY2lsb3ItYmIyMjU1N2YiLAogICAgICAiZGlzdHJpY3RJZCI6ICJ0b3duLWlkLTEyMTAxLXByZWNpbmN0LWlkLSIsCiAgICAgICJzZWN0aW9uIjogIkV4ZWN1dGl2ZSBDb3VuY2lsb3IiLAogICAgICAidGl0bGUiOiAiRXhlY3V0aXZlIENvdW5jaWxvciIsCiAgICAgICJ0eXBlIjogImNhbmRpZGF0ZSIsCiAgICAgICJzZWF0cyI6IDEsCiAgICAgICJjYW5kaWRhdGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJEYXZlLVdoZWVsZXItZGUyMjQyZWUiLAogICAgICAgICAgIm5hbWUiOiAiRGF2ZSBXaGVlbGVyIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsKICAgICAgICAgICAgIlJlcHVibGljYW4tZjAxNjdjZTciCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiRGVib3JhLUItUGlnbmF0ZWxsaS04YzRjYzFkMyIsCiAgICAgICAgICAibmFtZSI6ICJEZWJvcmEgQi4gUGlnbmF0ZWxsaSIsCiAgICAgICAgICAicGFydHlJZHMiOiBbCiAgICAgICAgICAgICJEZW1vY3JhdGljLWFlYTIwYWRiIgogICAgICAgICAgXQogICAgICAgIH0KICAgICAgXSwKICAgICAgImFsbG93V3JpdGVJbnMiOiB0cnVlCiAgICB9LAogICAgewogICAgICAiaWQiOiAiU3RhdGUtU2VuYXRvci0zOTEzODFmOCIsCiAgICAgICJkaXN0cmljdElkIjogInRvd24taWQtMTIxMDEtcHJlY2luY3QtaWQtIiwKICAgICAgInNlY3Rpb24iOiAiU3RhdGUgU2VuYXRvciIsCiAgICAgICJ0aXRsZSI6ICJTdGF0ZSBTZW5hdG9yIiwKICAgICAgInR5cGUiOiAiY2FuZGlkYXRlIiwKICAgICAgInNlYXRzIjogMSwKICAgICAgImNhbmRpZGF0ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImlkIjogIlNoYXJvbi1NLUNhcnNvbi0wMzE2MzA4ZSIsCiAgICAgICAgICAibmFtZSI6ICJTaGFyb24gTS4gQ2Fyc29uIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsKICAgICAgICAgICAgIlJlcHVibGljYW4tZjAxNjdjZTciCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiTmFuY3ktSGVuZHJpY2tzLWQzMzA1NTlkIiwKICAgICAgICAgICJuYW1lIjogIk5hbmN5IEhlbmRyaWNrcyIsCiAgICAgICAgICAicGFydHlJZHMiOiBbCiAgICAgICAgICAgICJEZW1vY3JhdGljLWFlYTIwYWRiIgogICAgICAgICAgXQogICAgICAgIH0KICAgICAgXSwKICAgICAgImFsbG93V3JpdGVJbnMiOiB0cnVlCiAgICB9LAogICAgewogICAgICAiaWQiOiAiU3RhdGUtUmVwcmVzZW50YXRpdmVzLTdkM2E4ODIxIiwKICAgICAgImRpc3RyaWN0SWQiOiAidG93bi1pZC0xMjEwMS1wcmVjaW5jdC1pZC0iLAogICAgICAic2VjdGlvbiI6ICJTdGF0ZSBSZXByZXNlbnRhdGl2ZXMiLAogICAgICAidGl0bGUiOiAiU3RhdGUgUmVwcmVzZW50YXRpdmVzIiwKICAgICAgInR5cGUiOiAiY2FuZGlkYXRlIiwKICAgICAgInNlYXRzIjogMTEsCiAgICAgICJjYW5kaWRhdGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJUb255LUxla2FzLWEwNmY3MzY0IiwKICAgICAgICAgICJuYW1lIjogIlRvbnkgTGVrYXMiLAogICAgICAgICAgInBhcnR5SWRzIjogWwogICAgICAgICAgICAiUmVwdWJsaWNhbi1mMDE2N2NlNyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJIZXJzaGVsLU51bmV6LTY4NjIzMTVmIiwKICAgICAgICAgICJuYW1lIjogIkhlcnNoZWwgTnVuZXoiLAogICAgICAgICAgInBhcnR5SWRzIjogWwogICAgICAgICAgICAiUmVwdWJsaWNhbi1mMDE2N2NlNyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJMeW5uZS1PYmVyLWY3MDRkZjE3IiwKICAgICAgICAgICJuYW1lIjogIkx5bm5lIE9iZXIiLAogICAgICAgICAgInBhcnR5SWRzIjogWwogICAgICAgICAgICAiUmVwdWJsaWNhbi1mMDE2N2NlNyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJSdXNzZWxsLU9iZXItZTQzM2FmZWEiLAogICAgICAgICAgIm5hbWUiOiAiUnVzc2VsbCBPYmVyIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsKICAgICAgICAgICAgIlJlcHVibGljYW4tZjAxNjdjZTciCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiQW5kcmV3LVByb3V0LTFjZDI0M2UwIiwKICAgICAgICAgICJuYW1lIjogIkFuZHJldyBQcm91dCIsCiAgICAgICAgICAicGFydHlJZHMiOiBbCiAgICAgICAgICAgICJSZXB1YmxpY2FuLWYwMTY3Y2U3IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImlkIjogIkFuZHJldy1SZW56dWxsby1iMDQyODM3MCIsCiAgICAgICAgICAibmFtZSI6ICJBbmRyZXcgUmVuenVsbG8iLAogICAgICAgICAgInBhcnR5SWRzIjogWwogICAgICAgICAgICAiUmVwdWJsaWNhbi1mMDE2N2NlNyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJLaW1iZXJseS1SaWNlLWZhYWVkMTZhIiwKICAgICAgICAgICJuYW1lIjogIktpbWJlcmx5IFJpY2UiLAogICAgICAgICAgInBhcnR5SWRzIjogWwogICAgICAgICAgICAiUmVwdWJsaWNhbi1mMDE2N2NlNyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJEZW5pc2UtU21pdGgtMGE2MzU5YzMiLAogICAgICAgICAgIm5hbWUiOiAiRGVuaXNlIFNtaXRoIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsKICAgICAgICAgICAgIlJlcHVibGljYW4tZjAxNjdjZTciCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiSm9yZGFuLVVsZXJ5LTI4NTUzNjI3IiwKICAgICAgICAgICJuYW1lIjogIkpvcmRhbiBVbGVyeSIsCiAgICAgICAgICAicGFydHlJZHMiOiBbCiAgICAgICAgICAgICJSZXB1YmxpY2FuLWYwMTY3Y2U3IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImlkIjogIkJvYi1HcmVlbmUtYzAwNmEzYmQiLAogICAgICAgICAgIm5hbWUiOiAiQm9iIEdyZWVuZSIsCiAgICAgICAgICAicGFydHlJZHMiOiBbCiAgICAgICAgICAgICJSZXB1YmxpY2FuLWYwMTY3Y2U3IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImlkIjogIkFsaWNpYS1MZWthcy0yNzEwNDhkOCIsCiAgICAgICAgICAibmFtZSI6ICJBbGljaWEgTGVrYXMiLAogICAgICAgICAgInBhcnR5SWRzIjogWwogICAgICAgICAgICAiUmVwdWJsaWNhbi1mMDE2N2NlNyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJCcmV0dC1HYWdub24tN2E4Yzk4MzgiLAogICAgICAgICAgIm5hbWUiOiAiQnJldHQgR2Fnbm9uIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsKICAgICAgICAgICAgIkRlbW9jcmF0aWMtYWVhMjBhZGIiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiRGF2aWQtSGVubmVzc2V5LWYxMzQzZjRmIiwKICAgICAgICAgICJuYW1lIjogIkRhdmlkIEhlbm5lc3NleSIsCiAgICAgICAgICAicGFydHlJZHMiOiBbCiAgICAgICAgICAgICJEZW1vY3JhdGljLWFlYTIwYWRiIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImlkIjogIkJlYXRyaXotSmF1cmVndWktMTFiODM2NTMiLAogICAgICAgICAgIm5hbWUiOiAiQmVhdHJpeiBKYXVyZWd1aSIsCiAgICAgICAgICAicGFydHlJZHMiOiBbCiAgICAgICAgICAgICJEZW1vY3JhdGljLWFlYTIwYWRiIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImlkIjogIlN0ZXZlbi1LYXRzb3MtMDc3NTg0YjgiLAogICAgICAgICAgIm5hbWUiOiAiU3RldmVuIEthdHNvcyIsCiAgICAgICAgICAicGFydHlJZHMiOiBbCiAgICAgICAgICAgICJEZW1vY3JhdGljLWFlYTIwYWRiIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImlkIjogIkhhcm9sZC1MeW5kZS1hNTRkZjdkNyIsCiAgICAgICAgICAibmFtZSI6ICJIYXJvbGQgTHluZGUiLAogICAgICAgICAgInBhcnR5SWRzIjogWwogICAgICAgICAgICAiRGVtb2NyYXRpYy1hZWEyMGFkYiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJMYW5hLVBhbGl5LTU5NWIyNzZhIiwKICAgICAgICAgICJuYW1lIjogIkxhbmEgUGFsaXkiLAogICAgICAgICAgInBhcnR5SWRzIjogWwogICAgICAgICAgICAiRGVtb2NyYXRpYy1hZWEyMGFkYiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJSb2JlcnQtUy1TaGVybWFuLWYxMGY0YTNmIiwKICAgICAgICAgICJuYW1lIjogIlJvYmVydCBTLiBTaGVybWFuIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsKICAgICAgICAgICAgIkRlbW9jcmF0aWMtYWVhMjBhZGIiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiQWxlamFuZHJvLVVycnV0aWEtMWI1NzRiODYiLAogICAgICAgICAgIm5hbWUiOiAiQWxlamFuZHJvIFVycnV0aWEiLAogICAgICAgICAgInBhcnR5SWRzIjogWwogICAgICAgICAgICAiRGVtb2NyYXRpYy1hZWEyMGFkYiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJUaW1vdGh5LVd5YXR0LTAxMDViOGRlIiwKICAgICAgICAgICJuYW1lIjogIlRpbW90aHkgV3lhdHQiLAogICAgICAgICAgInBhcnR5SWRzIjogWwogICAgICAgICAgICAiRGVtb2NyYXRpYy1hZWEyMGFkYiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJCYXJiYXJhLUEtQmx1ZS0xNDYwODQ2MyIsCiAgICAgICAgICAibmFtZSI6ICJCYXJiYXJhIEEuIEJsdWUiLAogICAgICAgICAgInBhcnR5SWRzIjogWwogICAgICAgICAgICAiRGVtb2NyYXRpYy1hZWEyMGFkYiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJOYW5jeS1TLUJydWNrZXItNDQ3MWZhZjciLAogICAgICAgICAgIm5hbWUiOiAiTmFuY3kgUy4gQnJ1Y2tlciIsCiAgICAgICAgICAicGFydHlJZHMiOiBbCiAgICAgICAgICAgICJEZW1vY3JhdGljLWFlYTIwYWRiIgogICAgICAgICAgXQogICAgICAgIH0KICAgICAgXSwKICAgICAgImFsbG93V3JpdGVJbnMiOiB0cnVlCiAgICB9LAogICAgewogICAgICAiaWQiOiAiU2hlcmlmZi00MjQzZmUwYiIsCiAgICAgICJkaXN0cmljdElkIjogInRvd24taWQtMTIxMDEtcHJlY2luY3QtaWQtIiwKICAgICAgInNlY3Rpb24iOiAiU2hlcmlmZiIsCiAgICAgICJ0aXRsZSI6ICJTaGVyaWZmIiwKICAgICAgInR5cGUiOiAiY2FuZGlkYXRlIiwKICAgICAgInNlYXRzIjogMSwKICAgICAgImNhbmRpZGF0ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImlkIjogIkNocmlzdG9waGVyLUNvbm5lbGx5LTk3MGIyMzY0IiwKICAgICAgICAgICJuYW1lIjogIkNocmlzdG9waGVyIENvbm5lbGx5IiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsKICAgICAgICAgICAgIlJlcHVibGljYW4tZjAxNjdjZTciCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiQmlsbC1CYXJyeS0wZTY3N2NhNiIsCiAgICAgICAgICAibmFtZSI6ICJCaWxsIEJhcnJ5IiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsKICAgICAgICAgICAgIkRlbW9jcmF0aWMtYWVhMjBhZGIiCiAgICAgICAgICBdCiAgICAgICAgfQogICAgICBdLAogICAgICAiYWxsb3dXcml0ZUlucyI6IHRydWUKICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJDb3VudHktQXR0b3JuZXktMTMzZjkxMGYiLAogICAgICAiZGlzdHJpY3RJZCI6ICJ0b3duLWlkLTEyMTAxLXByZWNpbmN0LWlkLSIsCiAgICAgICJzZWN0aW9uIjogIkNvdW50eSBBdHRvcm5leSIsCiAgICAgICJ0aXRsZSI6ICJDb3VudHkgQXR0b3JuZXkiLAogICAgICAidHlwZSI6ICJjYW5kaWRhdGUiLAogICAgICAic2VhdHMiOiAxLAogICAgICAiY2FuZGlkYXRlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiSm9obi1KLUNvdWdobGluLTBlN2JmOTNjIiwKICAgICAgICAgICJuYW1lIjogIkpvaG4gSi4gQ291Z2hsaW4iLAogICAgICAgICAgInBhcnR5SWRzIjogWwogICAgICAgICAgICAiUmVwdWJsaWNhbi1mMDE2N2NlNyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJNaWNoYWVsLUNvbmxvbi0xYTYxZmExNiIsCiAgICAgICAgICAibmFtZSI6ICJNaWNoYWVsIENvbmxvbiIsCiAgICAgICAgICAicGFydHlJZHMiOiBbCiAgICAgICAgICAgICJEZW1vY3JhdGljLWFlYTIwYWRiIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImlkIjogIk5pY2hvbGFzLVNhcndhcmstYzhmMTE1ZTIiLAogICAgICAgICAgIm5hbWUiOiAiTmljaG9sYXMgU2Fyd2FyayIsCiAgICAgICAgICAicGFydHlJZHMiOiBbCiAgICAgICAgICAgICJPQy0zYTM4NmQyYiIKICAgICAgICAgIF0KICAgICAgICB9CiAgICAgIF0sCiAgICAgICJhbGxvd1dyaXRlSW5zIjogdHJ1ZQogICAgfSwKICAgIHsKICAgICAgImlkIjogIkNvdW50eS1UcmVhc3VyZXItODdkMjVhMzEiLAogICAgICAiZGlzdHJpY3RJZCI6ICJ0b3duLWlkLTEyMTAxLXByZWNpbmN0LWlkLSIsCiAgICAgICJzZWN0aW9uIjogIkNvdW50eSBUcmVhc3VyZXIiLAogICAgICAidGl0bGUiOiAiQ291bnR5IFRyZWFzdXJlciIsCiAgICAgICJ0eXBlIjogImNhbmRpZGF0ZSIsCiAgICAgICJzZWF0cyI6IDEsCiAgICAgICJjYW5kaWRhdGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJEYXZpZC1HLUZyZWRldHRlLTY4N2YwMWFlIiwKICAgICAgICAgICJuYW1lIjogIkRhdmlkIEcuIEZyZWRldHRlIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsKICAgICAgICAgICAgIlJlcHVibGljYW4tZjAxNjdjZTciCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiV2lsbGlhbS1CcnlrLWVhZjkzNmVjIiwKICAgICAgICAgICJuYW1lIjogIldpbGxpYW0gQnJ5ayIsCiAgICAgICAgICAicGFydHlJZHMiOiBbCiAgICAgICAgICAgICJEZW1vY3JhdGljLWFlYTIwYWRiIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImlkIjogIlJpY2hhcmQtTWFuem8tYzVmY2M4NzYiLAogICAgICAgICAgIm5hbWUiOiAiUmljaGFyZCBNYW56byIsCiAgICAgICAgICAicGFydHlJZHMiOiBbCiAgICAgICAgICAgICJPQy0zYTM4NmQyYiIKICAgICAgICAgIF0KICAgICAgICB9CiAgICAgIF0sCiAgICAgICJhbGxvd1dyaXRlSW5zIjogdHJ1ZQogICAgfSwKICAgIHsKICAgICAgImlkIjogIlJlZ2lzdGVyLW9mLURlZWRzLWExMjc4ZGYyIiwKICAgICAgImRpc3RyaWN0SWQiOiAidG93bi1pZC0xMjEwMS1wcmVjaW5jdC1pZC0iLAogICAgICAic2VjdGlvbiI6ICJSZWdpc3RlciBvZiBEZWVkcyIsCiAgICAgICJ0aXRsZSI6ICJSZWdpc3RlciBvZiBEZWVkcyIsCiAgICAgICJ0eXBlIjogImNhbmRpZGF0ZSIsCiAgICAgICJzZWF0cyI6IDEsCiAgICAgICJjYW5kaWRhdGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJKYWNrLUZsYW5hZ2FuLTc4ZTI0Y2FiIiwKICAgICAgICAgICJuYW1lIjogIkphY2sgRmxhbmFnYW4iLAogICAgICAgICAgInBhcnR5SWRzIjogWwogICAgICAgICAgICAiUmVwdWJsaWNhbi1mMDE2N2NlNyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJNYXJ5LUFubi1Dcm93ZWxsLWUxZmY1OWI5IiwKICAgICAgICAgICJuYW1lIjogIk1hcnkgQW5uIENyb3dlbGwiLAogICAgICAgICAgInBhcnR5SWRzIjogWwogICAgICAgICAgICAiRGVtb2NyYXRpYy1hZWEyMGFkYiIKICAgICAgICAgIF0KICAgICAgICB9CiAgICAgIF0sCiAgICAgICJhbGxvd1dyaXRlSW5zIjogdHJ1ZQogICAgfSwKICAgIHsKICAgICAgImlkIjogIlJlZ2lzdGVyLW9mLVByb2JhdGUtYTQxMTdkYTgiLAogICAgICAiZGlzdHJpY3RJZCI6ICJ0b3duLWlkLTEyMTAxLXByZWNpbmN0LWlkLSIsCiAgICAgICJzZWN0aW9uIjogIlJlZ2lzdGVyIG9mIFByb2JhdGUiLAogICAgICAidGl0bGUiOiAiUmVnaXN0ZXIgb2YgUHJvYmF0ZSIsCiAgICAgICJ0eXBlIjogImNhbmRpZGF0ZSIsCiAgICAgICJzZWF0cyI6IDEsCiAgICAgICJjYW5kaWRhdGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJFbGl6YWJldGgtQW5uLU1vcmVhdS1hZWMwN2JiNCIsCiAgICAgICAgICAibmFtZSI6ICJFbGl6YWJldGggQW5uIE1vcmVhdSIsCiAgICAgICAgICAicGFydHlJZHMiOiBbCiAgICAgICAgICAgICJSZXB1YmxpY2FuLWYwMTY3Y2U3IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImlkIjogIkVsaXphYmV0aC1Sb3BwLTQwMzVlZWQxIiwKICAgICAgICAgICJuYW1lIjogIkVsaXphYmV0aCBSb3BwIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsKICAgICAgICAgICAgIkRlbW9jcmF0aWMtYWVhMjBhZGIiCiAgICAgICAgICBdCiAgICAgICAgfQogICAgICBdLAogICAgICAiYWxsb3dXcml0ZUlucyI6IHRydWUKICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJDb3VudHktQ29tbWlzc2lvbmVyLWQ2ZmVlZDI1IiwKICAgICAgImRpc3RyaWN0SWQiOiAidG93bi1pZC0xMjEwMS1wcmVjaW5jdC1pZC0iLAogICAgICAic2VjdGlvbiI6ICJDb3VudHkgQ29tbWlzc2lvbmVyIiwKICAgICAgInRpdGxlIjogIkNvdW50eSBDb21taXNzaW9uZXIiLAogICAgICAidHlwZSI6ICJjYW5kaWRhdGUiLAogICAgICAic2VhdHMiOiAxLAogICAgICAiY2FuZGlkYXRlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiTWljaGFlbC1Tb3VjeS1iMjNmN2MyZCIsCiAgICAgICAgICAibmFtZSI6ICJNaWNoYWVsIFNvdWN5IiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsKICAgICAgICAgICAgIlJlcHVibGljYW4tZjAxNjdjZTciCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiRGFuaWVsLUMtSGFuc2JlcnJ5LThjMDI5MWVjIiwKICAgICAgICAgICJuYW1lIjogIkRhbmllbCBDLiBIYW5zYmVycnkiLAogICAgICAgICAgInBhcnR5SWRzIjogWwogICAgICAgICAgICAiRGVtb2NyYXRpYy1hZWEyMGFkYiIKICAgICAgICAgIF0KICAgICAgICB9CiAgICAgIF0sCiAgICAgICJhbGxvd1dyaXRlSW5zIjogdHJ1ZQogICAgfQogIF0sCiAgImdyaWRMYXlvdXRzIjogWwogICAgewogICAgICAicHJlY2luY3RJZCI6ICJ0b3duLWlkLTEyMTAxLXByZWNpbmN0LWlkLSIsCiAgICAgICJiYWxsb3RTdHlsZUlkIjogImNhcmQtbnVtYmVyLTU0IiwKICAgICAgImNvbHVtbnMiOiAzNCwKICAgICAgInJvd3MiOiA1MywKICAgICAgImdyaWRQb3NpdGlvbnMiOiBbCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxMiwKICAgICAgICAgICJyb3ciOiA5LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJQcmVzaWRlbnQtYW5kLVZpY2UtUHJlc2lkZW50LW9mLXRoZS1Vbml0ZWQtU3RhdGVzLTE4ZDFhNTVhIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJEb25hbGQtSi1UcnVtcC1hbmQtTWljaGFlbC1SLVBlbmNlLTNlM2YzMWE3IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxMiwKICAgICAgICAgICJyb3ciOiAxMywKICAgICAgICAgICJjb250ZXN0SWQiOiAiR292ZXJub3ItMDYxYTQwMWIiLAogICAgICAgICAgIm9wdGlvbklkIjogIkNocmlzLVN1bnVudS0xMzAxMjRmNyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMTIsCiAgICAgICAgICAicm93IjogMTYsCiAgICAgICAgICAiY29udGVzdElkIjogIlVuaXRlZC1TdGF0ZXMtU2VuYXRvci1kM2YxYzc1YiIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiQ29ya3ktTWVzc25lci1iNmViMjE2ZCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMTIsCiAgICAgICAgICAicm93IjogMTksCiAgICAgICAgICAiY29udGVzdElkIjogIlJlcHJlc2VudGF0aXZlLWluLUNvbmdyZXNzLTI0NjgzYjQ0IiwKICAgICAgICAgICJvcHRpb25JZCI6ICJTdGV2ZW4tTmVncm9uLTVkNDgyZDcyIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxMiwKICAgICAgICAgICJyb3ciOiAyMiwKICAgICAgICAgICJjb250ZXN0SWQiOiAiRXhlY3V0aXZlLUNvdW5jaWxvci1iYjIyNTU3ZiIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiRGF2ZS1XaGVlbGVyLWRlMjI0MmVlIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxMiwKICAgICAgICAgICJyb3ciOiAyNSwKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtU2VuYXRvci0zOTEzODFmOCIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiU2hhcm9uLU0tQ2Fyc29uLTAzMTYzMDhlIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxMiwKICAgICAgICAgICJyb3ciOiAyOSwKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtUmVwcmVzZW50YXRpdmVzLTdkM2E4ODIxIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJUb255LUxla2FzLWEwNmY3MzY0IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxMiwKICAgICAgICAgICJyb3ciOiAzMSwKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtUmVwcmVzZW50YXRpdmVzLTdkM2E4ODIxIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJIZXJzaGVsLU51bmV6LTY4NjIzMTVmIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxMiwKICAgICAgICAgICJyb3ciOiAzMywKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtUmVwcmVzZW50YXRpdmVzLTdkM2E4ODIxIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJMeW5uZS1PYmVyLWY3MDRkZjE3IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxMiwKICAgICAgICAgICJyb3ciOiAzNSwKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtUmVwcmVzZW50YXRpdmVzLTdkM2E4ODIxIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJSdXNzZWxsLU9iZXItZTQzM2FmZWEiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDEyLAogICAgICAgICAgInJvdyI6IDM3LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJTdGF0ZS1SZXByZXNlbnRhdGl2ZXMtN2QzYTg4MjEiLAogICAgICAgICAgIm9wdGlvbklkIjogIkFuZHJldy1Qcm91dC0xY2QyNDNlMCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMTIsCiAgICAgICAgICAicm93IjogMzksCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlcy03ZDNhODgyMSIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiQW5kcmV3LVJlbnp1bGxvLWIwNDI4MzcwIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxMiwKICAgICAgICAgICJyb3ciOiA0MSwKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtUmVwcmVzZW50YXRpdmVzLTdkM2E4ODIxIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJLaW1iZXJseS1SaWNlLWZhYWVkMTZhIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxMiwKICAgICAgICAgICJyb3ciOiA0MywKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtUmVwcmVzZW50YXRpdmVzLTdkM2E4ODIxIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJEZW5pc2UtU21pdGgtMGE2MzU5YzMiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDEyLAogICAgICAgICAgInJvdyI6IDQ1LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJTdGF0ZS1SZXByZXNlbnRhdGl2ZXMtN2QzYTg4MjEiLAogICAgICAgICAgIm9wdGlvbklkIjogIkpvcmRhbi1VbGVyeS0yODU1MzYyNyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMTIsCiAgICAgICAgICAicm93IjogNDcsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlcy03ZDNhODgyMSIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiQm9iLUdyZWVuZS1jMDA2YTNiZCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMTIsCiAgICAgICAgICAicm93IjogNDksCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlcy03ZDNhODgyMSIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiQWxpY2lhLUxla2FzLTI3MTA0OGQ4IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImJhY2siLAogICAgICAgICAgImNvbHVtbiI6IDEyLAogICAgICAgICAgInJvdyI6IDQsCiAgICAgICAgICAiY29udGVzdElkIjogIlNoZXJpZmYtNDI0M2ZlMGIiLAogICAgICAgICAgIm9wdGlvbklkIjogIkNocmlzdG9waGVyLUNvbm5lbGx5LTk3MGIyMzY0IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImJhY2siLAogICAgICAgICAgImNvbHVtbiI6IDEyLAogICAgICAgICAgInJvdyI6IDcsCiAgICAgICAgICAiY29udGVzdElkIjogIkNvdW50eS1BdHRvcm5leS0xMzNmOTEwZiIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiSm9obi1KLUNvdWdobGluLTBlN2JmOTNjIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImJhY2siLAogICAgICAgICAgImNvbHVtbiI6IDEyLAogICAgICAgICAgInJvdyI6IDEwLAogICAgICAgICAgImNvbnRlc3RJZCI6ICJDb3VudHktVHJlYXN1cmVyLTg3ZDI1YTMxIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJEYXZpZC1HLUZyZWRldHRlLTY4N2YwMWFlIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImJhY2siLAogICAgICAgICAgImNvbHVtbiI6IDEyLAogICAgICAgICAgInJvdyI6IDEzLAogICAgICAgICAgImNvbnRlc3RJZCI6ICJSZWdpc3Rlci1vZi1EZWVkcy1hMTI3OGRmMiIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiSmFjay1GbGFuYWdhbi03OGUyNGNhYiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJiYWNrIiwKICAgICAgICAgICJjb2x1bW4iOiAxMiwKICAgICAgICAgICJyb3ciOiAxNiwKICAgICAgICAgICJjb250ZXN0SWQiOiAiUmVnaXN0ZXItb2YtUHJvYmF0ZS1hNDExN2RhOCIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiRWxpemFiZXRoLUFubi1Nb3JlYXUtYWVjMDdiYjQiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiYmFjayIsCiAgICAgICAgICAiY29sdW1uIjogMTIsCiAgICAgICAgICAicm93IjogMTksCiAgICAgICAgICAiY29udGVzdElkIjogIkNvdW50eS1Db21taXNzaW9uZXItZDZmZWVkMjUiLAogICAgICAgICAgIm9wdGlvbklkIjogIk1pY2hhZWwtU291Y3ktYjIzZjdjMmQiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDE5LAogICAgICAgICAgInJvdyI6IDksCiAgICAgICAgICAiY29udGVzdElkIjogIlByZXNpZGVudC1hbmQtVmljZS1QcmVzaWRlbnQtb2YtdGhlLVVuaXRlZC1TdGF0ZXMtMThkMWE1NWEiLAogICAgICAgICAgIm9wdGlvbklkIjogIkpvc2VwaC1SLUJpZGVuLWFuZC1LYW1hbGEtRC1IYXJyaXMtMzQ2NzU2YzAiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDE5LAogICAgICAgICAgInJvdyI6IDEzLAogICAgICAgICAgImNvbnRlc3RJZCI6ICJHb3Zlcm5vci0wNjFhNDAxYiIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiRGFuLUZlbHRlcy0zZmFkZjc5OCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMTksCiAgICAgICAgICAicm93IjogMTYsCiAgICAgICAgICAiY29udGVzdElkIjogIlVuaXRlZC1TdGF0ZXMtU2VuYXRvci1kM2YxYzc1YiIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiSmVhbm5lLVNoYWhlZW4tNmUxOTYyMmQiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDE5LAogICAgICAgICAgInJvdyI6IDE5LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJSZXByZXNlbnRhdGl2ZS1pbi1Db25ncmVzcy0yNDY4M2I0NCIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiQW5uLU1jTGFuZS1LdXN0ZXItNjdmZGYwNjAiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDE5LAogICAgICAgICAgInJvdyI6IDIyLAogICAgICAgICAgImNvbnRlc3RJZCI6ICJFeGVjdXRpdmUtQ291bmNpbG9yLWJiMjI1NTdmIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJEZWJvcmEtQi1QaWduYXRlbGxpLThjNGNjMWQzIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxOSwKICAgICAgICAgICJyb3ciOiAyNSwKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtU2VuYXRvci0zOTEzODFmOCIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiTmFuY3ktSGVuZHJpY2tzLWQzMzA1NTlkIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxOSwKICAgICAgICAgICJyb3ciOiAyOCwKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtUmVwcmVzZW50YXRpdmVzLTdkM2E4ODIxIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJCcmV0dC1HYWdub24tN2E4Yzk4MzgiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDE5LAogICAgICAgICAgInJvdyI6IDMwLAogICAgICAgICAgImNvbnRlc3RJZCI6ICJTdGF0ZS1SZXByZXNlbnRhdGl2ZXMtN2QzYTg4MjEiLAogICAgICAgICAgIm9wdGlvbklkIjogIkRhdmlkLUhlbm5lc3NleS1mMTM0M2Y0ZiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMTksCiAgICAgICAgICAicm93IjogMzIsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlcy03ZDNhODgyMSIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiQmVhdHJpei1KYXVyZWd1aS0xMWI4MzY1MyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMTksCiAgICAgICAgICAicm93IjogMzQsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlcy03ZDNhODgyMSIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiU3RldmVuLUthdHNvcy0wNzc1ODRiOCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMTksCiAgICAgICAgICAicm93IjogMzYsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlcy03ZDNhODgyMSIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiSGFyb2xkLUx5bmRlLWE1NGRmN2Q3IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxOSwKICAgICAgICAgICJyb3ciOiAzOCwKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtUmVwcmVzZW50YXRpdmVzLTdkM2E4ODIxIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJMYW5hLVBhbGl5LTU5NWIyNzZhIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxOSwKICAgICAgICAgICJyb3ciOiA0MCwKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtUmVwcmVzZW50YXRpdmVzLTdkM2E4ODIxIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJSb2JlcnQtUy1TaGVybWFuLWYxMGY0YTNmIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxOSwKICAgICAgICAgICJyb3ciOiA0MiwKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtUmVwcmVzZW50YXRpdmVzLTdkM2E4ODIxIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJBbGVqYW5kcm8tVXJydXRpYS0xYjU3NGI4NiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMTksCiAgICAgICAgICAicm93IjogNDQsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlcy03ZDNhODgyMSIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiVGltb3RoeS1XeWF0dC0wMTA1YjhkZSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMTksCiAgICAgICAgICAicm93IjogNDYsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlcy03ZDNhODgyMSIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiQmFyYmFyYS1BLUJsdWUtMTQ2MDg0NjMiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDE5LAogICAgICAgICAgInJvdyI6IDQ4LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJTdGF0ZS1SZXByZXNlbnRhdGl2ZXMtN2QzYTg4MjEiLAogICAgICAgICAgIm9wdGlvbklkIjogIk5hbmN5LVMtQnJ1Y2tlci00NDcxZmFmNyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJiYWNrIiwKICAgICAgICAgICJjb2x1bW4iOiAxOSwKICAgICAgICAgICJyb3ciOiA0LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJTaGVyaWZmLTQyNDNmZTBiIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJCaWxsLUJhcnJ5LTBlNjc3Y2E2IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImJhY2siLAogICAgICAgICAgImNvbHVtbiI6IDE5LAogICAgICAgICAgInJvdyI6IDcsCiAgICAgICAgICAiY29udGVzdElkIjogIkNvdW50eS1BdHRvcm5leS0xMzNmOTEwZiIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiTWljaGFlbC1Db25sb24tMWE2MWZhMTYiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiYmFjayIsCiAgICAgICAgICAiY29sdW1uIjogMTksCiAgICAgICAgICAicm93IjogMTAsCiAgICAgICAgICAiY29udGVzdElkIjogIkNvdW50eS1UcmVhc3VyZXItODdkMjVhMzEiLAogICAgICAgICAgIm9wdGlvbklkIjogIldpbGxpYW0tQnJ5ay1lYWY5MzZlYyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJiYWNrIiwKICAgICAgICAgICJjb2x1bW4iOiAxOSwKICAgICAgICAgICJyb3ciOiAxMywKICAgICAgICAgICJjb250ZXN0SWQiOiAiUmVnaXN0ZXItb2YtRGVlZHMtYTEyNzhkZjIiLAogICAgICAgICAgIm9wdGlvbklkIjogIk1hcnktQW5uLUNyb3dlbGwtZTFmZjU5YjkiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiYmFjayIsCiAgICAgICAgICAiY29sdW1uIjogMTksCiAgICAgICAgICAicm93IjogMTYsCiAgICAgICAgICAiY29udGVzdElkIjogIlJlZ2lzdGVyLW9mLVByb2JhdGUtYTQxMTdkYTgiLAogICAgICAgICAgIm9wdGlvbklkIjogIkVsaXphYmV0aC1Sb3BwLTQwMzVlZWQxIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImJhY2siLAogICAgICAgICAgImNvbHVtbiI6IDE5LAogICAgICAgICAgInJvdyI6IDE5LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJDb3VudHktQ29tbWlzc2lvbmVyLWQ2ZmVlZDI1IiwKICAgICAgICAgICJvcHRpb25JZCI6ICJEYW5pZWwtQy1IYW5zYmVycnktOGMwMjkxZWMiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDI2LAogICAgICAgICAgInJvdyI6IDksCiAgICAgICAgICAiY29udGVzdElkIjogIlByZXNpZGVudC1hbmQtVmljZS1QcmVzaWRlbnQtb2YtdGhlLVVuaXRlZC1TdGF0ZXMtMThkMWE1NWEiLAogICAgICAgICAgIm9wdGlvbklkIjogIkpvLUpvcmdlbnNlbi1hbmQtSmVyZW15LUNvaGVuLTdlOTgxMjM0IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAyNiwKICAgICAgICAgICJyb3ciOiAxMywKICAgICAgICAgICJjb250ZXN0SWQiOiAiR292ZXJub3ItMDYxYTQwMWIiLAogICAgICAgICAgIm9wdGlvbklkIjogIkRhcnJ5bC1XLVBlcnJ5LTJmMDdjNDU1IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAyNiwKICAgICAgICAgICJyb3ciOiAxNiwKICAgICAgICAgICJjb250ZXN0SWQiOiAiVW5pdGVkLVN0YXRlcy1TZW5hdG9yLWQzZjFjNzViIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJKdXN0aW4tTy1Eb25uZWxsLWVjNzE3NjBjIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAyNiwKICAgICAgICAgICJyb3ciOiAxOSwKICAgICAgICAgICJjb250ZXN0SWQiOiAiUmVwcmVzZW50YXRpdmUtaW4tQ29uZ3Jlc3MtMjQ2ODNiNDQiLAogICAgICAgICAgIm9wdGlvbklkIjogIkFuZHJldy1PbGRpbmctYmVkMzNmMDgiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiYmFjayIsCiAgICAgICAgICAiY29sdW1uIjogMjYsCiAgICAgICAgICAicm93IjogNywKICAgICAgICAgICJjb250ZXN0SWQiOiAiQ291bnR5LUF0dG9ybmV5LTEzM2Y5MTBmIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJOaWNob2xhcy1TYXJ3YXJrLWM4ZjExNWUyIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImJhY2siLAogICAgICAgICAgImNvbHVtbiI6IDI2LAogICAgICAgICAgInJvdyI6IDEwLAogICAgICAgICAgImNvbnRlc3RJZCI6ICJDb3VudHktVHJlYXN1cmVyLTg3ZDI1YTMxIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJSaWNoYXJkLU1hbnpvLWM1ZmNjODc2IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAid3JpdGUtaW4iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDMyLAogICAgICAgICAgInJvdyI6IDksCiAgICAgICAgICAiY29udGVzdElkIjogIlByZXNpZGVudC1hbmQtVmljZS1QcmVzaWRlbnQtb2YtdGhlLVVuaXRlZC1TdGF0ZXMtMThkMWE1NWEiLAogICAgICAgICAgIndyaXRlSW5JbmRleCI6IDAKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIndyaXRlLWluIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAzMiwKICAgICAgICAgICJyb3ciOiAxMywKICAgICAgICAgICJjb250ZXN0SWQiOiAiR292ZXJub3ItMDYxYTQwMWIiLAogICAgICAgICAgIndyaXRlSW5JbmRleCI6IDAKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIndyaXRlLWluIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAzMiwKICAgICAgICAgICJyb3ciOiAxNiwKICAgICAgICAgICJjb250ZXN0SWQiOiAiVW5pdGVkLVN0YXRlcy1TZW5hdG9yLWQzZjFjNzViIiwKICAgICAgICAgICJ3cml0ZUluSW5kZXgiOiAwCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJ3cml0ZS1pbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMzIsCiAgICAgICAgICAicm93IjogMTksCiAgICAgICAgICAiY29udGVzdElkIjogIlJlcHJlc2VudGF0aXZlLWluLUNvbmdyZXNzLTI0NjgzYjQ0IiwKICAgICAgICAgICJ3cml0ZUluSW5kZXgiOiAwCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJ3cml0ZS1pbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMzIsCiAgICAgICAgICAicm93IjogMjIsCiAgICAgICAgICAiY29udGVzdElkIjogIkV4ZWN1dGl2ZS1Db3VuY2lsb3ItYmIyMjU1N2YiLAogICAgICAgICAgIndyaXRlSW5JbmRleCI6IDAKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIndyaXRlLWluIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAzMiwKICAgICAgICAgICJyb3ciOiAyNSwKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtU2VuYXRvci0zOTEzODFmOCIsCiAgICAgICAgICAid3JpdGVJbkluZGV4IjogMAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAid3JpdGUtaW4iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDMyLAogICAgICAgICAgInJvdyI6IDI4LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJTdGF0ZS1SZXByZXNlbnRhdGl2ZXMtN2QzYTg4MjEiLAogICAgICAgICAgIndyaXRlSW5JbmRleCI6IDEwCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJ3cml0ZS1pbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMzIsCiAgICAgICAgICAicm93IjogMzAsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlcy03ZDNhODgyMSIsCiAgICAgICAgICAid3JpdGVJbkluZGV4IjogOQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAid3JpdGUtaW4iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDMyLAogICAgICAgICAgInJvdyI6IDMyLAogICAgICAgICAgImNvbnRlc3RJZCI6ICJTdGF0ZS1SZXByZXNlbnRhdGl2ZXMtN2QzYTg4MjEiLAogICAgICAgICAgIndyaXRlSW5JbmRleCI6IDgKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIndyaXRlLWluIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAzMiwKICAgICAgICAgICJyb3ciOiAzNCwKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtUmVwcmVzZW50YXRpdmVzLTdkM2E4ODIxIiwKICAgICAgICAgICJ3cml0ZUluSW5kZXgiOiA3CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJ3cml0ZS1pbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMzIsCiAgICAgICAgICAicm93IjogMzYsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlcy03ZDNhODgyMSIsCiAgICAgICAgICAid3JpdGVJbkluZGV4IjogNgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAid3JpdGUtaW4iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDMyLAogICAgICAgICAgInJvdyI6IDM4LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJTdGF0ZS1SZXByZXNlbnRhdGl2ZXMtN2QzYTg4MjEiLAogICAgICAgICAgIndyaXRlSW5JbmRleCI6IDUKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIndyaXRlLWluIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAzMiwKICAgICAgICAgICJyb3ciOiA0MCwKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtUmVwcmVzZW50YXRpdmVzLTdkM2E4ODIxIiwKICAgICAgICAgICJ3cml0ZUluSW5kZXgiOiA0CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJ3cml0ZS1pbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMzIsCiAgICAgICAgICAicm93IjogNDIsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlcy03ZDNhODgyMSIsCiAgICAgICAgICAid3JpdGVJbkluZGV4IjogMwogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAid3JpdGUtaW4iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDMyLAogICAgICAgICAgInJvdyI6IDQ0LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJTdGF0ZS1SZXByZXNlbnRhdGl2ZXMtN2QzYTg4MjEiLAogICAgICAgICAgIndyaXRlSW5JbmRleCI6IDIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIndyaXRlLWluIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAzMiwKICAgICAgICAgICJyb3ciOiA0NiwKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtUmVwcmVzZW50YXRpdmVzLTdkM2E4ODIxIiwKICAgICAgICAgICJ3cml0ZUluSW5kZXgiOiAxCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJ3cml0ZS1pbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMzIsCiAgICAgICAgICAicm93IjogNDgsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlcy03ZDNhODgyMSIsCiAgICAgICAgICAid3JpdGVJbkluZGV4IjogMAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAid3JpdGUtaW4iLAogICAgICAgICAgInNpZGUiOiAiYmFjayIsCiAgICAgICAgICAiY29sdW1uIjogMzIsCiAgICAgICAgICAicm93IjogNCwKICAgICAgICAgICJjb250ZXN0SWQiOiAiU2hlcmlmZi00MjQzZmUwYiIsCiAgICAgICAgICAid3JpdGVJbkluZGV4IjogMAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAid3JpdGUtaW4iLAogICAgICAgICAgInNpZGUiOiAiYmFjayIsCiAgICAgICAgICAiY29sdW1uIjogMzIsCiAgICAgICAgICAicm93IjogNywKICAgICAgICAgICJjb250ZXN0SWQiOiAiQ291bnR5LUF0dG9ybmV5LTEzM2Y5MTBmIiwKICAgICAgICAgICJ3cml0ZUluSW5kZXgiOiAwCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJ3cml0ZS1pbiIsCiAgICAgICAgICAic2lkZSI6ICJiYWNrIiwKICAgICAgICAgICJjb2x1bW4iOiAzMiwKICAgICAgICAgICJyb3ciOiAxMCwKICAgICAgICAgICJjb250ZXN0SWQiOiAiQ291bnR5LVRyZWFzdXJlci04N2QyNWEzMSIsCiAgICAgICAgICAid3JpdGVJbkluZGV4IjogMAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAid3JpdGUtaW4iLAogICAgICAgICAgInNpZGUiOiAiYmFjayIsCiAgICAgICAgICAiY29sdW1uIjogMzIsCiAgICAgICAgICAicm93IjogMTMsCiAgICAgICAgICAiY29udGVzdElkIjogIlJlZ2lzdGVyLW9mLURlZWRzLWExMjc4ZGYyIiwKICAgICAgICAgICJ3cml0ZUluSW5kZXgiOiAwCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJ3cml0ZS1pbiIsCiAgICAgICAgICAic2lkZSI6ICJiYWNrIiwKICAgICAgICAgICJjb2x1bW4iOiAzMiwKICAgICAgICAgICJyb3ciOiAxNiwKICAgICAgICAgICJjb250ZXN0SWQiOiAiUmVnaXN0ZXItb2YtUHJvYmF0ZS1hNDExN2RhOCIsCiAgICAgICAgICAid3JpdGVJbkluZGV4IjogMAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAid3JpdGUtaW4iLAogICAgICAgICAgInNpZGUiOiAiYmFjayIsCiAgICAgICAgICAiY29sdW1uIjogMzIsCiAgICAgICAgICAicm93IjogMTksCiAgICAgICAgICAiY29udGVzdElkIjogIkNvdW50eS1Db21taXNzaW9uZXItZDZmZWVkMjUiLAogICAgICAgICAgIndyaXRlSW5JbmRleCI6IDAKICAgICAgICB9CiAgICAgIF0KICAgIH0KICBdLAogICJjb3VudHkiOiB7CiAgICAiaWQiOiAiMTIxMDEiLAogICAgIm5hbWUiOiAiSHVkc29uIgogIH0sCiAgImRhdGUiOiAiMjAyMC0xMS0wM1QxMjowMDowMC4wMDAtMDU6MDAiLAogICJkaXN0cmljdHMiOiBbCiAgICB7CiAgICAgICJpZCI6ICJ0b3duLWlkLTEyMTAxLXByZWNpbmN0LWlkLSIsCiAgICAgICJuYW1lIjogIkh1ZHNvbiIKICAgIH0KICBdLAogICJtYXJrVGhyZXNob2xkcyI6IHsKICAgICJtYXJnaW5hbCI6IDAuMDUsCiAgICAiZGVmaW5pdGUiOiAwLjA4CiAgfSwKICAicGFydGllcyI6IFsKICAgIHsKICAgICAgImlkIjogIlJlcHVibGljYW4tZjAxNjdjZTciLAogICAgICAibmFtZSI6ICJSZXB1YmxpY2FuIiwKICAgICAgImZ1bGxOYW1lIjogIlJlcHVibGljYW4iLAogICAgICAiYWJicmV2IjogIlJlcHVibGljYW4iCiAgICB9LAogICAgewogICAgICAiaWQiOiAiRGVtb2NyYXRpYy1hZWEyMGFkYiIsCiAgICAgICJuYW1lIjogIkRlbW9jcmF0aWMiLAogICAgICAiZnVsbE5hbWUiOiAiRGVtb2NyYXRpYyIsCiAgICAgICJhYmJyZXYiOiAiRGVtb2NyYXRpYyIKICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJPQy0zYTM4NmQyYiIsCiAgICAgICJuYW1lIjogIk9DIiwKICAgICAgImZ1bGxOYW1lIjogIk9DIiwKICAgICAgImFiYnJldiI6ICJPQyIKICAgIH0KICBdLAogICJwcmVjaW5jdFNjYW5BZGp1ZGljYXRpb25SZWFzb25zIjogWwogICAgIlVuaW50ZXJwcmV0YWJsZUJhbGxvdCIsCiAgICAiT3ZlcnZvdGUiCiAgXSwKICAicHJlY2luY3RzIjogWwogICAgewogICAgICAiaWQiOiAidG93bi1pZC0xMjEwMS1wcmVjaW5jdC1pZC0iLAogICAgICAibmFtZSI6ICJIdWRzb24iCiAgICB9CiAgXSwKICAic2VhbFVybCI6ICIvc2VhbHMvU2VhbF9vZl9OZXdfSGFtcHNoaXJlLnN2ZyIsCiAgInN0YXRlIjogIk5IIiwKICAidGl0bGUiOiAiR2VuZXJhbCBFbGVjdGlvbiIKfQ==';

/**
 * MIME type of data/electionGridLayoutNewHampshireHudson/election.json.
 */
export const mimeType = 'application/json';

/**
 * Path to a file containing this file's contents.
 *
 * SHA-256 hash of file data: 51e3d058b80ef04c6a91a4efafe4286fd3203998e94578c7e8804fd4491554e4
 */
export function asFilePath(): string {
  const directoryPath = mkdtempSync(tmpdir() + sep);
  const filePath = join(directoryPath, 'election.json');
  writeFileSync(filePath, asBuffer());
  return filePath;
}

/**
 * Convert to a `data:` URL of data/electionGridLayoutNewHampshireHudson/election.json, suitable for embedding in HTML.
 *
 * SHA-256 hash of file data: 51e3d058b80ef04c6a91a4efafe4286fd3203998e94578c7e8804fd4491554e4
 */
export function asDataUrl(): string {
  return `data:${mimeType};base64,${resourceDataBase64}`;
}

/**
 * Raw data of data/electionGridLayoutNewHampshireHudson/election.json.
 *
 * SHA-256 hash of file data: 51e3d058b80ef04c6a91a4efafe4286fd3203998e94578c7e8804fd4491554e4
 */
export function asBuffer(): Buffer {
  return Buffer.from(resourceDataBase64, 'base64');
}

/**
 * Text content of data/electionGridLayoutNewHampshireHudson/election.json.
 *
 * SHA-256 hash of file data: 51e3d058b80ef04c6a91a4efafe4286fd3203998e94578c7e8804fd4491554e4
 */
export function asText(): string {
  return asBuffer().toString('utf-8');
}

/**
 * Full election definition for data/electionGridLayoutNewHampshireHudson/election.json.
 *
 * SHA-256 hash of file data: 51e3d058b80ef04c6a91a4efafe4286fd3203998e94578c7e8804fd4491554e4
 */
export const electionDefinition = safeParseElectionDefinition(
  asText()
).unsafeUnwrap();

/**
 * Election definition for data/electionGridLayoutNewHampshireHudson/election.json.
 *
 * SHA-256 hash of file data: 51e3d058b80ef04c6a91a4efafe4286fd3203998e94578c7e8804fd4491554e4
 */
export const election = electionDefinition.election;