/* Generated by res-to-ts. DO NOT EDIT */
/* eslint-disable */
/* istanbul ignore file */

import { Buffer } from 'buffer';
import { mkdtempSync, writeFileSync } from 'fs';
import { tmpdir } from 'os';
import { join, sep } from 'path';
import { BallotPackage, safeParseElectionDefinition, DEFAULT_SYSTEM_SETTINGS } from '@votingworks/types';

/**
 * Data of data/electionGridLayoutNewHampshireHudson/election.json encoded as base64.
 *
 * SHA-256 hash of file data: 52802850860fc485daadc11f02d58f177067071431600cb7d0b007f08ea422f5
 */
const resourceDataBase64 = 'ewogICJiYWxsb3RMYXlvdXQiOiB7CiAgICAicGFwZXJTaXplIjogImxlZ2FsIiwKICAgICJ0YXJnZXRNYXJrUG9zaXRpb24iOiAicmlnaHQiLAogICAgIm1ldGFkYXRhRW5jb2RpbmciOiAidGltaW5nLW1hcmtzIgogIH0sCiAgImJhbGxvdFN0eWxlcyI6IFsKICAgIHsKICAgICAgImlkIjogImNhcmQtbnVtYmVyLTU0IiwKICAgICAgInByZWNpbmN0cyI6IFsidG93bi1pZC0xMjEwMS1wcmVjaW5jdC1pZC0iXSwKICAgICAgImRpc3RyaWN0cyI6IFsidG93bi1pZC0xMjEwMS1wcmVjaW5jdC1pZC0iXQogICAgfQogIF0sCiAgImNlbnRyYWxTY2FuQWRqdWRpY2F0aW9uUmVhc29ucyI6IFsiT3ZlcnZvdGUiXSwKICAiY29udGVzdHMiOiBbCiAgICB7CiAgICAgICJpZCI6ICJQcmVzaWRlbnQtYW5kLVZpY2UtUHJlc2lkZW50LW9mLXRoZS1Vbml0ZWQtU3RhdGVzLTE4ZDFhNTVhIiwKICAgICAgImRpc3RyaWN0SWQiOiAidG93bi1pZC0xMjEwMS1wcmVjaW5jdC1pZC0iLAogICAgICAidGl0bGUiOiAiUHJlc2lkZW50IGFuZCBWaWNlLVByZXNpZGVudCBvZiB0aGUgVW5pdGVkIFN0YXRlcyIsCiAgICAgICJ0eXBlIjogImNhbmRpZGF0ZSIsCiAgICAgICJzZWF0cyI6IDEsCiAgICAgICJjYW5kaWRhdGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJEb25hbGQtSi1UcnVtcC1hbmQtTWljaGFlbC1SLVBlbmNlLTNlM2YzMWE3IiwKICAgICAgICAgICJuYW1lIjogIkRvbmFsZCBKLiBUcnVtcCAgYW5kIE1pY2hhZWwgUi4gUGVuY2UiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJSZXB1YmxpY2FuLWYwMTY3Y2U3Il0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJKb3NlcGgtUi1CaWRlbi1hbmQtS2FtYWxhLUQtSGFycmlzLTM0Njc1NmMwIiwKICAgICAgICAgICJuYW1lIjogIkpvc2VwaCBSLiBCaWRlbiAgYW5kIEthbWFsYSBELiBIYXJyaXMiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJEZW1vY3JhdGljLWFlYTIwYWRiIl0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJKby1Kb3JnZW5zZW4tYW5kLUplcmVteS1Db2hlbi03ZTk4MTIzNCIsCiAgICAgICAgICAibmFtZSI6ICJKbyBKb3JnZW5zZW4gIGFuZCBKZXJlbXkgQ29oZW4iLAogICAgICAgICAgInBhcnR5SWRzIjogWyJPQy0zYTM4NmQyYiJdCiAgICAgICAgfQogICAgICBdLAogICAgICAiYWxsb3dXcml0ZUlucyI6IHRydWUKICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJHb3Zlcm5vci0wNjFhNDAxYiIsCiAgICAgICJkaXN0cmljdElkIjogInRvd24taWQtMTIxMDEtcHJlY2luY3QtaWQtIiwKICAgICAgInRpdGxlIjogIkdvdmVybm9yIiwKICAgICAgInR5cGUiOiAiY2FuZGlkYXRlIiwKICAgICAgInNlYXRzIjogMSwKICAgICAgImNhbmRpZGF0ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImlkIjogIkNocmlzLVN1bnVudS0xMzAxMjRmNyIsCiAgICAgICAgICAibmFtZSI6ICJDaHJpcyBTdW51bnUiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJSZXB1YmxpY2FuLWYwMTY3Y2U3Il0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJEYW4tRmVsdGVzLTNmYWRmNzk4IiwKICAgICAgICAgICJuYW1lIjogIkRhbiBGZWx0ZXMiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJEZW1vY3JhdGljLWFlYTIwYWRiIl0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJEYXJyeWwtVy1QZXJyeS0yZjA3YzQ1NSIsCiAgICAgICAgICAibmFtZSI6ICJEYXJyeWwgVy4gUGVycnkiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJPQy0zYTM4NmQyYiJdCiAgICAgICAgfQogICAgICBdLAogICAgICAiYWxsb3dXcml0ZUlucyI6IHRydWUKICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJVbml0ZWQtU3RhdGVzLVNlbmF0b3ItZDNmMWM3NWIiLAogICAgICAiZGlzdHJpY3RJZCI6ICJ0b3duLWlkLTEyMTAxLXByZWNpbmN0LWlkLSIsCiAgICAgICJ0aXRsZSI6ICJVbml0ZWQgU3RhdGVzIFNlbmF0b3IiLAogICAgICAidHlwZSI6ICJjYW5kaWRhdGUiLAogICAgICAic2VhdHMiOiAxLAogICAgICAiY2FuZGlkYXRlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiQ29ya3ktTWVzc25lci1iNmViMjE2ZCIsCiAgICAgICAgICAibmFtZSI6ICJDb3JreSBNZXNzbmVyIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsiUmVwdWJsaWNhbi1mMDE2N2NlNyJdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiSmVhbm5lLVNoYWhlZW4tNmUxOTYyMmQiLAogICAgICAgICAgIm5hbWUiOiAiSmVhbm5lIFNoYWhlZW4iLAogICAgICAgICAgInBhcnR5SWRzIjogWyJEZW1vY3JhdGljLWFlYTIwYWRiIl0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJKdXN0aW4tTy1Eb25uZWxsLWVjNzE3NjBjIiwKICAgICAgICAgICJuYW1lIjogIkp1c3RpbiBPJ0Rvbm5lbGwiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJPQy0zYTM4NmQyYiJdCiAgICAgICAgfQogICAgICBdLAogICAgICAiYWxsb3dXcml0ZUlucyI6IHRydWUKICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJSZXByZXNlbnRhdGl2ZS1pbi1Db25ncmVzcy0yNDY4M2I0NCIsCiAgICAgICJkaXN0cmljdElkIjogInRvd24taWQtMTIxMDEtcHJlY2luY3QtaWQtIiwKICAgICAgInRpdGxlIjogIlJlcHJlc2VudGF0aXZlIGluIENvbmdyZXNzIiwKICAgICAgInR5cGUiOiAiY2FuZGlkYXRlIiwKICAgICAgInNlYXRzIjogMSwKICAgICAgImNhbmRpZGF0ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImlkIjogIlN0ZXZlbi1OZWdyb24tNWQ0ODJkNzIiLAogICAgICAgICAgIm5hbWUiOiAiU3RldmVuIE5lZ3JvbiIsCiAgICAgICAgICAicGFydHlJZHMiOiBbIlJlcHVibGljYW4tZjAxNjdjZTciXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImlkIjogIkFubi1NY0xhbmUtS3VzdGVyLTY3ZmRmMDYwIiwKICAgICAgICAgICJuYW1lIjogIkFubiBNY0xhbmUgS3VzdGVyIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsiRGVtb2NyYXRpYy1hZWEyMGFkYiJdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiQW5kcmV3LU9sZGluZy1iZWQzM2YwOCIsCiAgICAgICAgICAibmFtZSI6ICJBbmRyZXcgT2xkaW5nIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsiT0MtM2EzODZkMmIiXQogICAgICAgIH0KICAgICAgXSwKICAgICAgImFsbG93V3JpdGVJbnMiOiB0cnVlCiAgICB9LAogICAgewogICAgICAiaWQiOiAiRXhlY3V0aXZlLUNvdW5jaWxvci1iYjIyNTU3ZiIsCiAgICAgICJkaXN0cmljdElkIjogInRvd24taWQtMTIxMDEtcHJlY2luY3QtaWQtIiwKICAgICAgInRpdGxlIjogIkV4ZWN1dGl2ZSBDb3VuY2lsb3IiLAogICAgICAidHlwZSI6ICJjYW5kaWRhdGUiLAogICAgICAic2VhdHMiOiAxLAogICAgICAiY2FuZGlkYXRlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiRGF2ZS1XaGVlbGVyLWRlMjI0MmVlIiwKICAgICAgICAgICJuYW1lIjogIkRhdmUgV2hlZWxlciIsCiAgICAgICAgICAicGFydHlJZHMiOiBbIlJlcHVibGljYW4tZjAxNjdjZTciXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImlkIjogIkRlYm9yYS1CLVBpZ25hdGVsbGktOGM0Y2MxZDMiLAogICAgICAgICAgIm5hbWUiOiAiRGVib3JhIEIuIFBpZ25hdGVsbGkiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJEZW1vY3JhdGljLWFlYTIwYWRiIl0KICAgICAgICB9CiAgICAgIF0sCiAgICAgICJhbGxvd1dyaXRlSW5zIjogdHJ1ZQogICAgfSwKICAgIHsKICAgICAgImlkIjogIlN0YXRlLVNlbmF0b3ItMzkxMzgxZjgiLAogICAgICAiZGlzdHJpY3RJZCI6ICJ0b3duLWlkLTEyMTAxLXByZWNpbmN0LWlkLSIsCiAgICAgICJ0aXRsZSI6ICJTdGF0ZSBTZW5hdG9yIiwKICAgICAgInR5cGUiOiAiY2FuZGlkYXRlIiwKICAgICAgInNlYXRzIjogMSwKICAgICAgImNhbmRpZGF0ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImlkIjogIlNoYXJvbi1NLUNhcnNvbi0wMzE2MzA4ZSIsCiAgICAgICAgICAibmFtZSI6ICJTaGFyb24gTS4gQ2Fyc29uIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsiUmVwdWJsaWNhbi1mMDE2N2NlNyJdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiTmFuY3ktSGVuZHJpY2tzLWQzMzA1NTlkIiwKICAgICAgICAgICJuYW1lIjogIk5hbmN5IEhlbmRyaWNrcyIsCiAgICAgICAgICAicGFydHlJZHMiOiBbIkRlbW9jcmF0aWMtYWVhMjBhZGIiXQogICAgICAgIH0KICAgICAgXSwKICAgICAgImFsbG93V3JpdGVJbnMiOiB0cnVlCiAgICB9LAogICAgewogICAgICAiaWQiOiAiU3RhdGUtUmVwcmVzZW50YXRpdmVzLTdkM2E4ODIxIiwKICAgICAgImRpc3RyaWN0SWQiOiAidG93bi1pZC0xMjEwMS1wcmVjaW5jdC1pZC0iLAogICAgICAidGl0bGUiOiAiU3RhdGUgUmVwcmVzZW50YXRpdmVzIiwKICAgICAgInR5cGUiOiAiY2FuZGlkYXRlIiwKICAgICAgInNlYXRzIjogMTEsCiAgICAgICJjYW5kaWRhdGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJUb255LUxla2FzLWEwNmY3MzY0IiwKICAgICAgICAgICJuYW1lIjogIlRvbnkgTGVrYXMiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJSZXB1YmxpY2FuLWYwMTY3Y2U3Il0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJIZXJzaGVsLU51bmV6LTY4NjIzMTVmIiwKICAgICAgICAgICJuYW1lIjogIkhlcnNoZWwgTnVuZXoiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJSZXB1YmxpY2FuLWYwMTY3Y2U3Il0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJMeW5uZS1PYmVyLWY3MDRkZjE3IiwKICAgICAgICAgICJuYW1lIjogIkx5bm5lIE9iZXIiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJSZXB1YmxpY2FuLWYwMTY3Y2U3Il0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJSdXNzZWxsLU9iZXItZTQzM2FmZWEiLAogICAgICAgICAgIm5hbWUiOiAiUnVzc2VsbCBPYmVyIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsiUmVwdWJsaWNhbi1mMDE2N2NlNyJdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiQW5kcmV3LVByb3V0LTFjZDI0M2UwIiwKICAgICAgICAgICJuYW1lIjogIkFuZHJldyBQcm91dCIsCiAgICAgICAgICAicGFydHlJZHMiOiBbIlJlcHVibGljYW4tZjAxNjdjZTciXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImlkIjogIkFuZHJldy1SZW56dWxsby1iMDQyODM3MCIsCiAgICAgICAgICAibmFtZSI6ICJBbmRyZXcgUmVuenVsbG8iLAogICAgICAgICAgInBhcnR5SWRzIjogWyJSZXB1YmxpY2FuLWYwMTY3Y2U3Il0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJLaW1iZXJseS1SaWNlLWZhYWVkMTZhIiwKICAgICAgICAgICJuYW1lIjogIktpbWJlcmx5IFJpY2UiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJSZXB1YmxpY2FuLWYwMTY3Y2U3Il0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJEZW5pc2UtU21pdGgtMGE2MzU5YzMiLAogICAgICAgICAgIm5hbWUiOiAiRGVuaXNlIFNtaXRoIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsiUmVwdWJsaWNhbi1mMDE2N2NlNyJdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiSm9yZGFuLVVsZXJ5LTI4NTUzNjI3IiwKICAgICAgICAgICJuYW1lIjogIkpvcmRhbiBVbGVyeSIsCiAgICAgICAgICAicGFydHlJZHMiOiBbIlJlcHVibGljYW4tZjAxNjdjZTciXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImlkIjogIkJvYi1HcmVlbmUtYzAwNmEzYmQiLAogICAgICAgICAgIm5hbWUiOiAiQm9iIEdyZWVuZSIsCiAgICAgICAgICAicGFydHlJZHMiOiBbIlJlcHVibGljYW4tZjAxNjdjZTciXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImlkIjogIkFsaWNpYS1MZWthcy0yNzEwNDhkOCIsCiAgICAgICAgICAibmFtZSI6ICJBbGljaWEgTGVrYXMiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJSZXB1YmxpY2FuLWYwMTY3Y2U3Il0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJCcmV0dC1HYWdub24tN2E4Yzk4MzgiLAogICAgICAgICAgIm5hbWUiOiAiQnJldHQgR2Fnbm9uIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsiRGVtb2NyYXRpYy1hZWEyMGFkYiJdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiRGF2aWQtSGVubmVzc2V5LWYxMzQzZjRmIiwKICAgICAgICAgICJuYW1lIjogIkRhdmlkIEhlbm5lc3NleSIsCiAgICAgICAgICAicGFydHlJZHMiOiBbIkRlbW9jcmF0aWMtYWVhMjBhZGIiXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImlkIjogIkJlYXRyaXotSmF1cmVndWktMTFiODM2NTMiLAogICAgICAgICAgIm5hbWUiOiAiQmVhdHJpeiBKYXVyZWd1aSIsCiAgICAgICAgICAicGFydHlJZHMiOiBbIkRlbW9jcmF0aWMtYWVhMjBhZGIiXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImlkIjogIlN0ZXZlbi1LYXRzb3MtMDc3NTg0YjgiLAogICAgICAgICAgIm5hbWUiOiAiU3RldmVuIEthdHNvcyIsCiAgICAgICAgICAicGFydHlJZHMiOiBbIkRlbW9jcmF0aWMtYWVhMjBhZGIiXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImlkIjogIkhhcm9sZC1MeW5kZS1hNTRkZjdkNyIsCiAgICAgICAgICAibmFtZSI6ICJIYXJvbGQgTHluZGUiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJEZW1vY3JhdGljLWFlYTIwYWRiIl0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJMYW5hLVBhbGl5LTU5NWIyNzZhIiwKICAgICAgICAgICJuYW1lIjogIkxhbmEgUGFsaXkiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJEZW1vY3JhdGljLWFlYTIwYWRiIl0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJSb2JlcnQtUy1TaGVybWFuLWYxMGY0YTNmIiwKICAgICAgICAgICJuYW1lIjogIlJvYmVydCBTLiBTaGVybWFuIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsiRGVtb2NyYXRpYy1hZWEyMGFkYiJdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiQWxlamFuZHJvLVVycnV0aWEtMWI1NzRiODYiLAogICAgICAgICAgIm5hbWUiOiAiQWxlamFuZHJvIFVycnV0aWEiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJEZW1vY3JhdGljLWFlYTIwYWRiIl0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJUaW1vdGh5LVd5YXR0LTAxMDViOGRlIiwKICAgICAgICAgICJuYW1lIjogIlRpbW90aHkgV3lhdHQiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJEZW1vY3JhdGljLWFlYTIwYWRiIl0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJCYXJiYXJhLUEtQmx1ZS0xNDYwODQ2MyIsCiAgICAgICAgICAibmFtZSI6ICJCYXJiYXJhIEEuIEJsdWUiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJEZW1vY3JhdGljLWFlYTIwYWRiIl0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJOYW5jeS1TLUJydWNrZXItNDQ3MWZhZjciLAogICAgICAgICAgIm5hbWUiOiAiTmFuY3kgUy4gQnJ1Y2tlciIsCiAgICAgICAgICAicGFydHlJZHMiOiBbIkRlbW9jcmF0aWMtYWVhMjBhZGIiXQogICAgICAgIH0KICAgICAgXSwKICAgICAgImFsbG93V3JpdGVJbnMiOiB0cnVlCiAgICB9LAogICAgewogICAgICAiaWQiOiAiU2hlcmlmZi00MjQzZmUwYiIsCiAgICAgICJkaXN0cmljdElkIjogInRvd24taWQtMTIxMDEtcHJlY2luY3QtaWQtIiwKICAgICAgInRpdGxlIjogIlNoZXJpZmYiLAogICAgICAidHlwZSI6ICJjYW5kaWRhdGUiLAogICAgICAic2VhdHMiOiAxLAogICAgICAiY2FuZGlkYXRlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiQ2hyaXN0b3BoZXItQ29ubmVsbHktOTcwYjIzNjQiLAogICAgICAgICAgIm5hbWUiOiAiQ2hyaXN0b3BoZXIgQ29ubmVsbHkiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJSZXB1YmxpY2FuLWYwMTY3Y2U3Il0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJCaWxsLUJhcnJ5LTBlNjc3Y2E2IiwKICAgICAgICAgICJuYW1lIjogIkJpbGwgQmFycnkiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJEZW1vY3JhdGljLWFlYTIwYWRiIl0KICAgICAgICB9CiAgICAgIF0sCiAgICAgICJhbGxvd1dyaXRlSW5zIjogdHJ1ZQogICAgfSwKICAgIHsKICAgICAgImlkIjogIkNvdW50eS1BdHRvcm5leS0xMzNmOTEwZiIsCiAgICAgICJkaXN0cmljdElkIjogInRvd24taWQtMTIxMDEtcHJlY2luY3QtaWQtIiwKICAgICAgInRpdGxlIjogIkNvdW50eSBBdHRvcm5leSIsCiAgICAgICJ0eXBlIjogImNhbmRpZGF0ZSIsCiAgICAgICJzZWF0cyI6IDEsCiAgICAgICJjYW5kaWRhdGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJKb2huLUotQ291Z2hsaW4tMGU3YmY5M2MiLAogICAgICAgICAgIm5hbWUiOiAiSm9obiBKLiBDb3VnaGxpbiIsCiAgICAgICAgICAicGFydHlJZHMiOiBbIlJlcHVibGljYW4tZjAxNjdjZTciXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImlkIjogIk1pY2hhZWwtQ29ubG9uLTFhNjFmYTE2IiwKICAgICAgICAgICJuYW1lIjogIk1pY2hhZWwgQ29ubG9uIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsiRGVtb2NyYXRpYy1hZWEyMGFkYiJdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiTmljaG9sYXMtU2Fyd2Fyay1jOGYxMTVlMiIsCiAgICAgICAgICAibmFtZSI6ICJOaWNob2xhcyBTYXJ3YXJrIiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsiT0MtM2EzODZkMmIiXQogICAgICAgIH0KICAgICAgXSwKICAgICAgImFsbG93V3JpdGVJbnMiOiB0cnVlCiAgICB9LAogICAgewogICAgICAiaWQiOiAiQ291bnR5LVRyZWFzdXJlci04N2QyNWEzMSIsCiAgICAgICJkaXN0cmljdElkIjogInRvd24taWQtMTIxMDEtcHJlY2luY3QtaWQtIiwKICAgICAgInRpdGxlIjogIkNvdW50eSBUcmVhc3VyZXIiLAogICAgICAidHlwZSI6ICJjYW5kaWRhdGUiLAogICAgICAic2VhdHMiOiAxLAogICAgICAiY2FuZGlkYXRlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiRGF2aWQtRy1GcmVkZXR0ZS02ODdmMDFhZSIsCiAgICAgICAgICAibmFtZSI6ICJEYXZpZCBHLiBGcmVkZXR0ZSIsCiAgICAgICAgICAicGFydHlJZHMiOiBbIlJlcHVibGljYW4tZjAxNjdjZTciXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImlkIjogIldpbGxpYW0tQnJ5ay1lYWY5MzZlYyIsCiAgICAgICAgICAibmFtZSI6ICJXaWxsaWFtIEJyeWsiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJEZW1vY3JhdGljLWFlYTIwYWRiIl0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJSaWNoYXJkLU1hbnpvLWM1ZmNjODc2IiwKICAgICAgICAgICJuYW1lIjogIlJpY2hhcmQgTWFuem8iLAogICAgICAgICAgInBhcnR5SWRzIjogWyJPQy0zYTM4NmQyYiJdCiAgICAgICAgfQogICAgICBdLAogICAgICAiYWxsb3dXcml0ZUlucyI6IHRydWUKICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJSZWdpc3Rlci1vZi1EZWVkcy1hMTI3OGRmMiIsCiAgICAgICJkaXN0cmljdElkIjogInRvd24taWQtMTIxMDEtcHJlY2luY3QtaWQtIiwKICAgICAgInRpdGxlIjogIlJlZ2lzdGVyIG9mIERlZWRzIiwKICAgICAgInR5cGUiOiAiY2FuZGlkYXRlIiwKICAgICAgInNlYXRzIjogMSwKICAgICAgImNhbmRpZGF0ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImlkIjogIkphY2stRmxhbmFnYW4tNzhlMjRjYWIiLAogICAgICAgICAgIm5hbWUiOiAiSmFjayBGbGFuYWdhbiIsCiAgICAgICAgICAicGFydHlJZHMiOiBbIlJlcHVibGljYW4tZjAxNjdjZTciXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImlkIjogIk1hcnktQW5uLUNyb3dlbGwtZTFmZjU5YjkiLAogICAgICAgICAgIm5hbWUiOiAiTWFyeSBBbm4gQ3Jvd2VsbCIsCiAgICAgICAgICAicGFydHlJZHMiOiBbIkRlbW9jcmF0aWMtYWVhMjBhZGIiXQogICAgICAgIH0KICAgICAgXSwKICAgICAgImFsbG93V3JpdGVJbnMiOiB0cnVlCiAgICB9LAogICAgewogICAgICAiaWQiOiAiUmVnaXN0ZXItb2YtUHJvYmF0ZS1hNDExN2RhOCIsCiAgICAgICJkaXN0cmljdElkIjogInRvd24taWQtMTIxMDEtcHJlY2luY3QtaWQtIiwKICAgICAgInRpdGxlIjogIlJlZ2lzdGVyIG9mIFByb2JhdGUiLAogICAgICAidHlwZSI6ICJjYW5kaWRhdGUiLAogICAgICAic2VhdHMiOiAxLAogICAgICAiY2FuZGlkYXRlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiRWxpemFiZXRoLUFubi1Nb3JlYXUtYWVjMDdiYjQiLAogICAgICAgICAgIm5hbWUiOiAiRWxpemFiZXRoIEFubiBNb3JlYXUiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJSZXB1YmxpY2FuLWYwMTY3Y2U3Il0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJFbGl6YWJldGgtUm9wcC00MDM1ZWVkMSIsCiAgICAgICAgICAibmFtZSI6ICJFbGl6YWJldGggUm9wcCIsCiAgICAgICAgICAicGFydHlJZHMiOiBbIkRlbW9jcmF0aWMtYWVhMjBhZGIiXQogICAgICAgIH0KICAgICAgXSwKICAgICAgImFsbG93V3JpdGVJbnMiOiB0cnVlCiAgICB9LAogICAgewogICAgICAiaWQiOiAiQ291bnR5LUNvbW1pc3Npb25lci1kNmZlZWQyNSIsCiAgICAgICJkaXN0cmljdElkIjogInRvd24taWQtMTIxMDEtcHJlY2luY3QtaWQtIiwKICAgICAgInRpdGxlIjogIkNvdW50eSBDb21taXNzaW9uZXIiLAogICAgICAidHlwZSI6ICJjYW5kaWRhdGUiLAogICAgICAic2VhdHMiOiAxLAogICAgICAiY2FuZGlkYXRlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiTWljaGFlbC1Tb3VjeS1iMjNmN2MyZCIsCiAgICAgICAgICAibmFtZSI6ICJNaWNoYWVsIFNvdWN5IiwKICAgICAgICAgICJwYXJ0eUlkcyI6IFsiUmVwdWJsaWNhbi1mMDE2N2NlNyJdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiRGFuaWVsLUMtSGFuc2JlcnJ5LThjMDI5MWVjIiwKICAgICAgICAgICJuYW1lIjogIkRhbmllbCBDLiBIYW5zYmVycnkiLAogICAgICAgICAgInBhcnR5SWRzIjogWyJEZW1vY3JhdGljLWFlYTIwYWRiIl0KICAgICAgICB9CiAgICAgIF0sCiAgICAgICJhbGxvd1dyaXRlSW5zIjogdHJ1ZQogICAgfQogIF0sCiAgImdyaWRMYXlvdXRzIjogWwogICAgewogICAgICAicHJlY2luY3RJZCI6ICJ0b3duLWlkLTEyMTAxLXByZWNpbmN0LWlkLSIsCiAgICAgICJiYWxsb3RTdHlsZUlkIjogImNhcmQtbnVtYmVyLTU0IiwKICAgICAgImNvbHVtbnMiOiAzNCwKICAgICAgInJvd3MiOiA1MywKICAgICAgIm9wdGlvbkJvdW5kc0Zyb21UYXJnZXRNYXJrIjogewogICAgICAgICJ0b3AiOiAxLAogICAgICAgICJyaWdodCI6IDEsCiAgICAgICAgImJvdHRvbSI6IDEsCiAgICAgICAgImxlZnQiOiA1CiAgICAgIH0sCiAgICAgICJncmlkUG9zaXRpb25zIjogWwogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMTIsCiAgICAgICAgICAicm93IjogOSwKICAgICAgICAgICJjb250ZXN0SWQiOiAiUHJlc2lkZW50LWFuZC1WaWNlLVByZXNpZGVudC1vZi10aGUtVW5pdGVkLVN0YXRlcy0xOGQxYTU1YSIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiRG9uYWxkLUotVHJ1bXAtYW5kLU1pY2hhZWwtUi1QZW5jZS0zZTNmMzFhNyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMTIsCiAgICAgICAgICAicm93IjogMTMsCiAgICAgICAgICAiY29udGVzdElkIjogIkdvdmVybm9yLTA2MWE0MDFiIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJDaHJpcy1TdW51bnUtMTMwMTI0ZjciCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDEyLAogICAgICAgICAgInJvdyI6IDE2LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJVbml0ZWQtU3RhdGVzLVNlbmF0b3ItZDNmMWM3NWIiLAogICAgICAgICAgIm9wdGlvbklkIjogIkNvcmt5LU1lc3NuZXItYjZlYjIxNmQiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDEyLAogICAgICAgICAgInJvdyI6IDE5LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJSZXByZXNlbnRhdGl2ZS1pbi1Db25ncmVzcy0yNDY4M2I0NCIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiU3RldmVuLU5lZ3Jvbi01ZDQ4MmQ3MiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMTIsCiAgICAgICAgICAicm93IjogMjIsCiAgICAgICAgICAiY29udGVzdElkIjogIkV4ZWN1dGl2ZS1Db3VuY2lsb3ItYmIyMjU1N2YiLAogICAgICAgICAgIm9wdGlvbklkIjogIkRhdmUtV2hlZWxlci1kZTIyNDJlZSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMTIsCiAgICAgICAgICAicm93IjogMjUsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVNlbmF0b3ItMzkxMzgxZjgiLAogICAgICAgICAgIm9wdGlvbklkIjogIlNoYXJvbi1NLUNhcnNvbi0wMzE2MzA4ZSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMTIsCiAgICAgICAgICAicm93IjogMjksCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlcy03ZDNhODgyMSIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiVG9ueS1MZWthcy1hMDZmNzM2NCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMTIsCiAgICAgICAgICAicm93IjogMzEsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlcy03ZDNhODgyMSIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiSGVyc2hlbC1OdW5lei02ODYyMzE1ZiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMTIsCiAgICAgICAgICAicm93IjogMzMsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlcy03ZDNhODgyMSIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiTHlubmUtT2Jlci1mNzA0ZGYxNyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMTIsCiAgICAgICAgICAicm93IjogMzUsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlcy03ZDNhODgyMSIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiUnVzc2VsbC1PYmVyLWU0MzNhZmVhIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxMiwKICAgICAgICAgICJyb3ciOiAzNywKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtUmVwcmVzZW50YXRpdmVzLTdkM2E4ODIxIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJBbmRyZXctUHJvdXQtMWNkMjQzZTAiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDEyLAogICAgICAgICAgInJvdyI6IDM5LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJTdGF0ZS1SZXByZXNlbnRhdGl2ZXMtN2QzYTg4MjEiLAogICAgICAgICAgIm9wdGlvbklkIjogIkFuZHJldy1SZW56dWxsby1iMDQyODM3MCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMTIsCiAgICAgICAgICAicm93IjogNDEsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlcy03ZDNhODgyMSIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiS2ltYmVybHktUmljZS1mYWFlZDE2YSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMTIsCiAgICAgICAgICAicm93IjogNDMsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlcy03ZDNhODgyMSIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiRGVuaXNlLVNtaXRoLTBhNjM1OWMzIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxMiwKICAgICAgICAgICJyb3ciOiA0NSwKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtUmVwcmVzZW50YXRpdmVzLTdkM2E4ODIxIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJKb3JkYW4tVWxlcnktMjg1NTM2MjciCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDEyLAogICAgICAgICAgInJvdyI6IDQ3LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJTdGF0ZS1SZXByZXNlbnRhdGl2ZXMtN2QzYTg4MjEiLAogICAgICAgICAgIm9wdGlvbklkIjogIkJvYi1HcmVlbmUtYzAwNmEzYmQiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDEyLAogICAgICAgICAgInJvdyI6IDQ5LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJTdGF0ZS1SZXByZXNlbnRhdGl2ZXMtN2QzYTg4MjEiLAogICAgICAgICAgIm9wdGlvbklkIjogIkFsaWNpYS1MZWthcy0yNzEwNDhkOCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJiYWNrIiwKICAgICAgICAgICJjb2x1bW4iOiAxMiwKICAgICAgICAgICJyb3ciOiA0LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJTaGVyaWZmLTQyNDNmZTBiIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJDaHJpc3RvcGhlci1Db25uZWxseS05NzBiMjM2NCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJiYWNrIiwKICAgICAgICAgICJjb2x1bW4iOiAxMiwKICAgICAgICAgICJyb3ciOiA3LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJDb3VudHktQXR0b3JuZXktMTMzZjkxMGYiLAogICAgICAgICAgIm9wdGlvbklkIjogIkpvaG4tSi1Db3VnaGxpbi0wZTdiZjkzYyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJiYWNrIiwKICAgICAgICAgICJjb2x1bW4iOiAxMiwKICAgICAgICAgICJyb3ciOiAxMCwKICAgICAgICAgICJjb250ZXN0SWQiOiAiQ291bnR5LVRyZWFzdXJlci04N2QyNWEzMSIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiRGF2aWQtRy1GcmVkZXR0ZS02ODdmMDFhZSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJiYWNrIiwKICAgICAgICAgICJjb2x1bW4iOiAxMiwKICAgICAgICAgICJyb3ciOiAxMywKICAgICAgICAgICJjb250ZXN0SWQiOiAiUmVnaXN0ZXItb2YtRGVlZHMtYTEyNzhkZjIiLAogICAgICAgICAgIm9wdGlvbklkIjogIkphY2stRmxhbmFnYW4tNzhlMjRjYWIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiYmFjayIsCiAgICAgICAgICAiY29sdW1uIjogMTIsCiAgICAgICAgICAicm93IjogMTYsCiAgICAgICAgICAiY29udGVzdElkIjogIlJlZ2lzdGVyLW9mLVByb2JhdGUtYTQxMTdkYTgiLAogICAgICAgICAgIm9wdGlvbklkIjogIkVsaXphYmV0aC1Bbm4tTW9yZWF1LWFlYzA3YmI0IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImJhY2siLAogICAgICAgICAgImNvbHVtbiI6IDEyLAogICAgICAgICAgInJvdyI6IDE5LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJDb3VudHktQ29tbWlzc2lvbmVyLWQ2ZmVlZDI1IiwKICAgICAgICAgICJvcHRpb25JZCI6ICJNaWNoYWVsLVNvdWN5LWIyM2Y3YzJkIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxOSwKICAgICAgICAgICJyb3ciOiA5LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJQcmVzaWRlbnQtYW5kLVZpY2UtUHJlc2lkZW50LW9mLXRoZS1Vbml0ZWQtU3RhdGVzLTE4ZDFhNTVhIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJKb3NlcGgtUi1CaWRlbi1hbmQtS2FtYWxhLUQtSGFycmlzLTM0Njc1NmMwIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxOSwKICAgICAgICAgICJyb3ciOiAxMywKICAgICAgICAgICJjb250ZXN0SWQiOiAiR292ZXJub3ItMDYxYTQwMWIiLAogICAgICAgICAgIm9wdGlvbklkIjogIkRhbi1GZWx0ZXMtM2ZhZGY3OTgiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDE5LAogICAgICAgICAgInJvdyI6IDE2LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJVbml0ZWQtU3RhdGVzLVNlbmF0b3ItZDNmMWM3NWIiLAogICAgICAgICAgIm9wdGlvbklkIjogIkplYW5uZS1TaGFoZWVuLTZlMTk2MjJkIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxOSwKICAgICAgICAgICJyb3ciOiAxOSwKICAgICAgICAgICJjb250ZXN0SWQiOiAiUmVwcmVzZW50YXRpdmUtaW4tQ29uZ3Jlc3MtMjQ2ODNiNDQiLAogICAgICAgICAgIm9wdGlvbklkIjogIkFubi1NY0xhbmUtS3VzdGVyLTY3ZmRmMDYwIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxOSwKICAgICAgICAgICJyb3ciOiAyMiwKICAgICAgICAgICJjb250ZXN0SWQiOiAiRXhlY3V0aXZlLUNvdW5jaWxvci1iYjIyNTU3ZiIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiRGVib3JhLUItUGlnbmF0ZWxsaS04YzRjYzFkMyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMTksCiAgICAgICAgICAicm93IjogMjUsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVNlbmF0b3ItMzkxMzgxZjgiLAogICAgICAgICAgIm9wdGlvbklkIjogIk5hbmN5LUhlbmRyaWNrcy1kMzMwNTU5ZCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMTksCiAgICAgICAgICAicm93IjogMjgsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlcy03ZDNhODgyMSIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiQnJldHQtR2Fnbm9uLTdhOGM5ODM4IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxOSwKICAgICAgICAgICJyb3ciOiAzMCwKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtUmVwcmVzZW50YXRpdmVzLTdkM2E4ODIxIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJEYXZpZC1IZW5uZXNzZXktZjEzNDNmNGYiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDE5LAogICAgICAgICAgInJvdyI6IDMyLAogICAgICAgICAgImNvbnRlc3RJZCI6ICJTdGF0ZS1SZXByZXNlbnRhdGl2ZXMtN2QzYTg4MjEiLAogICAgICAgICAgIm9wdGlvbklkIjogIkJlYXRyaXotSmF1cmVndWktMTFiODM2NTMiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDE5LAogICAgICAgICAgInJvdyI6IDM0LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJTdGF0ZS1SZXByZXNlbnRhdGl2ZXMtN2QzYTg4MjEiLAogICAgICAgICAgIm9wdGlvbklkIjogIlN0ZXZlbi1LYXRzb3MtMDc3NTg0YjgiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDE5LAogICAgICAgICAgInJvdyI6IDM2LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJTdGF0ZS1SZXByZXNlbnRhdGl2ZXMtN2QzYTg4MjEiLAogICAgICAgICAgIm9wdGlvbklkIjogIkhhcm9sZC1MeW5kZS1hNTRkZjdkNyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMTksCiAgICAgICAgICAicm93IjogMzgsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlcy03ZDNhODgyMSIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiTGFuYS1QYWxpeS01OTViMjc2YSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMTksCiAgICAgICAgICAicm93IjogNDAsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlcy03ZDNhODgyMSIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiUm9iZXJ0LVMtU2hlcm1hbi1mMTBmNGEzZiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMTksCiAgICAgICAgICAicm93IjogNDIsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlcy03ZDNhODgyMSIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiQWxlamFuZHJvLVVycnV0aWEtMWI1NzRiODYiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDE5LAogICAgICAgICAgInJvdyI6IDQ0LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJTdGF0ZS1SZXByZXNlbnRhdGl2ZXMtN2QzYTg4MjEiLAogICAgICAgICAgIm9wdGlvbklkIjogIlRpbW90aHktV3lhdHQtMDEwNWI4ZGUiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDE5LAogICAgICAgICAgInJvdyI6IDQ2LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJTdGF0ZS1SZXByZXNlbnRhdGl2ZXMtN2QzYTg4MjEiLAogICAgICAgICAgIm9wdGlvbklkIjogIkJhcmJhcmEtQS1CbHVlLTE0NjA4NDYzIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAxOSwKICAgICAgICAgICJyb3ciOiA0OCwKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtUmVwcmVzZW50YXRpdmVzLTdkM2E4ODIxIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJOYW5jeS1TLUJydWNrZXItNDQ3MWZhZjciCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiYmFjayIsCiAgICAgICAgICAiY29sdW1uIjogMTksCiAgICAgICAgICAicm93IjogNCwKICAgICAgICAgICJjb250ZXN0SWQiOiAiU2hlcmlmZi00MjQzZmUwYiIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiQmlsbC1CYXJyeS0wZTY3N2NhNiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJiYWNrIiwKICAgICAgICAgICJjb2x1bW4iOiAxOSwKICAgICAgICAgICJyb3ciOiA3LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJDb3VudHktQXR0b3JuZXktMTMzZjkxMGYiLAogICAgICAgICAgIm9wdGlvbklkIjogIk1pY2hhZWwtQ29ubG9uLTFhNjFmYTE2IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImJhY2siLAogICAgICAgICAgImNvbHVtbiI6IDE5LAogICAgICAgICAgInJvdyI6IDEwLAogICAgICAgICAgImNvbnRlc3RJZCI6ICJDb3VudHktVHJlYXN1cmVyLTg3ZDI1YTMxIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJXaWxsaWFtLUJyeWstZWFmOTM2ZWMiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJvcHRpb24iLAogICAgICAgICAgInNpZGUiOiAiYmFjayIsCiAgICAgICAgICAiY29sdW1uIjogMTksCiAgICAgICAgICAicm93IjogMTMsCiAgICAgICAgICAiY29udGVzdElkIjogIlJlZ2lzdGVyLW9mLURlZWRzLWExMjc4ZGYyIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJNYXJ5LUFubi1Dcm93ZWxsLWUxZmY1OWI5IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImJhY2siLAogICAgICAgICAgImNvbHVtbiI6IDE5LAogICAgICAgICAgInJvdyI6IDE2LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJSZWdpc3Rlci1vZi1Qcm9iYXRlLWE0MTE3ZGE4IiwKICAgICAgICAgICJvcHRpb25JZCI6ICJFbGl6YWJldGgtUm9wcC00MDM1ZWVkMSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJiYWNrIiwKICAgICAgICAgICJjb2x1bW4iOiAxOSwKICAgICAgICAgICJyb3ciOiAxOSwKICAgICAgICAgICJjb250ZXN0SWQiOiAiQ291bnR5LUNvbW1pc3Npb25lci1kNmZlZWQyNSIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiRGFuaWVsLUMtSGFuc2JlcnJ5LThjMDI5MWVjIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAyNiwKICAgICAgICAgICJyb3ciOiA5LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJQcmVzaWRlbnQtYW5kLVZpY2UtUHJlc2lkZW50LW9mLXRoZS1Vbml0ZWQtU3RhdGVzLTE4ZDFhNTVhIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJKby1Kb3JnZW5zZW4tYW5kLUplcmVteS1Db2hlbi03ZTk4MTIzNCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMjYsCiAgICAgICAgICAicm93IjogMTMsCiAgICAgICAgICAiY29udGVzdElkIjogIkdvdmVybm9yLTA2MWE0MDFiIiwKICAgICAgICAgICJvcHRpb25JZCI6ICJEYXJyeWwtVy1QZXJyeS0yZjA3YzQ1NSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMjYsCiAgICAgICAgICAicm93IjogMTYsCiAgICAgICAgICAiY29udGVzdElkIjogIlVuaXRlZC1TdGF0ZXMtU2VuYXRvci1kM2YxYzc1YiIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiSnVzdGluLU8tRG9ubmVsbC1lYzcxNzYwYyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMjYsCiAgICAgICAgICAicm93IjogMTksCiAgICAgICAgICAiY29udGVzdElkIjogIlJlcHJlc2VudGF0aXZlLWluLUNvbmdyZXNzLTI0NjgzYjQ0IiwKICAgICAgICAgICJvcHRpb25JZCI6ICJBbmRyZXctT2xkaW5nLWJlZDMzZjA4IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3B0aW9uIiwKICAgICAgICAgICJzaWRlIjogImJhY2siLAogICAgICAgICAgImNvbHVtbiI6IDI2LAogICAgICAgICAgInJvdyI6IDcsCiAgICAgICAgICAiY29udGVzdElkIjogIkNvdW50eS1BdHRvcm5leS0xMzNmOTEwZiIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiTmljaG9sYXMtU2Fyd2Fyay1jOGYxMTVlMiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIm9wdGlvbiIsCiAgICAgICAgICAic2lkZSI6ICJiYWNrIiwKICAgICAgICAgICJjb2x1bW4iOiAyNiwKICAgICAgICAgICJyb3ciOiAxMCwKICAgICAgICAgICJjb250ZXN0SWQiOiAiQ291bnR5LVRyZWFzdXJlci04N2QyNWEzMSIsCiAgICAgICAgICAib3B0aW9uSWQiOiAiUmljaGFyZC1NYW56by1jNWZjYzg3NiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIndyaXRlLWluIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAzMiwKICAgICAgICAgICJyb3ciOiA5LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJQcmVzaWRlbnQtYW5kLVZpY2UtUHJlc2lkZW50LW9mLXRoZS1Vbml0ZWQtU3RhdGVzLTE4ZDFhNTVhIiwKICAgICAgICAgICJ3cml0ZUluSW5kZXgiOiAwCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJ3cml0ZS1pbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMzIsCiAgICAgICAgICAicm93IjogMTMsCiAgICAgICAgICAiY29udGVzdElkIjogIkdvdmVybm9yLTA2MWE0MDFiIiwKICAgICAgICAgICJ3cml0ZUluSW5kZXgiOiAwCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJ3cml0ZS1pbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMzIsCiAgICAgICAgICAicm93IjogMTYsCiAgICAgICAgICAiY29udGVzdElkIjogIlVuaXRlZC1TdGF0ZXMtU2VuYXRvci1kM2YxYzc1YiIsCiAgICAgICAgICAid3JpdGVJbkluZGV4IjogMAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAid3JpdGUtaW4iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDMyLAogICAgICAgICAgInJvdyI6IDE5LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJSZXByZXNlbnRhdGl2ZS1pbi1Db25ncmVzcy0yNDY4M2I0NCIsCiAgICAgICAgICAid3JpdGVJbkluZGV4IjogMAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAid3JpdGUtaW4iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDMyLAogICAgICAgICAgInJvdyI6IDIyLAogICAgICAgICAgImNvbnRlc3RJZCI6ICJFeGVjdXRpdmUtQ291bmNpbG9yLWJiMjI1NTdmIiwKICAgICAgICAgICJ3cml0ZUluSW5kZXgiOiAwCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJ3cml0ZS1pbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMzIsCiAgICAgICAgICAicm93IjogMjUsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVNlbmF0b3ItMzkxMzgxZjgiLAogICAgICAgICAgIndyaXRlSW5JbmRleCI6IDAKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIndyaXRlLWluIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAzMiwKICAgICAgICAgICJyb3ciOiAyOCwKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtUmVwcmVzZW50YXRpdmVzLTdkM2E4ODIxIiwKICAgICAgICAgICJ3cml0ZUluSW5kZXgiOiAwCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJ3cml0ZS1pbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMzIsCiAgICAgICAgICAicm93IjogMzAsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlcy03ZDNhODgyMSIsCiAgICAgICAgICAid3JpdGVJbkluZGV4IjogMQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAid3JpdGUtaW4iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDMyLAogICAgICAgICAgInJvdyI6IDMyLAogICAgICAgICAgImNvbnRlc3RJZCI6ICJTdGF0ZS1SZXByZXNlbnRhdGl2ZXMtN2QzYTg4MjEiLAogICAgICAgICAgIndyaXRlSW5JbmRleCI6IDIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIndyaXRlLWluIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAzMiwKICAgICAgICAgICJyb3ciOiAzNCwKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtUmVwcmVzZW50YXRpdmVzLTdkM2E4ODIxIiwKICAgICAgICAgICJ3cml0ZUluSW5kZXgiOiAzCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJ3cml0ZS1pbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMzIsCiAgICAgICAgICAicm93IjogMzYsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlcy03ZDNhODgyMSIsCiAgICAgICAgICAid3JpdGVJbkluZGV4IjogNAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAid3JpdGUtaW4iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDMyLAogICAgICAgICAgInJvdyI6IDM4LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJTdGF0ZS1SZXByZXNlbnRhdGl2ZXMtN2QzYTg4MjEiLAogICAgICAgICAgIndyaXRlSW5JbmRleCI6IDUKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIndyaXRlLWluIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAzMiwKICAgICAgICAgICJyb3ciOiA0MCwKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtUmVwcmVzZW50YXRpdmVzLTdkM2E4ODIxIiwKICAgICAgICAgICJ3cml0ZUluSW5kZXgiOiA2CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJ3cml0ZS1pbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMzIsCiAgICAgICAgICAicm93IjogNDIsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlcy03ZDNhODgyMSIsCiAgICAgICAgICAid3JpdGVJbkluZGV4IjogNwogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAid3JpdGUtaW4iLAogICAgICAgICAgInNpZGUiOiAiZnJvbnQiLAogICAgICAgICAgImNvbHVtbiI6IDMyLAogICAgICAgICAgInJvdyI6IDQ0LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJTdGF0ZS1SZXByZXNlbnRhdGl2ZXMtN2QzYTg4MjEiLAogICAgICAgICAgIndyaXRlSW5JbmRleCI6IDgKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIndyaXRlLWluIiwKICAgICAgICAgICJzaWRlIjogImZyb250IiwKICAgICAgICAgICJjb2x1bW4iOiAzMiwKICAgICAgICAgICJyb3ciOiA0NiwKICAgICAgICAgICJjb250ZXN0SWQiOiAiU3RhdGUtUmVwcmVzZW50YXRpdmVzLTdkM2E4ODIxIiwKICAgICAgICAgICJ3cml0ZUluSW5kZXgiOiA5CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJ3cml0ZS1pbiIsCiAgICAgICAgICAic2lkZSI6ICJmcm9udCIsCiAgICAgICAgICAiY29sdW1uIjogMzIsCiAgICAgICAgICAicm93IjogNDgsCiAgICAgICAgICAiY29udGVzdElkIjogIlN0YXRlLVJlcHJlc2VudGF0aXZlcy03ZDNhODgyMSIsCiAgICAgICAgICAid3JpdGVJbkluZGV4IjogMTAKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIndyaXRlLWluIiwKICAgICAgICAgICJzaWRlIjogImJhY2siLAogICAgICAgICAgImNvbHVtbiI6IDMyLAogICAgICAgICAgInJvdyI6IDQsCiAgICAgICAgICAiY29udGVzdElkIjogIlNoZXJpZmYtNDI0M2ZlMGIiLAogICAgICAgICAgIndyaXRlSW5JbmRleCI6IDAKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIndyaXRlLWluIiwKICAgICAgICAgICJzaWRlIjogImJhY2siLAogICAgICAgICAgImNvbHVtbiI6IDMyLAogICAgICAgICAgInJvdyI6IDcsCiAgICAgICAgICAiY29udGVzdElkIjogIkNvdW50eS1BdHRvcm5leS0xMzNmOTEwZiIsCiAgICAgICAgICAid3JpdGVJbkluZGV4IjogMAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAid3JpdGUtaW4iLAogICAgICAgICAgInNpZGUiOiAiYmFjayIsCiAgICAgICAgICAiY29sdW1uIjogMzIsCiAgICAgICAgICAicm93IjogMTAsCiAgICAgICAgICAiY29udGVzdElkIjogIkNvdW50eS1UcmVhc3VyZXItODdkMjVhMzEiLAogICAgICAgICAgIndyaXRlSW5JbmRleCI6IDAKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIndyaXRlLWluIiwKICAgICAgICAgICJzaWRlIjogImJhY2siLAogICAgICAgICAgImNvbHVtbiI6IDMyLAogICAgICAgICAgInJvdyI6IDEzLAogICAgICAgICAgImNvbnRlc3RJZCI6ICJSZWdpc3Rlci1vZi1EZWVkcy1hMTI3OGRmMiIsCiAgICAgICAgICAid3JpdGVJbkluZGV4IjogMAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAid3JpdGUtaW4iLAogICAgICAgICAgInNpZGUiOiAiYmFjayIsCiAgICAgICAgICAiY29sdW1uIjogMzIsCiAgICAgICAgICAicm93IjogMTYsCiAgICAgICAgICAiY29udGVzdElkIjogIlJlZ2lzdGVyLW9mLVByb2JhdGUtYTQxMTdkYTgiLAogICAgICAgICAgIndyaXRlSW5JbmRleCI6IDAKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJ0eXBlIjogIndyaXRlLWluIiwKICAgICAgICAgICJzaWRlIjogImJhY2siLAogICAgICAgICAgImNvbHVtbiI6IDMyLAogICAgICAgICAgInJvdyI6IDE5LAogICAgICAgICAgImNvbnRlc3RJZCI6ICJDb3VudHktQ29tbWlzc2lvbmVyLWQ2ZmVlZDI1IiwKICAgICAgICAgICJ3cml0ZUluSW5kZXgiOiAwCiAgICAgICAgfQogICAgICBdCiAgICB9CiAgXSwKICAiY291bnR5IjogewogICAgImlkIjogIjEyMTAxIiwKICAgICJuYW1lIjogIkh1ZHNvbiIKICB9LAogICJkYXRlIjogIjIwMjAtMTEtMDNUMTI6MDA6MDAuMDAwLTA1OjAwIiwKICAiZGlzdHJpY3RzIjogWwogICAgewogICAgICAiaWQiOiAidG93bi1pZC0xMjEwMS1wcmVjaW5jdC1pZC0iLAogICAgICAibmFtZSI6ICJIdWRzb24iCiAgICB9CiAgXSwKICAibWFya1RocmVzaG9sZHMiOiB7CiAgICAibWFyZ2luYWwiOiAwLjA1LAogICAgImRlZmluaXRlIjogMC4wOAogIH0sCiAgInBhcnRpZXMiOiBbCiAgICB7CiAgICAgICJpZCI6ICJSZXB1YmxpY2FuLWYwMTY3Y2U3IiwKICAgICAgIm5hbWUiOiAiUmVwdWJsaWNhbiIsCiAgICAgICJmdWxsTmFtZSI6ICJSZXB1YmxpY2FuIiwKICAgICAgImFiYnJldiI6ICJSZXB1YmxpY2FuIgogICAgfSwKICAgIHsKICAgICAgImlkIjogIkRlbW9jcmF0aWMtYWVhMjBhZGIiLAogICAgICAibmFtZSI6ICJEZW1vY3JhdGljIiwKICAgICAgImZ1bGxOYW1lIjogIkRlbW9jcmF0aWMiLAogICAgICAiYWJicmV2IjogIkRlbW9jcmF0aWMiCiAgICB9LAogICAgewogICAgICAiaWQiOiAiT0MtM2EzODZkMmIiLAogICAgICAibmFtZSI6ICJPQyIsCiAgICAgICJmdWxsTmFtZSI6ICJPQyIsCiAgICAgICJhYmJyZXYiOiAiT0MiCiAgICB9CiAgXSwKICAicHJlY2luY3RTY2FuQWRqdWRpY2F0aW9uUmVhc29ucyI6IFsiT3ZlcnZvdGUiXSwKICAicHJlY2luY3RzIjogWwogICAgewogICAgICAiaWQiOiAidG93bi1pZC0xMjEwMS1wcmVjaW5jdC1pZC0iLAogICAgICAibmFtZSI6ICJIdWRzb24iCiAgICB9CiAgXSwKICAic2VhbFVybCI6ICIvc2VhbHMvU2VhbF9vZl9OZXdfSGFtcHNoaXJlLnN2ZyIsCiAgInN0YXRlIjogIk5IIiwKICAidGl0bGUiOiAiR2VuZXJhbCBFbGVjdGlvbiIKfQo=';

/**
 * MIME type of data/electionGridLayoutNewHampshireHudson/election.json.
 */
export const mimeType = 'application/json';

/**
 * Path to a file containing this file's contents.
 *
 * SHA-256 hash of file data: 52802850860fc485daadc11f02d58f177067071431600cb7d0b007f08ea422f5
 */
export function asFilePath(): string {
  const directoryPath = mkdtempSync(tmpdir() + sep);
  const filePath = join(directoryPath, 'election.json');
  writeFileSync(filePath, asBuffer());
  return filePath;
}

/**
 * Convert to a `data:` URL of data/electionGridLayoutNewHampshireHudson/election.json, suitable for embedding in HTML.
 *
 * SHA-256 hash of file data: 52802850860fc485daadc11f02d58f177067071431600cb7d0b007f08ea422f5
 */
export function asDataUrl(): string {
  return `data:${mimeType};base64,${resourceDataBase64}`;
}

/**
 * Raw data of data/electionGridLayoutNewHampshireHudson/election.json.
 *
 * SHA-256 hash of file data: 52802850860fc485daadc11f02d58f177067071431600cb7d0b007f08ea422f5
 */
export function asBuffer(): Buffer {
  return Buffer.from(resourceDataBase64, 'base64');
}

/**
 * Text content of data/electionGridLayoutNewHampshireHudson/election.json.
 *
 * SHA-256 hash of file data: 52802850860fc485daadc11f02d58f177067071431600cb7d0b007f08ea422f5
 */
export function asText(): string {
  return asBuffer().toString('utf-8');
}

/**
 * Full election definition for data/electionGridLayoutNewHampshireHudson/election.json.
 *
 * SHA-256 hash of file data: 52802850860fc485daadc11f02d58f177067071431600cb7d0b007f08ea422f5
 */
export const electionDefinition = safeParseElectionDefinition(
  asText()
).unsafeUnwrap();

/**
 * Election definition for data/electionGridLayoutNewHampshireHudson/election.json.
 *
 * SHA-256 hash of file data: 52802850860fc485daadc11f02d58f177067071431600cb7d0b007f08ea422f5
 */
export const election = electionDefinition.election;

/**
 * Ballot package for data/electionGridLayoutNewHampshireHudson/election.json.
 *
 * SHA-256 hash of file data: 52802850860fc485daadc11f02d58f177067071431600cb7d0b007f08ea422f5
 */
export function toBallotPackage(systemSettings = DEFAULT_SYSTEM_SETTINGS): BallotPackage {
  return {
    electionDefinition,
    systemSettings,
  };
}