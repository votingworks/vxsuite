/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** Load a scanned page image from the file at the given path. */
export declare function loadImage(path: string): Promise<GrayImage>
/** Create a `ScannedPage` from grayscale (1 byte per pixel) image data. */
export declare function grayImageFromGrayImageData(width: number, height: number, data: Uint8ClampedArray): GrayImage
/** Create a `GrayImage` from RGBA (4 bytes per pixel) image data. */
export declare function grayImageFromRgbaImageData(width: number, height: number, data: Uint8ClampedArray): GrayImage
export interface Point {
  x: number
  y: number
}
export interface BestFitLine {
  /** Which orientation this line has. */
  orientation: "horizontal" | "vertical"
  /**
   * The slope of the line as differs from a straight line with the
   * orientation of this `BestFitLine`.
   */
  slope: number
  /**
   * The y-intercept for a horizontal line or the x-intercept for a vertical
   * line.
   */
  intercept: number
  /**
   * The average distance each pixel along this edge is from its
   * corresponding pixel along the line.
   */
  errorAverage: number
}
/** Results for skew/stretch/rotation analysis of scanned pages. */
export interface PageShapeAnalysis {
  /** The best fit line for points along the top edge of the page shape. */
  topLine: BestFitLine
  /** The best fit line for points along the bottom edge of the page shape. */
  bottomLine: BestFitLine
  /** The best fit line for points along the left edge of the page shape. */
  leftLine: BestFitLine
  /** The best fit line for points along the right edge of the page shape. */
  rightLine: BestFitLine
  /** Intersection point of the top and left best fit lines. */
  topLeftCorner: Point
  /** Intersection point of the top and right best fit lines. */
  topRightCorner: Point
  /** Intersection point of the bottom and left best fit lines. */
  bottomLeftCorner: Point
  /** Intersection point of the bottom and right best fit lines. */
  bottomRightCorner: Point
  /**
   * Average error of the four best fit lines, weighted by the
   * corner-to-corner distance of each line.
   */
  averageLineError: number
  /** Absolute angle delta of the horizontal lines (top & bottom) in radians. */
  horizontalLinesAlignmentDiff: number
  /** Absolute angle delta of the vertical lines (left & right) in radians. */
  verticalLinesAlignmentDiff: number
}
/**
 * Analyze the given scanned page to find details of the page shape within the
 * image. This includes trying to locate the four edges, the four corners, and
 * deriving relevant information about them such as their slope and
 * straightness.
 */
export declare function analyzeScannedPage(scannedPage: GrayImage): Promise<PageShapeAnalysis>
/** Raw RGBA image data. Isomorphic to `ImageData` from e.g. `canvas`. */
export interface RgbaImage {
  width: number
  height: number
  data: Uint8ClampedArray
}
/** Generates a debug image based on the existing analysis of an original image. */
export declare function createDebugImage(originalImage: GrayImage, analysis: PageShapeAnalysis): Promise<RgbaImage>
/** Holds a reference to a `image::GrayImage` for analysis purposes. */
export declare class GrayImage { }
