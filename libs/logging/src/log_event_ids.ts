/**
 * Do not edit this file directly! It's generated and manual changes will be overwritten.
 * To add a log event, edit log_event_details.toml and run `pnpm build:generate-types`.
 */

import { throwIllegalValue } from '@votingworks/basics';
import { BaseLogEventDetails, AppName, LogEventType } from './base_types';

export interface LogDetails extends Omit<BaseLogEventDetails, 'eventId'> {
  // LogEventId is generated later in this file
  eventId: LogEventId;
}

export enum LogEventId {
  ElectionConfigured = 'election-configured',
  ElectionUnconfigured = 'election-unconfigured',
  AuthPinEntry = 'auth-pin-entry',
  AuthPinEntryLockout = 'auth-pin-entry-lockout',
  AuthLogin = 'auth-login',
  AuthVoterSessionUpdated = 'auth-voter-session-updated',
  AuthLogout = 'auth-logout',
  UsbDriveEjectInit = 'usb-drive-eject-init',
  UsbDriveEjected = 'usb-drive-eject-complete',
  UsbDriveMountInit = 'usb-drive-mount-init',
  UsbDriveMounted = 'usb-drive-mount-complete',
  UsbDriveFormatInit = 'usb-drive-format-init',
  UsbDriveFormatted = 'usb-drive-format-complete',
  ApplicationStartup = 'application-startup',
  PrinterConfigurationAdded = 'printer-config-added',
  PrinterConfigurationRemoved = 'printer-config-removed',
  PrinterStatusChanged = 'printer-status-changed',
  PrinterPrintRequest = 'printer-print-request',
  PrinterPrintComplete = 'printer-print-complete',
  DeviceAttached = 'device-attached',
  DeviceUnattached = 'device-unattached',
  WorkspaceConfigurationMessage = 'workspace-config',
  TogglingTestMode = 'toggle-test-mode-init',
  ToggledTestMode = 'toggled-test-mode',
  FileSaved = 'file-saved',
  LogConversionToCdfComplete = 'convert-log-cdf-complete',
  LogConversionToCdfLogLineError = 'convert-log-cdf-log-line-error',
  RebootMachine = 'reboot-machine',
  PowerDown = 'power-down-machine',
  DiagnosticInit = 'diagnostic-init',
  DiagnosticError = 'diagnostic-error',
  DiagnosticComplete = 'diagnostic-complete',
  ReadinessReportPrinted = 'readiness-report-printed',
  ReadinessReportSaved = 'readiness-report-saved',
  HeadphonesDetectionError = 'headphones-detection-errors',
  UnknownError = 'unknown-error',
  PermissionDenied = 'permission-denied',
  ParseError = 'parse-error',
  DatabaseConnectInit = 'database-connect-init',
  DatabaseConnectComplete = 'database-connect-complete',
  DatabaseCreateInit = 'database-create-init',
  DatabaseCreateComplete = 'database-create-complete',
  DatabaseDestroyInit = 'database-destroy-init',
  DatabaseDestroyComplete = 'database-destroy-complete',
  FileReadError = 'file-read-error',
  DmVerityBoot = 'dmverity-boot',
  MachineBootInit = 'machine-boot-init',
  MachineBootComplete = 'machine-boot-complete',
  MachineShutdownInit = 'machine-shutdown-init',
  MachineShutdownComplete = 'machine-shutdown-complete',
  UsbDeviceChangeDetected = 'usb-device-change-detected',
  Info = 'info',
  Heartbeat = 'heartbeat',
  ProcessStarted = 'process-started',
  ProcessTerminated = 'process-terminated',
  SudoAction = 'sudo-action',
  PasswdChange = 'password-change',
  SaveElectionPackageInit = 'save-election-package-init',
  SaveElectionPackageComplete = 'save-election-package-complete',
  SmartCardProgramInit = 'smart-card-program-init',
  SmartCardProgramComplete = 'smart-card-program-complete',
  SmartCardUnprogramInit = 'smart-card-unprogram-init',
  SmartCardUnprogramComplete = 'smart-card-unprogram-complete',
  ListCastVoteRecordExportsOnUsbDrive = 'list-cast-vote-record-exports-on-usb-drive',
  ImportCastVoteRecordsInit = 'import-cast-vote-records-init',
  ImportCastVoteRecordsComplete = 'import-cast-vote-records-complete',
  ClearImportedCastVoteRecordsInit = 'clear-imported-cast-vote-records-init',
  ClearImportedCastVoteRecordsComplete = 'clear-imported-cast-vote-records-complete',
  ManualTallyDataEdited = 'manual-tally-data-edited',
  ManualTallyDataRemoved = 'manual-tally-data-removed',
  ElectionResultsReportingTallyFileImported = 'election-results-reporting-tally-file-imported',
  MarkedTallyResultsOfficial = 'marked-tally-results-official',
  ElectionReportPreviewed = 'election-report-previewed',
  ElectionReportPrinted = 'election-report-printed',
  WriteInAdjudicated = 'write-in-adjudicated',
  ClearingBallotData = 'clear-ballot-data-init',
  ClearedBallotData = 'clear-ballot-data-complete',
  DeleteScanBatchInit = 'delete-cvr-batch-init',
  DeleteScanBatchComplete = 'delete-cvr-batch-complete',
  ScanBatchInit = 'scan-batch-init',
  ScanSheetComplete = 'scan-sheet-complete',
  ScanBatchComplete = 'scan-batch-complete',
  ScanBatchContinue = 'scan-batch-continue',
  ScanAdjudicationInfo = 'scan-adjudication-info',
  FujitsuScanInit = 'fujitsu-scan-init',
  FujitsuScanImageScanned = 'fujitsu-scan-sheet-scanned',
  FujitsuScanBatchComplete = 'fujitsu-scan-batch-complete',
  FujitsuScanMessage = 'fujitsu-scan-message',
  ElectionPackageLoadedFromUsb = 'election-package-load-from-usb-complete',
  ExportCastVoteRecordsInit = 'export-cast-vote-records-init',
  ExportCastVoteRecordsComplete = 'export-cast-vote-records-complete',
  PollsOpened = 'polls-opened',
  VotingPaused = 'voting-paused',
  VotingResumed = 'voting-resumed',
  PollsClosed = 'polls-closed',
  ResetPollsToPaused = 'reset-polls-to-paused',
  BallotBoxEmptied = 'ballot-box-emptied',
  PrecinctConfigurationChanged = 'precinct-configuration-changed',
  ScannerBatchStarted = 'scanner-batch-started',
  ScannerBatchEnded = 'scanner-batch-ended',
  ScannerEvent = 'scanner-state-machine-event',
  ScannerStateChanged = 'scanner-state-machine-transition',
  SoundToggled = 'sound-toggled',
  DoubleSheetDetectionToggled = 'double-sheet-toggled',
  ContinuousExportToggled = 'continuous-export-toggled',
  MarkScanStateMachineEvent = 'mark-scan-state-machine-event',
  PatDeviceError = 'pat-device-error',
  PaperHandlerStateChanged = 'paper-handler-state-machine-transition',
  VoteCast = 'vote-cast',
  BallotInvalidated = 'ballot-invalidated',
  PollWorkerConfirmedBallotRemoval = 'poll-worker-confirmed-ballot-removal',
  BlankInterpretation = 'blank-sheet-interpretation',
  PaperHandlerConnection = 'paper-handler-connection',
  CreateVirtualUinputDeviceInit = 'create-virtual-uinput-device-init',
  CreateVirtualUinputDeviceComplete = 'create-virtual-uinput-device-complete',
  ConnectToGpioPinInit = 'connect-to-gpio-pin-init',
  ConnectToGpioPinComplete = 'connect-to-gpio-pin-complete',
  ConnectToPatInputInit = 'connect-to-pat-input-init',
  ConnectToPatInputComplete = 'connect-to-pat-input-complete',
  ControllerConnectionInit = 'controller-connection-init',
  ControllerConnectionComplete = 'controller-connection-complete',
  ControllerHandshakeInit = 'controller-handshake-init',
  ControllerHandshakeComplete = 'controller-handshake-complete',
  ErrorSettingSigintHandler = 'error-setting-sigint-handler',
  UnexpectedHardwareDeviceResponse = 'unexpected-hardware-device-response',
  NoPid = 'no-pid',
  SignedHashValidationInit = 'signed-hash-validation-init',
  SignedHashValidationComplete = 'signed-hash-validation-complete',
}

const ElectionConfigured: LogDetails = {
  eventId: LogEventId.ElectionConfigured,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'The user has configured current machine to a new election definition.',
  defaultMessage: 'Application has been configured for a new election.',
};

const ElectionUnconfigured: LogDetails = {
  eventId: LogEventId.ElectionUnconfigured,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'The user has unconfigured current machine to remove the current election definition, and all other data.',
  defaultMessage:
    'Application has been unconfigured from the previous election.',
};

const AuthPinEntry: LogDetails = {
  eventId: LogEventId.AuthPinEntry,
  eventType: LogEventType.UserAction,
  documentationMessage: 'A user entered a PIN to log in.',
};

const AuthPinEntryLockout: LogDetails = {
  eventId: LogEventId.AuthPinEntryLockout,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'A user entered an incorrect PIN to log in, locking out their account until the indicated time.',
};

const AuthLogin: LogDetails = {
  eventId: LogEventId.AuthLogin,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'A user logged in (or failed to log in). An optional reason key may be provided for failures.',
};

const AuthVoterSessionUpdated: LogDetails = {
  eventId: LogEventId.AuthVoterSessionUpdated,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'Session parameters for a logged in voter were updated.',
};

const AuthLogout: LogDetails = {
  eventId: LogEventId.AuthLogout,
  eventType: LogEventType.UserAction,
  documentationMessage: 'A user logged out (or failed to log out).',
};

const UsbDriveEjectInit: LogDetails = {
  eventId: LogEventId.UsbDriveEjectInit,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'A request to eject the current USB drive was made by the user, the USB drive will now be ejected.',
  defaultMessage: 'Attempting to eject USB drive based on user request...',
};

const UsbDriveEjected: LogDetails = {
  eventId: LogEventId.UsbDriveEjected,
  eventType: LogEventType.ApplicationStatus,
  documentationMessage:
    'Attempt to eject USB drive complete. Success or failure indicated by disposition.',
};

const UsbDriveMountInit: LogDetails = {
  eventId: LogEventId.UsbDriveMountInit,
  eventType: LogEventType.ApplicationAction,
  documentationMessage:
    'The USB drive is attempting to mount. This action is taken automatically by the application when a new USB drive is detected.',
  defaultMessage: 'Application is attempting to mount a USB drive...',
};

const UsbDriveMounted: LogDetails = {
  eventId: LogEventId.UsbDriveMounted,
  eventType: LogEventType.ApplicationStatus,
  documentationMessage:
    'Attempt to mount USB drive mount complete. Success or failure indicated by disposition.',
};

const UsbDriveFormatInit: LogDetails = {
  eventId: LogEventId.UsbDriveFormatInit,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'A request to format the current USB drive was made by the user. The usb drive will now be reformatted for compatibility with VotingWorks software.',
  defaultMessage: 'Attempting to reformat USB drive based on user request...',
};

const UsbDriveFormatted: LogDetails = {
  eventId: LogEventId.UsbDriveFormatted,
  eventType: LogEventType.ApplicationStatus,
  documentationMessage:
    'Attempt to reformat USB drive complete. Success or failure indicated by disposition.',
};

const ApplicationStartup: LogDetails = {
  eventId: LogEventId.ApplicationStartup,
  eventType: LogEventType.ApplicationStatus,
  documentationMessage:
    'Application finished starting up, success or failure indicated by disposition.',
};

const PrinterConfigurationAdded: LogDetails = {
  eventId: LogEventId.PrinterConfigurationAdded,
  eventType: LogEventType.ApplicationStatus,
  documentationMessage:
    'Application saw a printer configuration added to the system, current connection status of that printer is logged.',
};

const PrinterConfigurationRemoved: LogDetails = {
  eventId: LogEventId.PrinterConfigurationRemoved,
  eventType: LogEventType.ApplicationStatus,
  documentationMessage:
    'Application saw a printer configuration removed from the system.',
};

const PrinterStatusChanged: LogDetails = {
  eventId: LogEventId.PrinterStatusChanged,
  eventType: LogEventType.ApplicationStatus,
  documentationMessage:
    'Application saw a change in the status of the currently connected printer.',
};

const PrinterPrintRequest: LogDetails = {
  eventId: LogEventId.PrinterPrintRequest,
  eventType: LogEventType.UserAction,
  documentationMessage: 'A print request was triggered.',
};

const PrinterPrintComplete: LogDetails = {
  eventId: LogEventId.PrinterPrintComplete,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'A print request was completed. Success or failure is indicated by disposition.',
};

const DeviceAttached: LogDetails = {
  eventId: LogEventId.DeviceAttached,
  eventType: LogEventType.ApplicationStatus,
  documentationMessage: 'Application saw a device attached to the system.',
};

const DeviceUnattached: LogDetails = {
  eventId: LogEventId.DeviceUnattached,
  eventType: LogEventType.ApplicationStatus,
  documentationMessage: 'Application saw a device unattached from the system.',
};

const WorkspaceConfigurationMessage: LogDetails = {
  eventId: LogEventId.WorkspaceConfigurationMessage,
  eventType: LogEventType.ApplicationStatus,
  documentationMessage:
    'Message from the backend service about how it is configured while starting up.',
};

const TogglingTestMode: LogDetails = {
  eventId: LogEventId.TogglingTestMode,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'User has initiated toggling between test mode and live mode in the current application.',
};

const ToggledTestMode: LogDetails = {
  eventId: LogEventId.ToggledTestMode,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'User has finished toggling between live mode and test mode in the given application. Success or failure is indicated by the disposition.',
};

const FileSaved: LogDetails = {
  eventId: LogEventId.FileSaved,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'File is saved to a USB drive. Success or failure indicated by disposition. Type of file specified with "fileType" key. For success logs the saved filename specified with "filename" key.',
};

const LogConversionToCdfComplete: LogDetails = {
  eventId: LogEventId.LogConversionToCdfComplete,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'The user has converted the log file to a CDF format for saving. Success or failure indicated by disposition.',
};

const LogConversionToCdfLogLineError: LogDetails = {
  eventId: LogEventId.LogConversionToCdfLogLineError,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'Error seen when converting a single log to the CDF format. This log line will be skipped. Disposition of this log is always failure.',
};

const RebootMachine: LogDetails = {
  eventId: LogEventId.RebootMachine,
  eventType: LogEventType.UserAction,
  documentationMessage: 'User has triggered a reboot of the machine.',
};

const PowerDown: LogDetails = {
  eventId: LogEventId.PowerDown,
  eventType: LogEventType.UserAction,
  documentationMessage: 'User has triggered the machine to power down.',
};

const DiagnosticInit: LogDetails = {
  eventId: LogEventId.DiagnosticInit,
  eventType: LogEventType.UserAction,
  documentationMessage: 'The user has started a hardware diagnostic.',
};

const DiagnosticError: LogDetails = {
  eventId: LogEventId.DiagnosticError,
  eventType: LogEventType.UserAction,
  documentationMessage: 'An error occurred when running a diagnostic.',
};

const DiagnosticComplete: LogDetails = {
  eventId: LogEventId.DiagnosticComplete,
  eventType: LogEventType.UserAction,
  documentationMessage: 'The user has completed a hardware diagnostic.',
};

const ReadinessReportPrinted: LogDetails = {
  eventId: LogEventId.ReadinessReportPrinted,
  eventType: LogEventType.UserAction,
  documentationMessage: 'The user has printed an equipment readiness report.',
};

const ReadinessReportSaved: LogDetails = {
  eventId: LogEventId.ReadinessReportSaved,
  eventType: LogEventType.UserAction,
  documentationMessage: 'The user has saved an equipment readiness report.',
};

const HeadphonesDetectionError: LogDetails = {
  eventId: LogEventId.HeadphonesDetectionError,
  eventType: LogEventType.ApplicationStatus,
  documentationMessage: 'Error while attempting to detect headphones.',
};

const UnknownError: LogDetails = {
  eventId: LogEventId.UnknownError,
  eventType: LogEventType.ApplicationStatus,
  documentationMessage: 'Machine encountered an unknown error.',
};

const PermissionDenied: LogDetails = {
  eventId: LogEventId.PermissionDenied,
  eventType: LogEventType.SystemStatus,
  documentationMessage: 'Permission denied when performing a system action.',
};

const ParseError: LogDetails = {
  eventId: LogEventId.ParseError,
  eventType: LogEventType.SystemAction,
  documentationMessage: 'A system action failed to parse data.',
};

const DatabaseConnectInit: LogDetails = {
  eventId: LogEventId.DatabaseConnectInit,
  eventType: LogEventType.SystemAction,
  documentationMessage: 'Initiating connection to the database.',
};

const DatabaseConnectComplete: LogDetails = {
  eventId: LogEventId.DatabaseConnectComplete,
  eventType: LogEventType.SystemAction,
  documentationMessage:
    'Database connection established. Success or failure indicated by disposition.',
};

const DatabaseCreateInit: LogDetails = {
  eventId: LogEventId.DatabaseCreateInit,
  eventType: LogEventType.SystemAction,
  documentationMessage: 'Initiating creation of the database.',
};

const DatabaseCreateComplete: LogDetails = {
  eventId: LogEventId.DatabaseCreateComplete,
  eventType: LogEventType.SystemAction,
  documentationMessage:
    'Database created and setup. Success or failure indicated by disposition.',
};

const DatabaseDestroyInit: LogDetails = {
  eventId: LogEventId.DatabaseDestroyInit,
  eventType: LogEventType.SystemAction,
  documentationMessage: 'Initiating destruction of the database.',
};

const DatabaseDestroyComplete: LogDetails = {
  eventId: LogEventId.DatabaseDestroyComplete,
  eventType: LogEventType.SystemAction,
  documentationMessage:
    'Database destroyed. Success or failure indicated by disposition.',
};

const FileReadError: LogDetails = {
  eventId: LogEventId.FileReadError,
  eventType: LogEventType.SystemAction,
  documentationMessage: 'A system action failed to read a file from disk.',
};

const DmVerityBoot: LogDetails = {
  eventId: LogEventId.DmVerityBoot,
  eventType: LogEventType.SystemStatus,
  documentationMessage: 'The system booted with dm-verity enabled.',
};

const MachineBootInit: LogDetails = {
  eventId: LogEventId.MachineBootInit,
  eventType: LogEventType.SystemAction,
  documentationMessage: 'The machine is beginning the boot process.',
};

const MachineBootComplete: LogDetails = {
  eventId: LogEventId.MachineBootComplete,
  eventType: LogEventType.SystemStatus,
  documentationMessage: 'The machine has completed the boot process.',
};

const MachineShutdownInit: LogDetails = {
  eventId: LogEventId.MachineShutdownInit,
  eventType: LogEventType.SystemAction,
  documentationMessage:
    'The machine is beginning the shutdown process to power down or reboot, as indicated by the message.',
};

const MachineShutdownComplete: LogDetails = {
  eventId: LogEventId.MachineShutdownComplete,
  eventType: LogEventType.SystemStatus,
  documentationMessage:
    'The machine has completed all the steps to shutdown and will now power down or reboot.',
};

const UsbDeviceChangeDetected: LogDetails = {
  eventId: LogEventId.UsbDeviceChangeDetected,
  eventType: LogEventType.SystemStatus,
  documentationMessage:
    'A message from the machine kernel about an externally-connected USB device, usually when a new device is connected or disconnected.',
};

const Info: LogDetails = {
  eventId: LogEventId.Info,
  eventType: LogEventType.SystemStatus,
  documentationMessage: 'The process is reporting general status.',
};

const Heartbeat: LogDetails = {
  eventId: LogEventId.Heartbeat,
  eventType: LogEventType.SystemStatus,
  documentationMessage: 'The process sent a heartbeat',
};

const ProcessStarted: LogDetails = {
  eventId: LogEventId.ProcessStarted,
  eventType: LogEventType.SystemAction,
  documentationMessage:
    'A VotingWorks-authored process (eg. hardware daemon) has been started.',
};

const ProcessTerminated: LogDetails = {
  eventId: LogEventId.ProcessTerminated,
  eventType: LogEventType.SystemAction,
  documentationMessage:
    'A VotingWorks-authored process (eg. hardware daemon) has been terminated.',
};

const SudoAction: LogDetails = {
  eventId: LogEventId.SudoAction,
  eventType: LogEventType.UserAction,
  documentationMessage: 'A command was executed with sudo privileges.',
};

const PasswdChange: LogDetails = {
  eventId: LogEventId.PasswdChange,
  eventType: LogEventType.UserAction,
  documentationMessage: 'A password change was executed.',
};

const SaveElectionPackageInit: LogDetails = {
  eventId: LogEventId.SaveElectionPackageInit,
  eventType: LogEventType.UserAction,
  documentationMessage: 'Saving the election package is initiated.',
  defaultMessage: 'User initiated saving the election package...',
  restrictInDocumentationToApps: [AppName.VxAdmin],
};

const SaveElectionPackageComplete: LogDetails = {
  eventId: LogEventId.SaveElectionPackageComplete,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'Saving the election package completed, success or failure is indicated by the disposition.',
  restrictInDocumentationToApps: [AppName.VxAdmin],
};

const SmartCardProgramInit: LogDetails = {
  eventId: LogEventId.SmartCardProgramInit,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'A smart card is being programmed. The new smart card user role is indicated by the programmedUserRole key.',
  restrictInDocumentationToApps: [AppName.VxAdmin],
};

const SmartCardProgramComplete: LogDetails = {
  eventId: LogEventId.SmartCardProgramComplete,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'A smart card has been programmed (or failed to be programmed). The new smart card user role is indicated by the programmedUserRole key.',
  restrictInDocumentationToApps: [AppName.VxAdmin],
};

const SmartCardUnprogramInit: LogDetails = {
  eventId: LogEventId.SmartCardUnprogramInit,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'A smart card is being unprogrammed. The current smart card user role is indicated by the programmedUserRole key.',
  restrictInDocumentationToApps: [AppName.VxAdmin],
};

const SmartCardUnprogramComplete: LogDetails = {
  eventId: LogEventId.SmartCardUnprogramComplete,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'A smart card has been unprogrammed (or failed to be unprogrammed). The previous (or current in the case of failure) smart card user role is indicated by the previousProgrammedUserRole key (or programmedUserRole key in the case of failure).',
  restrictInDocumentationToApps: [AppName.VxAdmin],
};

const ListCastVoteRecordExportsOnUsbDrive: LogDetails = {
  eventId: LogEventId.ListCastVoteRecordExportsOnUsbDrive,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'Cast vote record exports on the inserted USB drive were listed.',
  restrictInDocumentationToApps: [AppName.VxAdmin],
};

const ImportCastVoteRecordsInit: LogDetails = {
  eventId: LogEventId.ImportCastVoteRecordsInit,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'Cast vote records are being imported from a USB drive.',
  restrictInDocumentationToApps: [AppName.VxAdmin],
};

const ImportCastVoteRecordsComplete: LogDetails = {
  eventId: LogEventId.ImportCastVoteRecordsComplete,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'Cast vote records have been imported from a USB drive (or failed to be imported).',
  restrictInDocumentationToApps: [AppName.VxAdmin],
};

const ClearImportedCastVoteRecordsInit: LogDetails = {
  eventId: LogEventId.ClearImportedCastVoteRecordsInit,
  eventType: LogEventType.UserAction,
  documentationMessage: 'Imported cast vote records are being cleared.',
  restrictInDocumentationToApps: [AppName.VxAdmin],
};

const ClearImportedCastVoteRecordsComplete: LogDetails = {
  eventId: LogEventId.ClearImportedCastVoteRecordsComplete,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'Imported cast vote records have been cleared (or failed to be cleared).',
  restrictInDocumentationToApps: [AppName.VxAdmin],
};

const ManualTallyDataEdited: LogDetails = {
  eventId: LogEventId.ManualTallyDataEdited,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'User added or edited manually entered tally data to be included in the results alongside loaded CVR files.',
  restrictInDocumentationToApps: [AppName.VxAdmin],
};

const ManualTallyDataRemoved: LogDetails = {
  eventId: LogEventId.ManualTallyDataRemoved,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'User removed manual tally data that was previously entered.',
  restrictInDocumentationToApps: [AppName.VxAdmin],
};

const ElectionResultsReportingTallyFileImported: LogDetails = {
  eventId: LogEventId.ElectionResultsReportingTallyFileImported,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'User imported an Election Results Reporting file with tally data to be included in the results alongside loaded CVR files.',
  restrictInDocumentationToApps: [AppName.VxAdmin],
};

const MarkedTallyResultsOfficial: LogDetails = {
  eventId: LogEventId.MarkedTallyResultsOfficial,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'User marked the tally results as official. This disables loading more CVR files or editing manual tally data.',
  restrictInDocumentationToApps: [AppName.VxAdmin],
};

const ElectionReportPreviewed: LogDetails = {
  eventId: LogEventId.ElectionReportPreviewed,
  eventType: LogEventType.UserAction,
  documentationMessage: 'Report previewed by the user.',
  restrictInDocumentationToApps: [AppName.VxAdmin],
};

const ElectionReportPrinted: LogDetails = {
  eventId: LogEventId.ElectionReportPrinted,
  eventType: LogEventType.UserAction,
  documentationMessage: 'Report printed by the user.',
  restrictInDocumentationToApps: [AppName.VxAdmin],
};

const WriteInAdjudicated: LogDetails = {
  eventId: LogEventId.WriteInAdjudicated,
  eventType: LogEventType.UserAction,
  documentationMessage: 'User adjudicated a write-in.',
  restrictInDocumentationToApps: [AppName.VxAdmin],
};

const ClearingBallotData: LogDetails = {
  eventId: LogEventId.ClearingBallotData,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'User has initiated clearing ballot data in the current application.',
  defaultMessage: 'User is clearing ballot data...',
  restrictInDocumentationToApps: [AppName.VxCentralScan],
};

const ClearedBallotData: LogDetails = {
  eventId: LogEventId.ClearedBallotData,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'User has finished clearing ballot data in the given application. Success or failure is indicated by the disposition.',
  restrictInDocumentationToApps: [AppName.VxCentralScan],
};

const DeleteScanBatchInit: LogDetails = {
  eventId: LogEventId.DeleteScanBatchInit,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'User has initiated deleting a scanning batch. Number of ballots in batch specified by keep `numberOfBallotsInBatch`. Batch ID specified by `batchId`',
  restrictInDocumentationToApps: [AppName.VxCentralScan],
};

const DeleteScanBatchComplete: LogDetails = {
  eventId: LogEventId.DeleteScanBatchComplete,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'User has completed deleting a scanning batch. Number of ballots in batch specified by keep `numberOfBallotsInBatch`. Batch ID specified by `batchId`.',
  restrictInDocumentationToApps: [AppName.VxCentralScan],
};

const ScanBatchInit: LogDetails = {
  eventId: LogEventId.ScanBatchInit,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'The user has begun scanning a new batch of ballots. Success or failure of beginning the process of scanning indicated by disposition. Batch ID for next scanned batch indicated in batchId.',
  restrictInDocumentationToApps: [AppName.VxCentralScan],
};

const ScanSheetComplete: LogDetails = {
  eventId: LogEventId.ScanSheetComplete,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'A single sheet in a batch has completed scanning. Success or failure of the scanning indicated by disposition. Ballots rejected due to being unreadable, configured for the wrong election, needed resolution, etc. marked as `failure`. Current batch specified by `batchId` and sheet in batch specified by `sheetCount`.',
  restrictInDocumentationToApps: [AppName.VxCentralScan],
};

const ScanBatchComplete: LogDetails = {
  eventId: LogEventId.ScanBatchComplete,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'A batch of scanned sheets has finished scanning. Success or failure indicated by disposition.',
  restrictInDocumentationToApps: [AppName.VxCentralScan],
};

const ScanBatchContinue: LogDetails = {
  eventId: LogEventId.ScanBatchContinue,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'Scanning continued by user after errors and/or warning stopped scanning. Log will indicate if the sheet was tabulated with warnings, or if the user indicated removing the ballot in order to continue scanning.',
  restrictInDocumentationToApps: [AppName.VxCentralScan],
};

const ScanAdjudicationInfo: LogDetails = {
  eventId: LogEventId.ScanAdjudicationInfo,
  eventType: LogEventType.ApplicationStatus,
  documentationMessage:
    'Information about a ballot sheet that needs adjudication from the user. The possible unresolvable errors are InvalidTestModePage when a test mode ballot is seen when scanning in live mode or vice versa, InvalidBallotHashPage when a sheet for the wrong election is seen, InvalidPrecinctPage when a sheet for an invalid precinct is seen, UnreadablePage for a sheet that is unrecognizable as either a HMPB or BMD ballot, and BlankPage for a blank sheet. Warnings that the user can choose to tabulate with a ballot include MarginalMark, Overvote, Undervote, and BlankBallot (a ballot where there are no votes for any contest).',
  restrictInDocumentationToApps: [AppName.VxCentralScan],
};

const FujitsuScanInit: LogDetails = {
  eventId: LogEventId.FujitsuScanInit,
  eventType: LogEventType.ApplicationAction,
  documentationMessage:
    'Application is initiating a new scanning batch on the fujitsu scanner.',
  restrictInDocumentationToApps: [AppName.VxCentralScan],
};

const FujitsuScanImageScanned: LogDetails = {
  eventId: LogEventId.FujitsuScanImageScanned,
  eventType: LogEventType.ApplicationStatus,
  documentationMessage:
    'A scanned image has returned while scanning from a fujitsu scanner, or an error was seen while scanning. Success or failure indicated by disposition.',
  restrictInDocumentationToApps: [AppName.VxCentralScan],
};

const FujitsuScanBatchComplete: LogDetails = {
  eventId: LogEventId.FujitsuScanBatchComplete,
  eventType: LogEventType.ApplicationStatus,
  documentationMessage:
    'A batch of sheets has completed scanning on the fujitsu scanner.',
  restrictInDocumentationToApps: [AppName.VxCentralScan],
};

const FujitsuScanMessage: LogDetails = {
  eventId: LogEventId.FujitsuScanMessage,
  eventType: LogEventType.ApplicationStatus,
  documentationMessage:
    'Message from the driver handling the fujitsu scanner regarding scanning progress.',
  restrictInDocumentationToApps: [AppName.VxCentralScan],
};

const ElectionPackageLoadedFromUsb: LogDetails = {
  eventId: LogEventId.ElectionPackageLoadedFromUsb,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'The election package has been read from the USB drive. Success or failure indicated by disposition.',
  restrictInDocumentationToApps: [AppName.VxCentralScan, AppName.VxScan],
};

const ExportCastVoteRecordsInit: LogDetails = {
  eventId: LogEventId.ExportCastVoteRecordsInit,
  eventType: LogEventType.UserAction,
  documentationMessage: 'Cast vote records are being exported to a USB drive.',
  restrictInDocumentationToApps: [AppName.VxCentralScan, AppName.VxScan],
};

const ExportCastVoteRecordsComplete: LogDetails = {
  eventId: LogEventId.ExportCastVoteRecordsComplete,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'Cast vote records have been exported to a USB drive (or failed to be exported).',
  restrictInDocumentationToApps: [AppName.VxCentralScan, AppName.VxScan],
};

const PollsOpened: LogDetails = {
  eventId: LogEventId.PollsOpened,
  eventType: LogEventType.UserAction,
  documentationMessage: 'User has opened the polls.',
  restrictInDocumentationToApps: [
    AppName.VxMark,
    AppName.VxScan,
    AppName.VxMarkScan,
  ],
};

const VotingPaused: LogDetails = {
  eventId: LogEventId.VotingPaused,
  eventType: LogEventType.UserAction,
  documentationMessage: 'User has paused voting and polls are now paused.',
  restrictInDocumentationToApps: [
    AppName.VxMark,
    AppName.VxScan,
    AppName.VxMarkScan,
  ],
};

const VotingResumed: LogDetails = {
  eventId: LogEventId.VotingResumed,
  eventType: LogEventType.UserAction,
  documentationMessage: 'User has resumed voting and polls are now open.',
  restrictInDocumentationToApps: [
    AppName.VxMark,
    AppName.VxScan,
    AppName.VxMarkScan,
  ],
};

const PollsClosed: LogDetails = {
  eventId: LogEventId.PollsClosed,
  eventType: LogEventType.UserAction,
  documentationMessage: 'User has closed the polls.',
  restrictInDocumentationToApps: [
    AppName.VxMark,
    AppName.VxScan,
    AppName.VxMarkScan,
  ],
};

const ResetPollsToPaused: LogDetails = {
  eventId: LogEventId.ResetPollsToPaused,
  eventType: LogEventType.UserAction,
  documentationMessage: 'User has reset the polls from closed to paused.',
  restrictInDocumentationToApps: [
    AppName.VxMark,
    AppName.VxScan,
    AppName.VxMarkScan,
  ],
};

const BallotBoxEmptied: LogDetails = {
  eventId: LogEventId.BallotBoxEmptied,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'Poll worker confirmed that they emptied the ballot box.',
  restrictInDocumentationToApps: [AppName.VxMarkScan],
};

const PrecinctConfigurationChanged: LogDetails = {
  eventId: LogEventId.PrecinctConfigurationChanged,
  eventType: LogEventType.UserAction,
  documentationMessage: 'User has changed the precinct setting.',
  restrictInDocumentationToApps: [
    AppName.VxMark,
    AppName.VxScan,
    AppName.VxMarkScan,
  ],
};

const ScannerBatchStarted: LogDetails = {
  eventId: LogEventId.ScannerBatchStarted,
  eventType: LogEventType.SystemAction,
  documentationMessage: 'The precinct scanner has started a new batch.',
  restrictInDocumentationToApps: [AppName.VxScan],
};

const ScannerBatchEnded: LogDetails = {
  eventId: LogEventId.ScannerBatchEnded,
  eventType: LogEventType.SystemAction,
  documentationMessage: 'The precinct scanner has ended the current batch.',
  restrictInDocumentationToApps: [AppName.VxScan],
};

const ScannerEvent: LogDetails = {
  eventId: LogEventId.ScannerEvent,
  eventType: LogEventType.ApplicationAction,
  documentationMessage: 'Precinct scanner state machine received an event.',
  restrictInDocumentationToApps: [AppName.VxScan],
};

const ScannerStateChanged: LogDetails = {
  eventId: LogEventId.ScannerStateChanged,
  eventType: LogEventType.ApplicationStatus,
  documentationMessage: 'Precinct scanner state machine transitioned states.',
  restrictInDocumentationToApps: [AppName.VxScan],
};

const SoundToggled: LogDetails = {
  eventId: LogEventId.SoundToggled,
  eventType: LogEventType.ApplicationStatus,
  documentationMessage:
    'Sounds on the precinct scanner were toggled on or off as indicated.',
  restrictInDocumentationToApps: [AppName.VxScan],
};

const DoubleSheetDetectionToggled: LogDetails = {
  eventId: LogEventId.DoubleSheetDetectionToggled,
  eventType: LogEventType.ApplicationStatus,
  documentationMessage:
    'Double sheet detection toggled on or off as indicated.',
  restrictInDocumentationToApps: [AppName.VxScan],
};

const ContinuousExportToggled: LogDetails = {
  eventId: LogEventId.ContinuousExportToggled,
  eventType: LogEventType.ApplicationStatus,
  documentationMessage: 'Continuous export paused or resumed as indicated.',
  restrictInDocumentationToApps: [AppName.VxScan],
};

const MarkScanStateMachineEvent: LogDetails = {
  eventId: LogEventId.MarkScanStateMachineEvent,
  eventType: LogEventType.SystemStatus,
  documentationMessage: 'Event fired by the mark-scan state machine.',
  restrictInDocumentationToApps: [AppName.VxMarkScan],
};

const PatDeviceError: LogDetails = {
  eventId: LogEventId.PatDeviceError,
  eventType: LogEventType.SystemStatus,
  documentationMessage:
    'VxMark encountered an error with the built-in PAT device port or the device itself',
  restrictInDocumentationToApps: [AppName.VxMarkScan],
};

const PaperHandlerStateChanged: LogDetails = {
  eventId: LogEventId.PaperHandlerStateChanged,
  eventType: LogEventType.ApplicationStatus,
  documentationMessage:
    'Precinct print/scan BMD state machine transitioned states.',
  restrictInDocumentationToApps: [AppName.VxMarkScan],
};

const VoteCast: LogDetails = {
  eventId: LogEventId.VoteCast,
  eventType: LogEventType.UserAction,
  documentationMessage: 'Vote was cast on a BMD.',
  restrictInDocumentationToApps: [AppName.VxMarkScan],
};

const BallotInvalidated: LogDetails = {
  eventId: LogEventId.BallotInvalidated,
  eventType: LogEventType.UserAction,
  documentationMessage: 'A vote was canceled during verification.',
  restrictInDocumentationToApps: [AppName.VxMarkScan],
};

const PollWorkerConfirmedBallotRemoval: LogDetails = {
  eventId: LogEventId.PollWorkerConfirmedBallotRemoval,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'A poll worker confirmed the invalid ballot was removed during ballot invalidation.',
  restrictInDocumentationToApps: [AppName.VxMarkScan],
};

const BlankInterpretation: LogDetails = {
  eventId: LogEventId.BlankInterpretation,
  eventType: LogEventType.SystemStatus,
  documentationMessage: 'Interpretation of a printed ballot was blank.',
  restrictInDocumentationToApps: [AppName.VxMarkScan],
};

const PaperHandlerConnection: LogDetails = {
  eventId: LogEventId.PaperHandlerConnection,
  eventType: LogEventType.SystemStatus,
  documentationMessage: 'Connection to paper handler device was resolved.',
  restrictInDocumentationToApps: [AppName.VxMarkScan],
};

const CreateVirtualUinputDeviceInit: LogDetails = {
  eventId: LogEventId.CreateVirtualUinputDeviceInit,
  eventType: LogEventType.SystemAction,
  documentationMessage:
    'A hardware daemon attempted to create a uinput virtual device.',
  restrictInDocumentationToApps: [AppName.VxMarkScan],
};

const CreateVirtualUinputDeviceComplete: LogDetails = {
  eventId: LogEventId.CreateVirtualUinputDeviceComplete,
  eventType: LogEventType.SystemAction,
  documentationMessage:
    'A hardware daemon finished creating a uinput virtual device.',
  restrictInDocumentationToApps: [AppName.VxMarkScan],
};

const ConnectToGpioPinInit: LogDetails = {
  eventId: LogEventId.ConnectToGpioPinInit,
  eventType: LogEventType.SystemAction,
  documentationMessage:
    'mark-scan PAT daemon initiated connection a specific GPIO pin.',
  restrictInDocumentationToApps: [AppName.VxMarkScan],
};

const ConnectToGpioPinComplete: LogDetails = {
  eventId: LogEventId.ConnectToGpioPinComplete,
  eventType: LogEventType.SystemAction,
  documentationMessage:
    'mark-scan PAT daemon completed connection a specific GPIO pin.',
  restrictInDocumentationToApps: [AppName.VxMarkScan],
};

const ConnectToPatInputInit: LogDetails = {
  eventId: LogEventId.ConnectToPatInputInit,
  eventType: LogEventType.SystemAction,
  documentationMessage:
    'mark-scan PAT daemon initiated connection to the PAT device input.',
  restrictInDocumentationToApps: [AppName.VxMarkScan],
};

const ConnectToPatInputComplete: LogDetails = {
  eventId: LogEventId.ConnectToPatInputComplete,
  eventType: LogEventType.SystemAction,
  documentationMessage:
    'mark-scan PAT daemon completed connection to the PAT device input.',
  restrictInDocumentationToApps: [AppName.VxMarkScan],
};

const ControllerConnectionInit: LogDetails = {
  eventId: LogEventId.ControllerConnectionInit,
  eventType: LogEventType.SystemAction,
  documentationMessage:
    'mark-scan controller daemon initiated connection to the accessible controller.',
  restrictInDocumentationToApps: [AppName.VxMarkScan],
};

const ControllerConnectionComplete: LogDetails = {
  eventId: LogEventId.ControllerConnectionComplete,
  eventType: LogEventType.SystemAction,
  documentationMessage:
    'mark-scan controller daemon completed connection to the accessible controller.',
  restrictInDocumentationToApps: [AppName.VxMarkScan],
};

const ControllerHandshakeInit: LogDetails = {
  eventId: LogEventId.ControllerHandshakeInit,
  eventType: LogEventType.SystemAction,
  documentationMessage:
    'mark-scan controller daemon initiated handshake with controller.',
  restrictInDocumentationToApps: [AppName.VxMarkScan],
};

const ControllerHandshakeComplete: LogDetails = {
  eventId: LogEventId.ControllerHandshakeComplete,
  eventType: LogEventType.SystemAction,
  documentationMessage:
    'mark-scan controller daemon received handshake response from controller.',
  restrictInDocumentationToApps: [AppName.VxMarkScan],
};

const ErrorSettingSigintHandler: LogDetails = {
  eventId: LogEventId.ErrorSettingSigintHandler,
  eventType: LogEventType.SystemStatus,
  documentationMessage:
    'mark-scan controller daemon encountered an error when setting SIGINT handler.',
  restrictInDocumentationToApps: [AppName.VxMarkScan],
};

const UnexpectedHardwareDeviceResponse: LogDetails = {
  eventId: LogEventId.UnexpectedHardwareDeviceResponse,
  eventType: LogEventType.SystemStatus,
  documentationMessage:
    'A connected hardware device returned an unexpected response.',
  restrictInDocumentationToApps: [AppName.VxMarkScan],
};

const NoPid: LogDetails = {
  eventId: LogEventId.NoPid,
  eventType: LogEventType.SystemStatus,
  documentationMessage:
    'No PID was readable from PID file, or PID file did not exist.',
  restrictInDocumentationToApps: [AppName.VxMarkScan],
};

const SignedHashValidationInit: LogDetails = {
  eventId: LogEventId.SignedHashValidationInit,
  eventType: LogEventType.UserAction,
  documentationMessage: 'Initiating signed hash validation.',
  defaultMessage: 'Initiating signed hash validation...',
};

const SignedHashValidationComplete: LogDetails = {
  eventId: LogEventId.SignedHashValidationComplete,
  eventType: LogEventType.UserAction,
  documentationMessage:
    'Signed hash validation completed. Success or failure indicated by disposition.',
  defaultMessage: 'Signed hash validation completed.',
};

export function getDetailsForEventId(eventId: LogEventId): LogDetails {
  switch (eventId) {
    case LogEventId.ElectionConfigured:
      return ElectionConfigured;
    case LogEventId.ElectionUnconfigured:
      return ElectionUnconfigured;
    case LogEventId.AuthPinEntry:
      return AuthPinEntry;
    case LogEventId.AuthPinEntryLockout:
      return AuthPinEntryLockout;
    case LogEventId.AuthLogin:
      return AuthLogin;
    case LogEventId.AuthVoterSessionUpdated:
      return AuthVoterSessionUpdated;
    case LogEventId.AuthLogout:
      return AuthLogout;
    case LogEventId.UsbDriveEjectInit:
      return UsbDriveEjectInit;
    case LogEventId.UsbDriveEjected:
      return UsbDriveEjected;
    case LogEventId.UsbDriveMountInit:
      return UsbDriveMountInit;
    case LogEventId.UsbDriveMounted:
      return UsbDriveMounted;
    case LogEventId.UsbDriveFormatInit:
      return UsbDriveFormatInit;
    case LogEventId.UsbDriveFormatted:
      return UsbDriveFormatted;
    case LogEventId.ApplicationStartup:
      return ApplicationStartup;
    case LogEventId.PrinterConfigurationAdded:
      return PrinterConfigurationAdded;
    case LogEventId.PrinterConfigurationRemoved:
      return PrinterConfigurationRemoved;
    case LogEventId.PrinterStatusChanged:
      return PrinterStatusChanged;
    case LogEventId.PrinterPrintRequest:
      return PrinterPrintRequest;
    case LogEventId.PrinterPrintComplete:
      return PrinterPrintComplete;
    case LogEventId.DeviceAttached:
      return DeviceAttached;
    case LogEventId.DeviceUnattached:
      return DeviceUnattached;
    case LogEventId.WorkspaceConfigurationMessage:
      return WorkspaceConfigurationMessage;
    case LogEventId.TogglingTestMode:
      return TogglingTestMode;
    case LogEventId.ToggledTestMode:
      return ToggledTestMode;
    case LogEventId.FileSaved:
      return FileSaved;
    case LogEventId.LogConversionToCdfComplete:
      return LogConversionToCdfComplete;
    case LogEventId.LogConversionToCdfLogLineError:
      return LogConversionToCdfLogLineError;
    case LogEventId.RebootMachine:
      return RebootMachine;
    case LogEventId.PowerDown:
      return PowerDown;
    case LogEventId.DiagnosticInit:
      return DiagnosticInit;
    case LogEventId.DiagnosticError:
      return DiagnosticError;
    case LogEventId.DiagnosticComplete:
      return DiagnosticComplete;
    case LogEventId.ReadinessReportPrinted:
      return ReadinessReportPrinted;
    case LogEventId.ReadinessReportSaved:
      return ReadinessReportSaved;
    case LogEventId.HeadphonesDetectionError:
      return HeadphonesDetectionError;
    case LogEventId.UnknownError:
      return UnknownError;
    case LogEventId.PermissionDenied:
      return PermissionDenied;
    case LogEventId.ParseError:
      return ParseError;
    case LogEventId.DatabaseConnectInit:
      return DatabaseConnectInit;
    case LogEventId.DatabaseConnectComplete:
      return DatabaseConnectComplete;
    case LogEventId.DatabaseCreateInit:
      return DatabaseCreateInit;
    case LogEventId.DatabaseCreateComplete:
      return DatabaseCreateComplete;
    case LogEventId.DatabaseDestroyInit:
      return DatabaseDestroyInit;
    case LogEventId.DatabaseDestroyComplete:
      return DatabaseDestroyComplete;
    case LogEventId.FileReadError:
      return FileReadError;
    case LogEventId.DmVerityBoot:
      return DmVerityBoot;
    case LogEventId.MachineBootInit:
      return MachineBootInit;
    case LogEventId.MachineBootComplete:
      return MachineBootComplete;
    case LogEventId.MachineShutdownInit:
      return MachineShutdownInit;
    case LogEventId.MachineShutdownComplete:
      return MachineShutdownComplete;
    case LogEventId.UsbDeviceChangeDetected:
      return UsbDeviceChangeDetected;
    case LogEventId.Info:
      return Info;
    case LogEventId.Heartbeat:
      return Heartbeat;
    case LogEventId.ProcessStarted:
      return ProcessStarted;
    case LogEventId.ProcessTerminated:
      return ProcessTerminated;
    case LogEventId.SudoAction:
      return SudoAction;
    case LogEventId.PasswdChange:
      return PasswdChange;
    case LogEventId.SaveElectionPackageInit:
      return SaveElectionPackageInit;
    case LogEventId.SaveElectionPackageComplete:
      return SaveElectionPackageComplete;
    case LogEventId.SmartCardProgramInit:
      return SmartCardProgramInit;
    case LogEventId.SmartCardProgramComplete:
      return SmartCardProgramComplete;
    case LogEventId.SmartCardUnprogramInit:
      return SmartCardUnprogramInit;
    case LogEventId.SmartCardUnprogramComplete:
      return SmartCardUnprogramComplete;
    case LogEventId.ListCastVoteRecordExportsOnUsbDrive:
      return ListCastVoteRecordExportsOnUsbDrive;
    case LogEventId.ImportCastVoteRecordsInit:
      return ImportCastVoteRecordsInit;
    case LogEventId.ImportCastVoteRecordsComplete:
      return ImportCastVoteRecordsComplete;
    case LogEventId.ClearImportedCastVoteRecordsInit:
      return ClearImportedCastVoteRecordsInit;
    case LogEventId.ClearImportedCastVoteRecordsComplete:
      return ClearImportedCastVoteRecordsComplete;
    case LogEventId.ManualTallyDataEdited:
      return ManualTallyDataEdited;
    case LogEventId.ManualTallyDataRemoved:
      return ManualTallyDataRemoved;
    case LogEventId.ElectionResultsReportingTallyFileImported:
      return ElectionResultsReportingTallyFileImported;
    case LogEventId.MarkedTallyResultsOfficial:
      return MarkedTallyResultsOfficial;
    case LogEventId.ElectionReportPreviewed:
      return ElectionReportPreviewed;
    case LogEventId.ElectionReportPrinted:
      return ElectionReportPrinted;
    case LogEventId.WriteInAdjudicated:
      return WriteInAdjudicated;
    case LogEventId.ClearingBallotData:
      return ClearingBallotData;
    case LogEventId.ClearedBallotData:
      return ClearedBallotData;
    case LogEventId.DeleteScanBatchInit:
      return DeleteScanBatchInit;
    case LogEventId.DeleteScanBatchComplete:
      return DeleteScanBatchComplete;
    case LogEventId.ScanBatchInit:
      return ScanBatchInit;
    case LogEventId.ScanSheetComplete:
      return ScanSheetComplete;
    case LogEventId.ScanBatchComplete:
      return ScanBatchComplete;
    case LogEventId.ScanBatchContinue:
      return ScanBatchContinue;
    case LogEventId.ScanAdjudicationInfo:
      return ScanAdjudicationInfo;
    case LogEventId.FujitsuScanInit:
      return FujitsuScanInit;
    case LogEventId.FujitsuScanImageScanned:
      return FujitsuScanImageScanned;
    case LogEventId.FujitsuScanBatchComplete:
      return FujitsuScanBatchComplete;
    case LogEventId.FujitsuScanMessage:
      return FujitsuScanMessage;
    case LogEventId.ElectionPackageLoadedFromUsb:
      return ElectionPackageLoadedFromUsb;
    case LogEventId.ExportCastVoteRecordsInit:
      return ExportCastVoteRecordsInit;
    case LogEventId.ExportCastVoteRecordsComplete:
      return ExportCastVoteRecordsComplete;
    case LogEventId.PollsOpened:
      return PollsOpened;
    case LogEventId.VotingPaused:
      return VotingPaused;
    case LogEventId.VotingResumed:
      return VotingResumed;
    case LogEventId.PollsClosed:
      return PollsClosed;
    case LogEventId.ResetPollsToPaused:
      return ResetPollsToPaused;
    case LogEventId.BallotBoxEmptied:
      return BallotBoxEmptied;
    case LogEventId.PrecinctConfigurationChanged:
      return PrecinctConfigurationChanged;
    case LogEventId.ScannerBatchStarted:
      return ScannerBatchStarted;
    case LogEventId.ScannerBatchEnded:
      return ScannerBatchEnded;
    case LogEventId.ScannerEvent:
      return ScannerEvent;
    case LogEventId.ScannerStateChanged:
      return ScannerStateChanged;
    case LogEventId.SoundToggled:
      return SoundToggled;
    case LogEventId.DoubleSheetDetectionToggled:
      return DoubleSheetDetectionToggled;
    case LogEventId.ContinuousExportToggled:
      return ContinuousExportToggled;
    case LogEventId.MarkScanStateMachineEvent:
      return MarkScanStateMachineEvent;
    case LogEventId.PatDeviceError:
      return PatDeviceError;
    case LogEventId.PaperHandlerStateChanged:
      return PaperHandlerStateChanged;
    case LogEventId.VoteCast:
      return VoteCast;
    case LogEventId.BallotInvalidated:
      return BallotInvalidated;
    case LogEventId.PollWorkerConfirmedBallotRemoval:
      return PollWorkerConfirmedBallotRemoval;
    case LogEventId.BlankInterpretation:
      return BlankInterpretation;
    case LogEventId.PaperHandlerConnection:
      return PaperHandlerConnection;
    case LogEventId.CreateVirtualUinputDeviceInit:
      return CreateVirtualUinputDeviceInit;
    case LogEventId.CreateVirtualUinputDeviceComplete:
      return CreateVirtualUinputDeviceComplete;
    case LogEventId.ConnectToGpioPinInit:
      return ConnectToGpioPinInit;
    case LogEventId.ConnectToGpioPinComplete:
      return ConnectToGpioPinComplete;
    case LogEventId.ConnectToPatInputInit:
      return ConnectToPatInputInit;
    case LogEventId.ConnectToPatInputComplete:
      return ConnectToPatInputComplete;
    case LogEventId.ControllerConnectionInit:
      return ControllerConnectionInit;
    case LogEventId.ControllerConnectionComplete:
      return ControllerConnectionComplete;
    case LogEventId.ControllerHandshakeInit:
      return ControllerHandshakeInit;
    case LogEventId.ControllerHandshakeComplete:
      return ControllerHandshakeComplete;
    case LogEventId.ErrorSettingSigintHandler:
      return ErrorSettingSigintHandler;
    case LogEventId.UnexpectedHardwareDeviceResponse:
      return UnexpectedHardwareDeviceResponse;
    case LogEventId.NoPid:
      return NoPid;
    case LogEventId.SignedHashValidationInit:
      return SignedHashValidationInit;
    case LogEventId.SignedHashValidationComplete:
      return SignedHashValidationComplete;
    default:
      throwIllegalValue(eventId);
  }
}
